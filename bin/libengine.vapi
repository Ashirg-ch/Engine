/* libengine.vapi generated by valac.exe 0.36.1-dirty, do not modify. */

namespace Engine {
	[CCode (cheader_filename = "libengine.h")]
	public abstract class Engine : GLib.Object {
		public Engine (bool multithread_rendering, bool debug);
		public abstract bool init (string window_name, int window_width, int window_height, int multisampling, bool fullscreen);
		public abstract void quit ();
		public abstract void stop ();
		public bool debug { get; private set; }
		public bool multithread_rendering { get; private set; }
		public RenderTarget renderer { get; protected set; }
		public IWindowTarget window { get; protected set; }
	}
	[CCode (cheader_filename = "libengine.h")]
	public class SDLGLEngine : global::Engine.Engine {
		public SDLGLEngine (bool multithread_rendering, bool debug);
		public override bool init (string window_name, int window_width, int window_height, int multisamples, bool fullscreen);
		public override void quit ();
		public override void stop ();
	}
	[CCode (cheader_filename = "libengine.h")]
	public struct Rectangle {
		public float x;
		public float y;
		public float width;
		public float height;
		public Rectangle (float x, float y, float width, float height);
		public Rectangle.vec (Vec2 position, Size2 size);
		public Vec2 position { get; }
		public Size2 size { get; }
	}
}
[CCode (cheader_filename = "libengine.h")]
public enum EngineLogType {
	ENGINE,
	NETWORK,
	RENDERING,
	DEBUG
}
[CCode (cheader_filename = "libengine.h")]
public enum IlluminationModel {
	COLOR_ON_AMBIENT_OFF,
	COLOR_ON_AMBIENT_ON,
	HIGHLIGHT_ON
}
[CCode (cheader_filename = "libengine.h")]
public enum ScanCode {
	UNKNOWN,
	A,
	B,
	C,
	D,
	E,
	F,
	G,
	H,
	I,
	J,
	K,
	L,
	M,
	N,
	O,
	P,
	Q,
	R,
	S,
	T,
	U,
	V,
	W,
	X,
	Y,
	Z,
	NUM_1,
	NUM_2,
	NUM_3,
	NUM_4,
	NUM_5,
	NUM_6,
	NUM_7,
	NUM_8,
	NUM_9,
	NUM_0,
	RETURN,
	ESCAPE,
	BACKSPACE,
	TAB,
	SPACE,
	MINUS,
	EQUALS,
	LEFTBRACKET,
	RIGHTBRACKET,
	BACKSLASH,
	NONUSHASH,
	SEMICOLON,
	APOSTROPHE,
	GRAVE,
	COMMA,
	PERIOD,
	SLASH,
	CAPSLOCK,
	F1,
	F2,
	F3,
	F4,
	F5,
	F6,
	F7,
	F8,
	F9,
	F10,
	F11,
	F12,
	PRINTSCREEN,
	SCROLLLOCK,
	PAUSE,
	INSERT,
	HOME,
	PAGEUP,
	DELETE,
	END,
	PAGEDOWN,
	RIGHT,
	LEFT,
	DOWN,
	UP,
	NUMLOCKCLEAR,
	KP_DIVIDE,
	KP_MULTIPLY,
	KP_MINUS,
	KP_PLUS,
	KP_ENTER,
	KP_1,
	KP_2,
	KP_3,
	KP_4,
	KP_5,
	KP_6,
	KP_7,
	KP_8,
	KP_9,
	KP_0,
	KP_PERIOD,
	NONUSBACKSLASH,
	APPLICATION,
	POWER,
	KP_EQUALS,
	F13,
	F14,
	F15,
	F16,
	F17,
	F18,
	F19,
	F20,
	F21,
	F22,
	F23,
	F24,
	EXECUTE,
	HELP,
	MENU,
	SELECT,
	STOP,
	AGAIN,
	UNDO,
	CUT,
	COPY,
	PASTE,
	FIND,
	MUTE,
	VOLUMEUP,
	VOLUMEDOWN,
	LOCKINGCAPSLOCK,
	LOCKINGNUMLOCK,
	LOCKINGSCROLLLOCK,
	KP_COMMA,
	KP_EQUALSAS400,
	INTERNATIONAL1,
	INTERNATIONAL2,
	INTERNATIONAL3,
	INTERNATIONAL4,
	INTERNATIONAL5,
	INTERNATIONAL6,
	INTERNATIONAL7,
	INTERNATIONAL8,
	INTERNATIONAL9,
	LANG1,
	LANG2,
	LANG3,
	LANG4,
	LANG5,
	LANG6,
	LANG7,
	LANG8,
	LANG9,
	ALTERASE,
	SYSREQ,
	CANCEL,
	CLEAR,
	PRIOR,
	RETURN2,
	SEPARATOR,
	OUT,
	OPER,
	CLEARAGAIN,
	CRSEL,
	EXSEL,
	KP_00,
	KP_000,
	THOUSANDSSEPARATOR,
	DECIMALSEPARATOR,
	CURRENCYUNIT,
	CURRENCYSUBUNIT,
	KP_LEFTPAREN,
	KP_RIGHTPAREN,
	KP_LEFTBRACE,
	KP_RIGHTBRACE,
	KP_TAB,
	KP_BACKSPACE,
	KP_A,
	KP_B,
	KP_C,
	KP_D,
	KP_E,
	KP_F,
	KP_XOR,
	KP_POWER,
	KP_PERCENT,
	KP_LESS,
	KP_GREATER,
	KP_AMPERSAND,
	KP_DBLAMPERSAND,
	KP_VERTICALBAR,
	KP_DBLVERTICALBAR,
	KP_COLON,
	KP_HASH,
	KP_SPACE,
	KP_AT,
	KP_EXCLAM,
	KP_MEMSTORE,
	KP_MEMRECALL,
	KP_MEMCLEAR,
	KP_MEMADD,
	KP_MEMSUBTRACT,
	KP_MEMMULTIPLY,
	KP_MEMDIVIDE,
	KP_PLUSMINUS,
	KP_CLEAR,
	KP_CLEARENTRY,
	KP_BINARY,
	KP_OCTAL,
	KP_DECIMAL,
	KP_HEXADECIMAL,
	LCTRL,
	LSHIFT,
	LALT,
	LGUI,
	RCTRL,
	RSHIFT,
	RALT,
	RGUI,
	MODE,
	AUDIONEXT,
	AUDIOPREV,
	AUDIOSTOP,
	AUDIOPLAY,
	AUDIOMUTE,
	MEDIASELECT,
	WWW,
	MAIL,
	CALCULATOR,
	COMPUTER,
	AC_SEARCH,
	AC_HOME,
	AC_BACK,
	AC_FORWARD,
	AC_STOP,
	AC_REFRESH,
	AC_BOOKMARKS,
	BRIGHTNESSDOWN,
	BRIGHTNESSUP,
	DISPLAYSWITCH,
	KBDILLUMTOGGLE,
	KBDILLUMDOWN,
	KBDILLUMUP,
	EJECT,
	SLEEP,
	APP1,
	APP2,
	NUM_SCANCODES
}
[CCode (cheader_filename = "libengine.h")]
public enum Modifier {
	NONE,
	LSHIFT,
	RSHIFT,
	LCTRL,
	RCTRL,
	LALT,
	RALT,
	LGUI,
	RGUI,
	NUM,
	CAPS,
	MODE,
	RESERVED
}
[CCode (cheader_filename = "libengine.h")]
public enum KeyCode {
	SCANCODE_MASK,
	UNKNOWN,
	RETURN,
	ESCAPE,
	BACKSPACE,
	TAB,
	SPACE,
	EXCLAIM,
	QUOTEDBL,
	HASH,
	PERCENT,
	DOLLAR,
	AMPERSAND,
	QUOTE,
	LEFTPAREN,
	RIGHTPAREN,
	ASTERISK,
	PLUS,
	COMMA,
	MINUS,
	PERIOD,
	SLASH,
	NUM_0,
	NUM_1,
	NUM_2,
	NUM_3,
	NUM_4,
	NUM_5,
	NUM_6,
	NUM_7,
	NUM_8,
	NUM_9,
	COLON,
	SEMICOLON,
	LESS,
	EQUALS,
	GREATER,
	QUESTION,
	AT,
	LEFTBRACKET,
	BACKSLASH,
	RIGHTBRACKET,
	CARET,
	UNDERSCORE,
	BACKQUOTE,
	a,
	b,
	c,
	d,
	e,
	f,
	g,
	h,
	i,
	j,
	k,
	l,
	m,
	n,
	o,
	p,
	q,
	r,
	s,
	t,
	u,
	v,
	w,
	x,
	y,
	z,
	HOME,
	DELETE,
	END,
	RIGHT,
	LEFT,
	DOWN,
	UP
}
[CCode (cheader_filename = "libengine.h")]
public enum Orientation {
	VERTICAL,
	HORIZONTAL
}
[CCode (cheader_filename = "libengine.h")]
public enum BlendType {
	COLOR,
	MATERIAL,
	BLEND,
	HYBRID
}
[CCode (cheader_filename = "libengine.h")]
public enum OpenGLShaderPrimitiveType {
	CUSTOM,
	VOID,
	BOOL,
	INT,
	FLOAT,
	VEC2,
	VEC3,
	VEC4,
	MAT3,
	MAT4,
	SAMPLER2D
}
[CCode (cheader_filename = "libengine.h")]
public enum OpenGLShaderPropertyDirection {
	NONE,
	IN,
	OUT
}
[CCode (cheader_filename = "libengine.h")]
public enum ResizeStyle {
	ABSOLUTE,
	RELATIVE
}
[CCode (cheader_filename = "libengine.h")]
public enum CursorType {
	UNDEFINED,
	NORMAL,
	HOVER,
	CARET
}
[CCode (cheader_filename = "libengine.h")]
public enum SizingStyle {
	EVEN,
	AUTOSIZE
}
[CCode (cheader_filename = "libengine.h")]
public errordomain DataLengthError {
	OUT_OF_RANGE,
	NEGATIVE_LENGTH
}
[CCode (cheader_filename = "libengine.h")]
public class EngineLog {
	public static void log (EngineLogType log_type, string origin, string message);
	public static void set_log_callback (LogCallback? callback);
}
[CCode (cheader_filename = "libengine.h")]
public class LogCallback {
	public LogCallback ();
	public signal void log (EngineLogType log_type, string origin, string message);
}
[CCode (cheader_filename = "libengine.h")]
public class AudioPlayer {
	public AudioPlayer ();
	public Music load_music (string name);
	public Sound load_sound (string name);
	public bool muted { get; set; }
}
[CCode (cheader_filename = "libengine.h")]
public class Sound {
	public Sound (string name);
	public void play (bool loop = false);
	public void stop ();
	public bool muted { get; set; }
	public string name { get; private set; }
}
[CCode (cheader_filename = "libengine.h")]
public class Music : GLib.Object {
	public Music (string name);
	public void play ();
	public void stop ();
	public signal void music_finished (Music music);
}
[CCode (cheader_filename = "libengine.h")]
public class FileLoader {
	public static string array_to_string (string[] lines);
	public static uint8[]? compress (uint8[]? data);
	public static bool exists (string name);
	public static string[] get_files_in_dir (string name);
	public static string[]? load (string name);
	public static uint8[]? load_data (string name);
	public static FileWriter? open (string name);
	public static bool save (string name, string[] lines);
	public static string[] split_string (string str, bool retain_newline = false);
	public static uint8[]? uncompress (uint8[]? data);
}
[CCode (cheader_filename = "libengine.h")]
public class FileWriter {
	public FileWriter (GLib.FileOutputStream stream);
	public void close ();
	public bool write (string text);
	public bool write_data (uint8[] data);
	public bool write_line (string line);
}
[CCode (cheader_filename = "libengine.h")]
public class ObjParser {
	public ObjParser ();
	public static GeometryData? parse (string path, string filename);
	public static Gee.ArrayList<ModelData> parse_string (string str);
	public static Gee.ArrayList<ModelData> parse_strings (string[] str);
}
[CCode (cheader_filename = "libengine.h")]
public class GeometryData {
	public GeometryData (Gee.ArrayList<ModelData> models, Gee.ArrayList<MaterialData> materials);
	public Gee.ArrayList<MaterialData> materials { get; private set; }
	public Gee.ArrayList<ModelData> models { get; private set; }
}
[CCode (cheader_filename = "libengine.h")]
public class ModelData {
	public ModelData (string? name, string? material_name, ModelTriangle[] triangles);
	public void center_points ();
	public Vec3 center { get; private set; }
	public string? material_name { get; private set; }
	public string? name { get; private set; }
	public ModelPoint[] points { get; private set; }
	public Vec3 size { get; private set; }
}
[CCode (cheader_filename = "libengine.h")]
public class MaterialData {
	public MaterialData (string name, float ns, Vec3 Ka, Vec3 Kd, Vec3 Ks, float d, float illum);
	public float alpha { get; set; }
	public Vec3 ambient_color { get; set; }
	public Vec3 diffuse_color { get; set; }
	public IlluminationModel illumination_model { get; set; }
	public string name { get; set; }
	public Vec3 specular_color { get; set; }
	public float specular_exponent { get; set; }
}
[CCode (cheader_filename = "libengine.h")]
public class Calculations {
	public static float get_collision_distance (Vec3 ray_origin, Vec3 ray_direction, Vec3 model_obb, Mat4 model_matrix);
	public static float get_collision_distance_box (Vec3 ray_origin, Vec3 ray_direction, Vec3 aabb_min, Vec3 aabb_max, Mat4 model_matrix);
	public static Mat4 get_model_matrix (Vec3 translation, Vec3 scale, Quat rotation);
	public static Mat3 get_model_matrix_3 (Vec2 position, float rotation, Size2 scale, float aspect);
	public static Vec3 get_ray (Mat4 projection_matrix, Mat4 view_matrix, Vec2i point, Size2i size);
	public static Vec3 rotate (Vec3 origin, Vec3 rotation, Vec3 offset);
	public static Vec3 rotate_x (Vec3 origin, float rotation, Vec3 offset);
	public static Vec3 rotate_y (Vec3 origin, float rotation, Vec3 offset);
	public static Vec3 rotate_z (Vec3 origin, float rotation, Vec3 offset);
	public static Mat3 rotation_matrix_3 (float angle);
	public static Mat4 rotation_matrix_quat (Quat quat);
	public static Mat4 scale_matrix (Vec3 vec);
	public static Mat3 scale_matrix_3 (Size2 vec);
	public static int sign (float n);
	public static Mat4 translation_matrix (Vec3 vec);
	public static Mat3 translation_matrix_3 (Vec2 vec);
}
[CCode (cheader_filename = "libengine.h")]
public class DeltaTimer {
	public DeltaTimer ();
	public float elapsed (DeltaArgs args);
	public void reset ();
}
[CCode (cheader_filename = "libengine.h")]
public class EventTimer {
	public EventTimer (float delay, bool active = false);
	public void activate ();
	public void process (DeltaArgs args);
	public float delay { get; set; }
	public signal void elapsed (EventTimer timer);
}
[CCode (cheader_filename = "libengine.h")]
public class Helper {
	public static string sanitize_string (string input);
}
[CCode (cheader_filename = "libengine.h")]
public class ImageLoader {
	public static ImageData? load_image (string name);
}
[CCode (cheader_filename = "libengine.h")]
public class ImageData {
	public ImageData (uchar[] data, Size2i size);
	public uchar[] data { get; private set; }
	public Size2i size { get; private set; }
}
[CCode (cheader_filename = "libengine.h")]
public class ImageLoadWrap : GLib.Object {
	public static ImageData? load_image (string name);
}
[CCode (cheader_filename = "libengine.h")]
public class LabelLoader {
	public LabelLoader ();
	public LabelBitmap generate_label_bitmap (string font_type, float font_size, string text);
	public static LabelBitmap generate_label_bitmap_static (string font_type, float font_size, string text);
	public LabelInfo get_label_info (string font_type, float font_size, string text);
	public static LabelInfo get_label_info_static (string font_type, float font_size, string text);
	public static void initialize ();
}
[CCode (cheader_filename = "libengine.h")]
public class LabelInfo {
	public LabelInfo (Size2i size);
	public Size2i size { get; private set; }
}
[CCode (cheader_filename = "libengine.h")]
public class LabelBitmap {
	public LabelBitmap (uchar[] data, Size2i size);
	public uchar[] data { get; private set; }
	public Size2i size { get; private set; }
}
[CCode (cheader_filename = "libengine.h")]
public class Networking : GLib.Object {
	public Networking ();
	public void close ();
	public static uint8[] float_to_data (float f);
	public bool host (uint16 port);
	public static uint8[] int_to_data (uint32 n);
	public static Connection? join (string addr, uint16 port);
	public void stop_listening ();
	public signal void connected (Connection connection);
	public signal void message_received (Connection connection, Message message);
}
[CCode (cheader_filename = "libengine.h")]
public class MessageSignal {
	public MessageSignal ();
	public signal void message (Connection connection, Message message);
}
[CCode (cheader_filename = "libengine.h")]
public class Connection : GLib.Object {
	public Connection (GLib.SocketConnection connection);
	public void close ();
	public void send (Message message);
	public void start ();
	public signal void closed (Connection connection);
	public signal void message_received (Connection connection, Message message);
}
[CCode (cheader_filename = "libengine.h")]
public class Message : GLib.Object {
	public Message (uint8[] data);
	protected Message.empty ();
	public uint8[] data { get; protected set; }
}
[CCode (cheader_filename = "libengine.h")]
public class DataUInt {
	public DataUInt (uint8[] data);
	public bool get_bool () throws DataLengthError;
	public uint8 get_byte () throws DataLengthError;
	public uint8[] get_data (int length) throws DataLengthError;
	public float get_float () throws DataLengthError;
	public int get_int () throws DataLengthError;
	public string get_string () throws DataLengthError;
	public string get_string_length (int length) throws DataLengthError;
}
[CCode (cheader_filename = "libengine.h")]
public abstract class Serializable : GLib.Object {
	public class SerializationContext {
		public SerializationContext ();
		public void add_bool (bool b);
		public void add_byte (uint8 b);
		public void add_float (float f);
		public void add_int (int i);
		public void add_string (string? str);
		public uint8[] serialize ();
	}
	public Serializable ();
	public static Serializable? deserialize (uint8[]? bytes_raw);
	public static Serializable? deserialize_string (string str);
	public uint8[] serialize ();
}
[CCode (cheader_filename = "libengine.h")]
public class SerializableList<T> : Serializable {
	public SerializableList (T[] items);
	public SerializableList.empty ();
	public T[] to_array ();
	public T[] items { get; protected set; }
}
[CCode (cheader_filename = "libengine.h")]
public class ObjInt : Serializable {
	public ObjInt (int value);
	public int value { get; protected set; }
}
[CCode (cheader_filename = "libengine.h")]
public class Random {
	public Random ();
	public float float_range (float min, float max);
	public int int_range (int min, int max);
	public bool next_bool ();
	public float next_float ();
	public Random.seed (int seed);
}
[CCode (cheader_filename = "libengine.h")]
public class Threading {
	public delegate void Del0Arg ();
	public delegate void Del1Arg (GLib.Object arg1);
	public delegate void Del2Arg (GLib.Object arg1, GLib.Object arg2);
	public delegate void Del3Arg (GLib.Object arg1, GLib.Object arg2, GLib.Object arg3);
	public delegate void Del4Arg (GLib.Object arg1, GLib.Object arg2, GLib.Object arg3, GLib.Object arg4);
	public static void start0 (Threading.Del0Arg function);
	public static void start1 (Threading.Del1Arg function, GLib.Object arg1);
	public static void start2 (Threading.Del2Arg function, GLib.Object arg1, GLib.Object arg2);
	public static void start3 (Threading.Del3Arg function, GLib.Object arg1, GLib.Object arg2, GLib.Object arg3);
	public static void start4 (Threading.Del4Arg function, GLib.Object arg1, GLib.Object arg2, GLib.Object arg3, GLib.Object arg4);
	public static bool threading { get; }
}
[CCode (cheader_filename = "libengine.h")]
public class Obj<T> : Serializable {
	public T obj;
	public Obj (T t);
}
[CCode (cheader_filename = "libengine.h")]
public class StepTimer {
	public StepTimer (float step_seconds = 1, bool skip_multiples = true);
	public bool elapsed ();
}
[CCode (cheader_filename = "libengine.h")]
public class DelayTimer {
	public DelayTimer ();
	public bool active (float time);
	public void set_time (float delay, bool add = false);
	public float delay { get; set; }
	public bool is_active { get; private set; }
}
[CCode (cheader_filename = "libengine.h")]
public abstract class Curve {
	public Curve ();
	public abstract float map (float x);
}
[CCode (cheader_filename = "libengine.h")]
public class LinearCurve : Curve {
	public LinearCurve ();
	public override float map (float x);
}
[CCode (cheader_filename = "libengine.h")]
public class SCurve : Curve {
	public SCurve (float exp);
	public override float map (float x);
}
[CCode (cheader_filename = "libengine.h")]
public class ExponentCurve : Curve {
	public ExponentCurve (float exp);
	public override float map (float x);
}
[CCode (cheader_filename = "libengine.h")]
public class SmoothApproachCurve : Curve {
	public SmoothApproachCurve ();
	public override float map (float x);
}
[CCode (cheader_filename = "libengine.h")]
public class Mat3 {
	public Mat3 ();
	public Vec3 col (int c);
	public Mat3 copy ();
	public float[] get_data ();
	public Mat3 mul_mat (Mat3 mat);
	public Vec3 mul_vec (Vec3 vec);
	public Mat3 transpose ();
	public Mat3.with_array (float* a);
	public Mat3.with_vecs (Vec3 v1, Vec3 v2, Vec3 v3);
}
[CCode (cheader_filename = "libengine.h")]
public class Mat4 {
	public Mat4 ();
	public Vec4 col (int c);
	public Mat4.empty ();
	public bool equals (Mat4 other);
	public float @get (int i);
	public float[] get_data ();
	public Vec3 get_position ();
	public Quat get_rotation ();
	public Vec3 get_scale ();
	public float[] get_transpose_data ();
	public Mat4? inverse ();
	public Mat4 mul_mat (Mat4 mat);
	public Vec4 mul_vec (Vec4 vec);
	public Vec4 row (int i);
	public Mat4 transpose ();
	public Mat4.with_array (float* a);
	public Mat4.with_vecs (Vec4 v1, Vec4 v2, Vec4 v3, Vec4 v4);
	public bool identity { get; private set; }
}
[CCode (cheader_filename = "libengine.h")]
public abstract class Path3D {
	public Path3D ();
	protected virtual void do_init ();
	public void init (Vec3 start);
	public abstract Vec3 map (float time);
	public bool relative { get; set; }
	public Vec3 start { get; private set; }
}
[CCode (cheader_filename = "libengine.h")]
public class LinearPath3D : Path3D {
	public LinearPath3D (Vec3 end);
	protected override void do_init ();
	public override Vec3 map (float time);
	public Vec3 end { get; private set; }
}
[CCode (cheader_filename = "libengine.h")]
public class LinearizedPath3D : Path3D {
	public LinearizedPath3D (Vec3[] points);
	protected override void do_init ();
	public override Vec3 map (float time);
}
[CCode (cheader_filename = "libengine.h")]
public abstract class PathQuat {
	public PathQuat ();
	protected virtual void do_init ();
	public void init (Quat start);
	public abstract Quat map (float time);
	public bool relative { get; set; }
	public Quat start { get; private set; }
}
[CCode (cheader_filename = "libengine.h")]
public class LinearPathQuat : PathQuat {
	public LinearPathQuat (Quat end);
	protected override void do_init ();
	public override Quat map (float time);
	public Quat end { get; private set; }
}
[CCode (cheader_filename = "libengine.h")]
public class Quat {
	public Quat ();
	public Quat conjugate ();
	public Quat div_scalar (float scalar);
	public float dot (Quat other);
	public bool equals (Quat other);
	public Quat.from_direction (Vec3 from, Vec3 to);
	public Quat.from_euler (float yaw, float pitch, float roll);
	public Quat.from_euler_vec (Vec3 vec);
	public Quat inv ();
	public float len ();
	public Quat mul (Quat other);
	public Quat mul_scalar (float scalar);
	public Quat neg ();
	public Quat norm ();
	public static Quat slerp (Quat from, Quat to, float t);
	public Vec3 to_euler ();
	public Quat.vals (float w, float x, float y, float z);
	public float w { get; private set; }
	public float x { get; private set; }
	public float y { get; private set; }
	public float z { get; private set; }
}
[CCode (cheader_filename = "libengine.h")]
public class Transform {
	protected Mat4? _full_matrix;
	protected Mat4? _matrix;
	protected Transform? _parent;
	protected Mat4? _parent_matrix;
	protected Vec3 _position;
	protected Quat? _rotation;
	protected Vec3 _scale;
	public Transform ();
	public void apply_matrix (Mat4 mat);
	public void apply_transform (Transform t);
	protected virtual Mat4 calculate_matrix ();
	public void change_parent (Transform? parent);
	public void convert_to_parent (Transform? parent);
	public Transform copy_full_parentless ();
	public Transform copy_shallow_parentless ();
	public Mat4 get_full_matrix ();
	public void unapply_matrix (Mat4 mat);
	public void unapply_transform (Transform t);
	public Transform.with_mat (Mat4 mat);
	public bool dirty_matrix { get; private set; }
	public bool dirty_position { get; private set; }
	public bool dirty_rotation { get; private set; }
	public bool dirty_scale { get; private set; }
	public Mat4 matrix { get; set; }
	public Vec3 position { get; set; }
	public Quat rotation { get; set; }
	public Vec3 scale { get; set; }
}
[CCode (cheader_filename = "libengine.h")]
public class CameraTransform : Transform {
	public CameraTransform ();
	protected override Mat4 calculate_matrix ();
}
[CCode (cheader_filename = "libengine.h")]
public class BasicGeometry {
	public static ModelData get_plane ();
}
[CCode (cheader_filename = "libengine.h")]
public class Camera {
	public Camera ();
	public Transform get_view_transform ();
	public float focal_length { get; set; }
	public float pitch { get; set; }
	public Vec3 position { get; set; }
	public float roll { get; set; }
	public float yaw { get; set; }
}
[CCode (cheader_filename = "libengine.h")]
public class DebugView : View2D {
	public DebugView ();
	protected override void do_process (DeltaArgs args);
	public DebugInfo? info { get; set; }
}
[CCode (cheader_filename = "libengine.h")]
public class DebugInfo {
	public DebugInfo ();
	public void add_strings (string[] strings);
	public Gee.ArrayList<string> strings { get; private set; }
}
[CCode (cheader_filename = "libengine.h")]
public class LightSource {
	public LightSource ();
	public LightSource copy ();
	public Color color { get; set; }
	public float intensity { get; set; }
	public Transform transform { get; set; }
}
[CCode (cheader_filename = "libengine.h")]
public abstract class Transformable3D : IResource {
	protected Transformable3D ();
	public Transformable3D copy ();
	protected Transformable3D copy_internal ();
	protected abstract Transformable3D copy_transformable (Transform transform);
	public Transform transform { get; set; }
}
[CCode (cheader_filename = "libengine.h")]
public class RenderGeometry3D : Transformable3D {
	public RenderGeometry3D ();
	public override Transformable3D copy_transformable (Transform transform);
	public RenderGeometry3D.with_objects (Gee.ArrayList<RenderObject3D> objects);
	public RenderGeometry3D.with_transformables (Gee.ArrayList<Transformable3D> geometry);
	public Gee.ArrayList<Transformable3D> geometry { get; private set; }
}
[CCode (cheader_filename = "libengine.h")]
public class RenderMaterial {
	public RenderMaterial ();
	public RenderMaterial copy ();
	public float alpha { get; set; }
	public Color ambient_color { get; set; }
	public float ambient_material_strength { get; set; }
	public Color diffuse_color { get; set; }
	public float diffuse_material_strength { get; set; }
	public Color specular_color { get; set; }
	public float specular_exponent { get; set; }
	public float specular_material_strength { get; set; }
}
[CCode (cheader_filename = "libengine.h")]
public abstract class RenderObject2D : GLib.Object {
	public RenderObject2D ();
	public RenderObject2D copy ();
	protected abstract RenderObject2D copy_new ();
	public Color diffuse_color { get; set; }
	public Vec2 position { get; set; }
	public float rotation { get; set; }
	public Size2 scale { get; set; }
	public bool scissor { get; set; }
	public Engine.Rectangle scissor_box { get; set; }
}
[CCode (cheader_filename = "libengine.h")]
public class RenderImage2D : RenderObject2D {
	public RenderImage2D (RenderTexture? texture);
	public override RenderObject2D copy_new ();
	public RenderTexture? texture { get; set; }
}
[CCode (cheader_filename = "libengine.h")]
public class RenderLabel2D : RenderObject2D {
	public RenderLabel2D (LabelResourceReference reference);
	public override RenderObject2D copy_new ();
	public float font_size { get; set; }
	public string font_type { get; set; }
	public LabelInfo? info { get; private set; }
	public LabelResourceReference reference { get; private set; }
	public string text { get; set; }
}
[CCode (cheader_filename = "libengine.h")]
public class RenderRectangle2D : RenderObject2D {
	public RenderRectangle2D ();
	public override RenderObject2D copy_new ();
}
[CCode (cheader_filename = "libengine.h")]
public abstract class RenderObject3D : Transformable3D {
	public RenderObject3D (RenderModel model, RenderMaterial material);
	protected abstract RenderObject3D copy_object ();
	protected override Transformable3D copy_transformable (Transform transform);
	public RenderMaterial material { get; set; }
	public RenderModel model { get; set; }
}
[CCode (cheader_filename = "libengine.h")]
public class RenderBody3D : RenderObject3D {
	public RenderBody3D (RenderModel model, RenderMaterial material);
	protected override RenderObject3D copy_object ();
	public RenderTexture? texture { get; set; }
}
[CCode (cheader_filename = "libengine.h")]
public class RenderLabel3D : RenderObject3D {
	public RenderLabel3D (LabelResourceReference reference, RenderModel model);
	protected override RenderObject3D copy_object ();
	public Transform get_label_transform ();
	public bool bold { get; set; }
	public Color color { get; set; }
	public Vec3 end_size { get; }
	public float font_size { get; set; }
	public string font_type { get; set; }
	public LabelInfo? info { get; private set; }
	public LabelResourceReference reference { get; private set; }
	public string text { get; set; }
}
[CCode (cheader_filename = "libengine.h")]
public class RenderScene2D : RenderScene {
	public RenderScene2D (Size2i screen_size, Engine.Rectangle rect);
	public void add_object (RenderObject2D object);
	public Gee.ArrayList<RenderObject2D> objects { get; }
	public Engine.Rectangle rect { get; private set; }
	public Size2i screen_size { get; private set; }
}
[CCode (cheader_filename = "libengine.h")]
public abstract class RenderScene : GLib.Object {
	public RenderScene ();
}
[CCode (cheader_filename = "libengine.h")]
public class RenderScene3D : RenderScene {
	public RenderScene3D (bool copy_state, Size2i screen_size, float scene_aspect_ratio, Engine.Rectangle rect);
	public void add_light_source (LightSource light);
	public void add_object (Transformable3D object);
	public void set_camera (Camera camera);
	public Vec3 camera_position { get; private set; }
	public float focal_length { get; private set; }
	public Gee.ArrayList<LightSource> lights { get; }
	public Gee.ArrayList<Transformable3D> objects { get; }
	public Engine.Rectangle rect { get; private set; }
	public Mat4 scene_matrix { get; private set; }
	public Size2i screen_size { get; private set; }
	public Mat4 view_matrix { get; private set; }
}
[CCode (cheader_filename = "libengine.h")]
public class RenderState {
	public RenderState (Size2i screen_size, bool copy_state, DeltaArgs delta);
	public void add_scene (RenderScene scene);
	public Color back_color { get; set; }
	public bool copy_state { get; private set; }
	public DeltaArgs delta { get; private set; }
	public Gee.ArrayList<RenderScene> scenes { get; private set; }
	public Size2i screen_size { get; private set; }
}
[CCode (cheader_filename = "libengine.h")]
public abstract class RenderTarget : GLib.Object {
	protected abstract class LabelResourceHandle : ILabelResourceHandle, GLib.Object {
		public LabelResourceHandle ();
		public bool created { get; set; }
		public float font_size { get; set; }
		public string font_type { get; set; }
		public string text { get; set; }
	}
	protected ResourceStore store;
	protected IWindowTarget window;
	public RenderTarget (IWindowTarget window, bool multithread_rendering, bool debug);
	protected abstract bool change_shader_2D (string name);
	protected abstract bool change_shader_3D (string name);
	protected abstract void change_v_sync (bool v_sync);
	public void cycle ();
	protected abstract void do_load_label (ILabelResourceHandle handle, LabelBitmap bitmap);
	protected abstract void do_load_model (IModelResourceHandle handle);
	protected abstract void do_load_texture (ITextureResourceHandle handle);
	protected virtual void do_secondly ();
	protected abstract void do_unload_label (ILabelResourceHandle handle);
	protected abstract void do_unload_model (IModelResourceHandle handle);
	protected abstract void do_unload_texture (ITextureResourceHandle handle);
	protected virtual string[] get_debug_strings ();
	public Mat4 get_projection_matrix (float view_angle, float aspect_ratio);
	public bool init ();
	protected abstract RenderTarget.LabelResourceHandle init_label ();
	protected abstract IModelResourceHandle init_model (InputResourceModel model);
	protected abstract ITextureResourceHandle init_texture (InputResourceTexture texture);
	public ILabelResourceHandle load_label ();
	public IModelResourceHandle load_model (InputResourceModel model);
	public ITextureResourceHandle load_texture (InputResourceTexture texture);
	public abstract void render (RenderState state);
	protected abstract bool renderer_init ();
	public void set_state (RenderState state, RenderWindow window);
	public void stop ();
	public void unload_label (ILabelResourceHandle label);
	public void unload_model (IModelResourceHandle model);
	public void unload_texture (ITextureResourceHandle texture);
	public bool anisotropic_filtering { get; set; }
	public bool debug { get; private set; }
	public bool multithread_rendering { get; private set; }
	public ResourceStore resource_store { get; }
	public string shader_2D { owned get; set; }
	public string shader_3D { owned get; set; }
	public bool v_sync { get; set; }
}
[CCode (cheader_filename = "libengine.h")]
public class ResourceStore {
	protected const string MODEL_DIR;
	protected const string TEXTURE_DIR;
	public ResourceStore (RenderTarget renderer);
	public RenderLabel2D? create_label ();
	public RenderLabel3D? create_label_3D ();
	public RenderBody3D? create_plane ();
	public void delete_label (LabelResourceReference reference);
	public LabelBitmap generate_label_bitmap (RenderLabel2D label);
	public LabelBitmap generate_label_bitmap_3D (RenderLabel3D label);
	public RenderBody3D? load_body_3D (string filename, string modelname);
	public RenderGeometry3D? load_geometry_3D (string filename, bool do_load_texture);
	public RenderGeometry3D? load_geometry_3D_dir (string dir, string filename, bool do_load_texture);
	public RenderModel? load_model (string filename, string modelname);
	public RenderModel? load_model_dir (string dir, string filename, string modelname);
	public RenderTexture? load_texture (string filename);
	public RenderTexture? load_texture_dir (string dir, string filename);
	public LabelInfo update_label (string font_type, float font_size, string text);
	public AudioPlayer audio_player { get; }
}
[CCode (cheader_filename = "libengine.h")]
public class InputResourceModel {
	public InputResourceModel (ModelPoint[] points);
	public ModelPoint[] points { get; private set; }
}
[CCode (cheader_filename = "libengine.h")]
public class InputResourceTexture {
	public InputResourceTexture (uchar[] data, Size2i size);
	public uchar[] data { get; private set; }
	public Size2i size { get; private set; }
}
[CCode (cheader_filename = "libengine.h")]
public class LabelResourceReference {
	public LabelResourceReference (ILabelResourceHandle handle, ResourceStore store);
	public void delete_label ();
	public LabelInfo update (string font_type, float font_size, string text);
	public bool deleted { get; private set; }
	public ILabelResourceHandle? handle { get; private set; }
}
[CCode (cheader_filename = "libengine.h")]
public class RenderModel : IResource {
	public RenderModel (IModelResourceHandle handle, string name, Vec3 size);
	public IModelResourceHandle handle { get; private set; }
	public string name { get; private set; }
	public Vec3 size { get; private set; }
}
[CCode (cheader_filename = "libengine.h")]
public class RenderTexture : IResource {
	public RenderTexture (ITextureResourceHandle handle, Size2i size);
	public ITextureResourceHandle handle { get; private set; }
	public Size2i size { get; private set; }
}
[CCode (cheader_filename = "libengine.h")]
public class IResource {
	public IResource ();
}
[CCode (cheader_filename = "libengine.h")]
public class OpenGLFrameBuffer {
	public OpenGLFrameBuffer (int width, int height);
	public void bind ();
	public static void bind_default ();
	public uint handle { get; private set; }
	public int height { get; private set; }
	public OpenGLRenderBuffer render_buffer { get; private set; }
	public int width { get; private set; }
}
[CCode (cheader_filename = "libengine.h")]
public class OpenGLRenderBuffer {
	public OpenGLRenderBuffer (int width, int height);
	public void bind ();
	public static void bind_default ();
	public uint handle { get; private set; }
	public int height { get; private set; }
	public int width { get; private set; }
}
[CCode (cheader_filename = "libengine.h")]
public class OpenGLRenderer : RenderTarget {
	public OpenGLRenderer (IWindowTarget window, bool multithread_rendering, bool debug);
	protected override bool change_shader_2D (string name);
	protected override bool change_shader_3D (string name);
	protected override void change_v_sync (bool v_sync);
	protected override void do_load_label (ILabelResourceHandle label_handle, LabelBitmap label);
	protected override void do_load_model (IModelResourceHandle model);
	protected override void do_load_texture (ITextureResourceHandle texture);
	protected override void do_unload_label (ILabelResourceHandle label_handle);
	protected override void do_unload_model (IModelResourceHandle model);
	protected override void do_unload_texture (ITextureResourceHandle label_handle);
	protected override string[] get_debug_strings ();
	protected override RenderTarget.LabelResourceHandle init_label ();
	protected override IModelResourceHandle init_model (InputResourceModel model);
	protected override ITextureResourceHandle init_texture (InputResourceTexture texture);
	public override void render (RenderState state);
	protected override bool renderer_init ();
}
[CCode (cheader_filename = "libengine.h")]
public class OpenGL2DShaderBuilder : OpenGLShaderBuilder {
	public OpenGL2DShaderBuilder ();
}
[CCode (cheader_filename = "libengine.h")]
public abstract class OpenGLShaderUnit {
	public OpenGLShaderUnit ();
	public void add_dependency (OpenGLShaderUnit dependency);
	public abstract void to_string (GLib.StringBuilder str);
	public OpenGLShaderUnit[]? dependencies { get; set; }
}
[CCode (cheader_filename = "libengine.h")]
public class OpenGLShaderDefine : OpenGLShaderUnit {
	public OpenGLShaderDefine (string name, string value);
	public override void to_string (GLib.StringBuilder str);
	public string name { get; set; }
	public string value { get; set; }
}
[CCode (cheader_filename = "libengine.h")]
public class OpenGLShaderAttribute : OpenGLShaderProperty {
	public OpenGLShaderAttribute (string name, OpenGLShaderPrimitiveType primitive);
	public override void to_string (GLib.StringBuilder str);
}
[CCode (cheader_filename = "libengine.h")]
public class OpenGLShaderVarying : OpenGLShaderProperty {
	public OpenGLShaderVarying (string name, OpenGLShaderPrimitiveType primitive);
	public override void to_string (GLib.StringBuilder str);
}
[CCode (cheader_filename = "libengine.h")]
public class OpenGLShaderUniform : OpenGLShaderProperty {
	public OpenGLShaderUniform (string name, OpenGLShaderPrimitiveType primitive);
	public override void to_string (GLib.StringBuilder str);
}
[CCode (cheader_filename = "libengine.h")]
public class OpenGLShaderProperty : OpenGLShaderUnit {
	public OpenGLShaderProperty (string name, OpenGLShaderPrimitiveType primitive);
	public override void to_string (GLib.StringBuilder str);
	public string? array { get; set; }
	public string? custom_type { get; set; }
	public OpenGLShaderPropertyDirection direction { get; set; }
	public string name { get; set; }
	public OpenGLShaderPrimitiveType primitive { get; set; }
}
[CCode (cheader_filename = "libengine.h")]
public class OpenGLShaderStruct : OpenGLShaderUnit {
	public OpenGLShaderStruct (string name, OpenGLShaderProperty[] properties);
	public override void to_string (GLib.StringBuilder str);
	public string name { get; set; }
	public OpenGLShaderProperty[] properties { get; set; }
}
[CCode (cheader_filename = "libengine.h")]
public class OpenGLShaderCodeBlock : OpenGLShaderUnit {
	public OpenGLShaderCodeBlock (string code);
	public override void to_string (GLib.StringBuilder str);
	public string code { get; set; }
}
[CCode (cheader_filename = "libengine.h")]
public class OpenGLShaderFunction : OpenGLShaderUnit {
	public OpenGLShaderFunction (string name, OpenGLShaderPrimitiveType return_type);
	public void add_code (OpenGLShaderCodeBlock code);
	public void add_codes (OpenGLShaderCodeBlock[] codes);
	public void add_codes_list (Gee.ArrayList<OpenGLShaderCodeBlock> codes);
	public override void to_string (GLib.StringBuilder str);
	public string name { get; set; }
	public OpenGLShaderProperty[]? parameters { get; set; }
	public OpenGLShaderPrimitiveType return_type { get; set; }
}
[CCode (cheader_filename = "libengine.h")]
protected class OpenGLShaderCodeDependencyTree {
	public OpenGLShaderCodeDependencyTree ();
	public void add (OpenGLShaderCodeBlock code);
	public Gee.ArrayList<OpenGLShaderCodeBlock> get_list ();
}
[CCode (cheader_filename = "libengine.h")]
protected class OpenGLShaderDependencyTree {
	public OpenGLShaderDependencyTree ();
	public void add (OpenGLShaderUnit unit);
	public Gee.ArrayList<OpenGLShaderUnit> get_list ();
}
[CCode (cheader_filename = "libengine.h")]
public abstract class OpenGLShaderBuilder {
	protected OpenGLShaderFunction fragment_main;
	protected OpenGLShaderDependencyTree fragment_tree;
	protected int version;
	protected OpenGLShaderFunction vertex_main;
	protected OpenGLShaderDependencyTree vertex_tree;
	public OpenGLShaderBuilder (int version = 120);
	protected void add_fragment_block (OpenGLShaderCodeBlock block);
	protected void add_vertex_block (OpenGLShaderCodeBlock block);
	public string create_fragment_shader ();
	public string create_vertex_shader ();
}
[CCode (cheader_filename = "libengine.h")]
public class OpenGLShaderProgram3D {
	public OpenGLShaderProgram3D (int max_lights, int vert_position_attribute, int vert_texture_attribute, int vert_normal_attribute);
	public void apply_scene (Mat4 proj_mat, Mat4 view_mat, Gee.ArrayList<LightSource> lights);
	public bool init ();
	public void render_object (int triangle_count, Mat4 model_mat, RenderMaterial material, bool use_texture);
	public void use_program ();
}
[CCode (cheader_filename = "libengine.h")]
public class OpenGLStandardShaderBuilder : OpenGLShaderBuilder {
	public OpenGLStandardShaderBuilder (bool high_quality, int max_lights = 2);
}
[CCode (cheader_filename = "libengine.h")]
public class World {
	public World ();
	public void add_object (WorldObject object);
	public void add_to_scene (RenderScene3D scene);
	public void process (DeltaArgs args);
	public WorldCamera? active_camera { get; set; }
}
[CCode (cheader_filename = "libengine.h")]
public class WorldTransform : WorldObject {
	public WorldTransform ();
	public void add_object (WorldObject object);
	public override void add_to_scene (RenderScene3D scene);
	public void convert_object (WorldObject object);
	protected override void do_process (DeltaArgs args);
	public void remove_object (WorldObject object);
	public void unconvert_object (WorldObject object);
}
[CCode (cheader_filename = "libengine.h")]
public class WorldCamera : WorldObject {
	public WorldCamera ();
	protected override void add_to_scene (RenderScene3D scene);
	public Camera camera { get; private set; }
	public float focal_length { get; set; }
}
[CCode (cheader_filename = "libengine.h")]
public class TargetWorldCamera : WorldCamera {
	public TargetWorldCamera (WorldObject viewing_target);
	protected override void add_to_scene (RenderScene3D scene);
	public float roll { get; set; }
	public WorldObject viewing_target { get; set; }
}
[CCode (cheader_filename = "libengine.h")]
public class WorldLabel : WorldObjectTransformable {
	public WorldLabel (ResourceStore store);
	public bool bold { get; set; }
	public Color color { get; set; }
	public Vec3 end_size { get; }
	public float font_size { get; set; }
	public string font_type { get; set; }
	public string text { get; set; }
}
[CCode (cheader_filename = "libengine.h")]
public class WorldLight : WorldObject {
	public WorldLight ();
	protected override void add_to_scene (RenderScene3D scene);
	public override void process_custom_animation (WorldObjectAnimation animation, float time);
	public override void start_custom_animation (WorldObjectAnimation animation);
	public float intensity { get; set; }
}
[CCode (cheader_filename = "libengine.h")]
public class WorldLightAnimation : WorldObjectAnimation {
	public WorldLightAnimation (AnimationTime time);
	public void do_absolute_intensity (Curve curve, float start_intensity);
	public void do_relative_intensity (Curve curve);
	public Curve intensity_curve { get; private set; }
	public bool relative_intensity { get; private set; }
	public float start_intensity { get; set; }
	public bool use_intensity { get; private set; }
}
[CCode (cheader_filename = "libengine.h")]
public abstract class WorldObject {
	protected WorldObject ();
	public virtual void add_to_scene (RenderScene3D scene);
	public void animate (WorldObjectAnimation animation, bool buffered = true);
	protected virtual void apply_transform (Transform transform);
	public void cancel_animations ();
	public void cancel_buffered_animations ();
	public void cancel_unbuffered_animations ();
	protected virtual void do_process (DeltaArgs args);
	public void finish_animations ();
	public void process (DeltaArgs args);
	protected virtual void process_custom_animation (WorldObjectAnimation animation, float time);
	public void remove_animation (WorldObjectAnimation animation);
	protected virtual void start_custom_animation (WorldObjectAnimation animation);
	public Transform transform { get; private set; }
	public signal void animation_finished (WorldObject object, WorldObjectAnimation animation);
}
[CCode (cheader_filename = "libengine.h")]
public class WorldObjectAnimation {
	public WorldObjectAnimation (AnimationTime time);
	public void do_absolute_position (Path3D path);
	public void do_absolute_rotation (PathQuat path);
	public void do_absolute_scale (Path3D path);
	public void do_finish ();
	public void do_relative_position (Path3D path);
	public void do_relative_rotation (PathQuat path);
	public void do_relative_scale (Path3D path);
	public void process (DeltaArgs args);
	public Curve curve { get; set; }
	public Path3D? position_path { get; private set; }
	public PathQuat? rotation_path { get; private set; }
	public Path3D? scale_path { get; private set; }
	public Vec3 start_position { get; set; }
	public Quat start_rotation { get; set; }
	public Vec3 start_scale { get; set; }
	public signal void animate (WorldObjectAnimation animation, float time);
	public signal void finish (WorldObjectAnimation animation);
	public signal void start (WorldObjectAnimation animation);
}
[CCode (cheader_filename = "libengine.h")]
public class WorldObjectTransformable : WorldObject {
	public WorldObjectTransformable (Transformable3D object);
	protected override void add_to_scene (RenderScene3D scene);
}
[CCode (cheader_filename = "libengine.h")]
public class Animation {
	public delegate void animation_delegate (float time);
	public Animation (AnimationTime times);
	public Animation.delay (float delay);
	public void process (DeltaArgs delta);
	public Curve curve { get; set; }
	public signal void animate (float times, Animation animation);
	public signal void animate_finish (Animation animation);
	public signal void animate_start (Animation animation);
	public signal void finished (Animation animation);
	public signal void post_finished (Animation animation);
}
[CCode (cheader_filename = "libengine.h")]
public class AnimationTime : Serializable {
	public AnimationTime (float pre, float time, float post);
	public AnimationTime.preset (float time);
	public float total ();
	public AnimationTime.zero ();
	public float post { get; protected set; }
	public float pre { get; protected set; }
	public float time { get; protected set; }
}
[CCode (cheader_filename = "libengine.h")]
public abstract class Container {
	protected Gee.ArrayList<Container> children;
	protected weak RenderWindow? parent_window;
	public Container ();
	public void add_animation (Animation animation);
	public void add_child (Container child);
	public void add_child_back (Container child);
	protected virtual void added ();
	protected virtual void do_key_press (KeyArgs key);
	protected virtual void do_mouse_event (MouseEventArgs mouse);
	protected virtual void do_mouse_move (MouseMoveArgs mouse);
	protected virtual void do_process (DeltaArgs delta);
	protected virtual void do_render (RenderState state, RenderScene2D scene);
	protected virtual void do_text_edit (TextEditArgs text);
	protected virtual void do_text_input (TextInputArgs text);
	protected string get_clipboard_text ();
	public void key_press (KeyArgs key);
	public void mouse_event (MouseEventArgs mouse);
	public void mouse_move (MouseMoveArgs mouse);
	protected void process (DeltaArgs delta);
	public void remove_child (Container child);
	protected virtual void removed ();
	protected virtual void render (RenderState state, RenderScene2D scene);
	public void resize ();
	protected virtual void resized ();
	protected void set_clipboard_text (string text);
	protected void start_text_input ();
	protected void stop_text_input ();
	public void text_edit (TextEditArgs text);
	public void text_input (TextInputArgs text);
	public Vec2 to_local (Vec2 global);
	public Vec2 to_parent_local (Vec2 global);
	public Vec2 inner_anchor { get; set; }
	public bool loaded { get; }
	public Vec2 normal_position { get; }
	public Vec2 outer_anchor { get; set; }
	protected Engine.Rectangle parent_rect { get; }
	public Vec2 position { get; set; }
	public Engine.Rectangle rect { get; }
	public Size2 relative_size { get; set; }
	public ResizeStyle resize_style { get; set; }
	public bool scissor { get; set; }
	public Engine.Rectangle scissor_box { get; set; }
	public Size2 size { get; set; }
	protected ResourceStore store { get; }
	public bool visible { get; set; }
	public RenderWindow window { get; }
	public Size2i window_size { get; }
	public signal void size_changed ();
	public signal void visible_changed ();
}
[CCode (cheader_filename = "libengine.h")]
public abstract class Control : Container {
	protected Control ();
	public override void do_key_press (KeyArgs key);
	public override void do_mouse_event (MouseEventArgs mouse);
	public override void do_mouse_move (MouseMoveArgs mouse);
	public override void do_text_edit (TextEditArgs text);
	public override void do_text_input (TextInputArgs text);
	protected bool hover_check (Vec2i point);
	protected virtual void on_child_focus_lost ();
	protected virtual void on_click (Vec2 position);
	protected virtual void on_focus_lost ();
	protected virtual void on_key_press (KeyArgs key);
	protected virtual void on_mouse_down (Vec2 position);
	protected virtual void on_mouse_move (Vec2 position);
	protected virtual void on_mouse_over ();
	protected virtual void on_mouse_up (Vec2 position);
	protected virtual void on_text_edit (TextEditArgs text);
	protected virtual void on_text_input (TextInputArgs text);
	public CursorType cursor_type { get; set; }
	public bool enabled { get; set; }
	public bool focused { get; private set; }
	public bool hovering { get; private set; }
	public bool mouse_down { get; private set; }
	public bool selectable { get; set; }
	public signal void clicked (Control control, Vec2 position);
}
[CCode (cheader_filename = "libengine.h")]
public abstract class EndControl : Control {
	public EndControl ();
	public override void added ();
	public override void do_render (RenderState state, RenderScene2D scene);
	protected abstract RenderObject2D get_obj ();
	protected virtual void on_added ();
	public override void resized ();
	public abstract Size2 end_size { get; }
}
[CCode (cheader_filename = "libengine.h")]
public class MainView : Container {
	public MainView (RenderWindow? window);
	public void set_window (RenderWindow? window);
	public void start_process (DeltaArgs args);
	public void start_render (RenderState state);
}
[CCode (cheader_filename = "libengine.h")]
public class MouseEventArgs {
	public enum Button {
		LEFT,
		CENTER,
		RIGHT
	}
	public MouseEventArgs (MouseEventArgs.Button button, MouseReference? reference, bool down, Vec2i position, Size2i size);
	public MouseEventArgs.Button button { get; private set; }
	public bool down { get; private set; }
	public bool handled { get; set; }
	public Vec2i position { get; private set; }
	public MouseReference? reference { get; set; }
	public Size2i size { get; private set; }
}
[CCode (cheader_filename = "libengine.h")]
public class MouseMoveArgs {
	public MouseMoveArgs (Vec2i position, Vec2i delta, Size2i size);
	public CursorType cursor_type { get; set; }
	public Vec2i delta { get; private set; }
	public bool handled { get; set; }
	public Vec2i position { get; private set; }
	public Size2i size { get; private set; }
}
[CCode (cheader_filename = "libengine.h")]
public class MouseReference {
	public MouseReference ();
}
[CCode (cheader_filename = "libengine.h")]
public class KeyArgs {
	public KeyArgs (ScanCode scancode, KeyCode keycode, Modifier modifiers, bool repeat, bool down);
	public bool down { get; private set; }
	public bool handled { get; set; }
	public char key { get; private set; }
	public KeyCode keycode { get; private set; }
	public Modifier modifiers { get; private set; }
	public bool repeat { get; private set; }
	public ScanCode scancode { get; private set; }
}
[CCode (cheader_filename = "libengine.h")]
public class TextInputArgs {
	public TextInputArgs (string text);
	public bool handled { get; set; }
	public string text { get; private set; }
}
[CCode (cheader_filename = "libengine.h")]
public class TextEditArgs {
	public TextEditArgs (string text, int start, int length);
	public bool handled { get; set; }
	public int length { get; private set; }
	public int start { get; private set; }
	public string text { get; private set; }
}
[CCode (cheader_filename = "libengine.h")]
public class DeltaArgs {
	public DeltaArgs (float time, float delta);
	public float delta { get; private set; }
	public float time { get; private set; }
}
[CCode (cheader_filename = "libengine.h")]
public abstract class RenderWindow {
	public RenderWindow (IWindowTarget window, RenderTarget renderer);
	protected virtual void do_process (DeltaArgs delta);
	public void finish ();
	public string get_clipboard_text ();
	protected virtual bool key_press (KeyArgs key);
	public void set_clipboard_text (string text);
	public void set_cursor_hidden (bool hidden);
	public void set_cursor_type (CursorType type);
	public void set_icon (string icon);
	public void show ();
	protected virtual void shown ();
	public void start_text_input ();
	public void stop_text_input ();
	public Color back_color { get; set; }
	public Vec2i cursor_position { get; set; }
	public bool fullscreen { get; set; }
	public MainView main_view { get; private set; }
	public RenderTarget renderer { get; private set; }
	public Size2i size { get; }
	public ResourceStore store { get; private set; }
}
[CCode (cheader_filename = "libengine.h")]
public class SDLWindowTarget : GLib.Object, IWindowTarget {
	public SDLWindowTarget (void* window, bool is_fullscreen);
	public void set_cursor_relative_mode (bool relative);
	public CursorType current_cursor { get; private set; }
}
[CCode (cheader_filename = "libengine.h")]
public class View2D : Container {
	public View2D ();
}
[CCode (cheader_filename = "libengine.h")]
public class ResetContainer : Container {
	public ResetContainer ();
	public override void render (RenderState state, RenderScene2D scene);
}
[CCode (cheader_filename = "libengine.h")]
public abstract class View3D : Container {
	public View3D ();
	protected override void do_process (DeltaArgs args);
	protected override void do_render (RenderState state, RenderScene2D scene_2d);
	public virtual void process_3d (DeltaArgs args);
	protected World world { get; private set; }
	protected float world_scale_width { get; protected set; }
}
[CCode (cheader_filename = "libengine.h")]
public class LabelControl : EndControl {
	public LabelControl ();
	protected override RenderObject2D get_obj ();
	public override void on_added ();
	public float alpha { get; set; }
	public Color color { get; set; }
	public override Size2 end_size { get; }
	public float font_size { get; set; }
	public string font_type { get; set; }
	public string text { get; set; }
}
[CCode (cheader_filename = "libengine.h")]
public class LineControl : Control {
	public LineControl ();
	public override void added ();
	protected virtual void set_line_end_pos (Vec2 position);
	public Color color { get; set; }
	public Vec2 distance { get; set; }
	public float width { get; set; }
}
[CCode (cheader_filename = "libengine.h")]
public abstract class ListControl : Control {
	public ListControl (bool row_selectable);
	protected override void added ();
	protected abstract string get_cell_data (int row, int column);
	protected abstract ListColumnInfo get_column_info (int column);
	protected virtual void on_added ();
	protected override void on_click (Vec2 pos);
	protected void refresh_data ();
	protected override void resized ();
	protected abstract int column_count { get; }
	public float font_size { get; set; }
	protected abstract int row_count { get; }
	public float row_height { get; set; }
	public int selected_index { get; private set; }
	public signal void selected_index_changed (ListControl list);
}
[CCode (cheader_filename = "libengine.h")]
public class ListColumnInfo {
	public ListColumnInfo (string name, ListCellStyle style);
	public string name { get; private set; }
	public ListCellStyle style { get; private set; }
}
[CCode (cheader_filename = "libengine.h")]
public class ListCellStyle {
	public ListCellStyle (ResizeStyle resize_style, float width);
	public ResizeStyle resize_style { get; private set; }
	public float width { get; private set; }
}
[CCode (cheader_filename = "libengine.h")]
public class RectangleControl : EndControl {
	public RectangleControl ();
	protected override RenderObject2D get_obj ();
	public Color color { get; set; }
	public override Size2 end_size { get; }
	public float rotation { get; set; }
}
[CCode (cheader_filename = "libengine.h")]
public class ScrollBarControl : Control {
	public ScrollBarControl (bool vertical);
	protected override void added ();
	protected override void resized ();
	public int current_value { get; set; }
	public float fval { get; }
	public int maximum { get; set; }
	public int minimum { get; set; }
	public int range { get; }
	public int scroll_amount { get; set; }
	public signal void value_changed (ScrollBarControl scroll_bar);
}
[CCode (cheader_filename = "libengine.h")]
public class SizingControl : Container {
	public SizingControl ();
	public void add_control (Container container);
	public void remove_control (Container container);
	protected override void resized ();
	public Size2 default_size { get; set; }
	public Orientation orientation { get; set; }
	public float padding { get; set; }
	public SizingStyle sizing_style { get; set; }
}
[CCode (cheader_filename = "libengine.h")]
public class TextInputControl : Control {
	public TextInputControl (string back_text, int max_length);
	protected override void added ();
	public override void do_process (DeltaArgs delta);
	protected override void on_focus_lost ();
	protected override void on_key_press (KeyArgs key);
	protected override void on_mouse_down (Vec2 position);
	protected override void on_mouse_move (Vec2 position);
	protected override void on_mouse_up (Vec2 position);
	protected override void on_text_edit (TextEditArgs t);
	protected override void on_text_input (TextInputArgs t);
	public string text { get; set; }
	public signal void text_changed ();
}
[CCode (cheader_filename = "libengine.h")]
public interface IModelResourceHandle : GLib.Object {
}
[CCode (cheader_filename = "libengine.h")]
public interface ITextureResourceHandle : GLib.Object {
}
[CCode (cheader_filename = "libengine.h")]
public interface ILabelResourceHandle : GLib.Object {
}
[CCode (cheader_filename = "libengine.h")]
public interface IWindowTarget : GLib.Object {
	public abstract string get_clipboard_text ();
	public abstract void pump_events ();
	public abstract void set_clipboard_text (string text);
	public abstract void set_cursor_hidden (bool hidden);
	public abstract void set_cursor_position (int x, int y);
	public abstract void set_cursor_type (CursorType type);
	public abstract void set_icon (string icon);
	public abstract void start_text_input ();
	public abstract void stop_text_input ();
	public abstract void swap ();
	public abstract bool fullscreen { get; set; }
	public abstract Size2i size { get; set; }
}
[CCode (cheader_filename = "libengine.h")]
public struct ModelVertex {
	public float x;
	public float y;
	public float z;
	public float w;
}
[CCode (cheader_filename = "libengine.h")]
public struct ModelUV {
	public float u;
	public float v;
	public float w;
}
[CCode (cheader_filename = "libengine.h")]
public struct ModelNormal {
	public float i;
	public float j;
	public float k;
}
[CCode (cheader_filename = "libengine.h")]
public struct ModelPoint {
	public ModelVertex vertex;
	public ModelUV uv;
	public ModelNormal normal;
}
[CCode (cheader_filename = "libengine.h")]
public struct ModelTriangle {
	public ModelVertex vertex_a;
	public ModelVertex vertex_b;
	public ModelVertex vertex_c;
	public ModelUV uv_a;
	public ModelUV uv_b;
	public ModelUV uv_c;
	public ModelNormal normal_a;
	public ModelNormal normal_b;
	public ModelNormal normal_c;
	public bool has_uv;
	public bool has_normal;
}
[CCode (cheader_filename = "libengine.h")]
public struct Color {
	public float r;
	public float g;
	public float b;
	public float a;
	public Color (float r, float g, float b, float a);
	public Color.black ();
	public Color.blue ();
	public Color.green ();
	public Color.none ();
	public Color.red ();
	public Color.white ();
	public Color.with_alpha (float a);
}
[CCode (cheader_filename = "libengine.h")]
public struct Size2 {
	public float width;
	public float height;
	public Size2 (float width, float height);
	public Size2i to_size2i ();
}
[CCode (cheader_filename = "libengine.h")]
public struct Size2i {
	public int width;
	public int height;
	public Size2i (int width, int height);
	public Size2 to_size2 ();
}
[CCode (cheader_filename = "libengine.h")]
public struct Vec2 {
	public float x;
	public float y;
	public Vec2 (float x, float y);
	public Vec2.empty ();
	public Vec2 minus (Vec2 other);
	public Vec2 mul_scalar (float scalar);
	public Vec2 plus (Vec2 other);
}
[CCode (cheader_filename = "libengine.h")]
public struct Vec2i {
	public int x;
	public int y;
	public Vec2i (int x, int y);
	public Vec2i.empty ();
	public Vec2i mul_scalar (int scalar);
	public Vec2i plus (Vec2i other);
}
[CCode (cheader_filename = "libengine.h")]
public struct Vec3 {
	public float x;
	public float y;
	public float z;
	public Vec3 (float x, float y, float z);
	public float dist (Vec3 other);
	public float dist_sq (Vec3 other);
	public Vec3 div_scalar (float scalar);
	public float dot (Vec3 other);
	public Vec3.empty ();
	public float length ();
	public static Vec3 lerp (Vec3 start, Vec3 end, float lerp);
	public Vec3 minus (Vec3 other);
	public Vec3 mul_scalar (float scalar);
	public Vec3 negate ();
	public Vec3 normalize ();
	public Vec3 plus (Vec3 other);
}
[CCode (cheader_filename = "libengine.h")]
public struct Vec4 {
	public float x;
	public float y;
	public float z;
	public float w;
	public Vec4 (float x, float y, float z, float w);
	public float dot (Vec4 other);
	public Vec4.empty ();
	public float @get (int i);
	public Vec4 minus (Vec4 other);
}
