/* libengine.h generated by valac 0.36.1-dirty, the Vala compiler, do not modify */


#ifndef __BIN_LIBENGINE_H__
#define __BIN_LIBENGINE_H__

#include <glib.h>
#include <glib-object.h>
#include <stdlib.h>
#include <string.h>
#include <gio/gio.h>
#include <gee.h>
#include <float.h>
#include <math.h>

G_BEGIN_DECLS


#define ENGINE_TYPE_ENGINE (engine_engine_get_type ())
#define ENGINE_ENGINE(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), ENGINE_TYPE_ENGINE, EngineEngine))
#define ENGINE_ENGINE_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), ENGINE_TYPE_ENGINE, EngineEngineClass))
#define ENGINE_IS_ENGINE(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), ENGINE_TYPE_ENGINE))
#define ENGINE_IS_ENGINE_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), ENGINE_TYPE_ENGINE))
#define ENGINE_ENGINE_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), ENGINE_TYPE_ENGINE, EngineEngineClass))

typedef struct _EngineEngine EngineEngine;
typedef struct _EngineEngineClass EngineEngineClass;
typedef struct _EngineEnginePrivate EngineEnginePrivate;

#define TYPE_IWINDOW_TARGET (iwindow_target_get_type ())
#define IWINDOW_TARGET(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), TYPE_IWINDOW_TARGET, IWindowTarget))
#define IS_IWINDOW_TARGET(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), TYPE_IWINDOW_TARGET))
#define IWINDOW_TARGET_GET_INTERFACE(obj) (G_TYPE_INSTANCE_GET_INTERFACE ((obj), TYPE_IWINDOW_TARGET, IWindowTargetIface))

typedef struct _IWindowTarget IWindowTarget;
typedef struct _IWindowTargetIface IWindowTargetIface;

#define TYPE_CURSOR_TYPE (cursor_type_get_type ())

#define TYPE_SIZE2I (size2i_get_type ())
typedef struct _Size2i Size2i;

#define TYPE_RENDER_TARGET (render_target_get_type ())
#define RENDER_TARGET(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), TYPE_RENDER_TARGET, RenderTarget))
#define RENDER_TARGET_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), TYPE_RENDER_TARGET, RenderTargetClass))
#define IS_RENDER_TARGET(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), TYPE_RENDER_TARGET))
#define IS_RENDER_TARGET_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), TYPE_RENDER_TARGET))
#define RENDER_TARGET_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), TYPE_RENDER_TARGET, RenderTargetClass))

typedef struct _RenderTarget RenderTarget;
typedef struct _RenderTargetClass RenderTargetClass;

#define ENGINE_TYPE_SDLGL_ENGINE (engine_sdlgl_engine_get_type ())
#define ENGINE_SDLGL_ENGINE(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), ENGINE_TYPE_SDLGL_ENGINE, EngineSDLGLEngine))
#define ENGINE_SDLGL_ENGINE_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), ENGINE_TYPE_SDLGL_ENGINE, EngineSDLGLEngineClass))
#define ENGINE_IS_SDLGL_ENGINE(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), ENGINE_TYPE_SDLGL_ENGINE))
#define ENGINE_IS_SDLGL_ENGINE_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), ENGINE_TYPE_SDLGL_ENGINE))
#define ENGINE_SDLGL_ENGINE_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), ENGINE_TYPE_SDLGL_ENGINE, EngineSDLGLEngineClass))

typedef struct _EngineSDLGLEngine EngineSDLGLEngine;
typedef struct _EngineSDLGLEngineClass EngineSDLGLEngineClass;
typedef struct _EngineSDLGLEnginePrivate EngineSDLGLEnginePrivate;

#define TYPE_ENGINE_LOG (engine_log_get_type ())
#define ENGINE_LOG(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), TYPE_ENGINE_LOG, EngineLog))
#define ENGINE_LOG_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), TYPE_ENGINE_LOG, EngineLogClass))
#define IS_ENGINE_LOG(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), TYPE_ENGINE_LOG))
#define IS_ENGINE_LOG_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), TYPE_ENGINE_LOG))
#define ENGINE_LOG_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), TYPE_ENGINE_LOG, EngineLogClass))

typedef struct _EngineLog EngineLog;
typedef struct _EngineLogClass EngineLogClass;
typedef struct _EngineLogPrivate EngineLogPrivate;

#define TYPE_LOG_CALLBACK (log_callback_get_type ())
#define LOG_CALLBACK(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), TYPE_LOG_CALLBACK, LogCallback))
#define LOG_CALLBACK_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), TYPE_LOG_CALLBACK, LogCallbackClass))
#define IS_LOG_CALLBACK(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), TYPE_LOG_CALLBACK))
#define IS_LOG_CALLBACK_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), TYPE_LOG_CALLBACK))
#define LOG_CALLBACK_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), TYPE_LOG_CALLBACK, LogCallbackClass))

typedef struct _LogCallback LogCallback;
typedef struct _LogCallbackClass LogCallbackClass;

#define TYPE_ENGINE_LOG_TYPE (engine_log_type_get_type ())
typedef struct _LogCallbackPrivate LogCallbackPrivate;

#define TYPE_AUDIO_PLAYER (audio_player_get_type ())
#define AUDIO_PLAYER(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), TYPE_AUDIO_PLAYER, AudioPlayer))
#define AUDIO_PLAYER_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), TYPE_AUDIO_PLAYER, AudioPlayerClass))
#define IS_AUDIO_PLAYER(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), TYPE_AUDIO_PLAYER))
#define IS_AUDIO_PLAYER_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), TYPE_AUDIO_PLAYER))
#define AUDIO_PLAYER_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), TYPE_AUDIO_PLAYER, AudioPlayerClass))

typedef struct _AudioPlayer AudioPlayer;
typedef struct _AudioPlayerClass AudioPlayerClass;
typedef struct _AudioPlayerPrivate AudioPlayerPrivate;

#define TYPE_SOUND (sound_get_type ())
#define SOUND(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), TYPE_SOUND, Sound))
#define SOUND_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), TYPE_SOUND, SoundClass))
#define IS_SOUND(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), TYPE_SOUND))
#define IS_SOUND_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), TYPE_SOUND))
#define SOUND_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), TYPE_SOUND, SoundClass))

typedef struct _Sound Sound;
typedef struct _SoundClass SoundClass;

#define TYPE_MUSIC (music_get_type ())
#define MUSIC(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), TYPE_MUSIC, Music))
#define MUSIC_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), TYPE_MUSIC, MusicClass))
#define IS_MUSIC(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), TYPE_MUSIC))
#define IS_MUSIC_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), TYPE_MUSIC))
#define MUSIC_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), TYPE_MUSIC, MusicClass))

typedef struct _Music Music;
typedef struct _MusicClass MusicClass;
typedef struct _SoundPrivate SoundPrivate;
typedef struct _MusicPrivate MusicPrivate;

#define TYPE_FILE_LOADER (file_loader_get_type ())
#define FILE_LOADER(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), TYPE_FILE_LOADER, FileLoader))
#define FILE_LOADER_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), TYPE_FILE_LOADER, FileLoaderClass))
#define IS_FILE_LOADER(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), TYPE_FILE_LOADER))
#define IS_FILE_LOADER_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), TYPE_FILE_LOADER))
#define FILE_LOADER_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), TYPE_FILE_LOADER, FileLoaderClass))

typedef struct _FileLoader FileLoader;
typedef struct _FileLoaderClass FileLoaderClass;
typedef struct _FileLoaderPrivate FileLoaderPrivate;

#define TYPE_FILE_WRITER (file_writer_get_type ())
#define FILE_WRITER(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), TYPE_FILE_WRITER, FileWriter))
#define FILE_WRITER_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), TYPE_FILE_WRITER, FileWriterClass))
#define IS_FILE_WRITER(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), TYPE_FILE_WRITER))
#define IS_FILE_WRITER_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), TYPE_FILE_WRITER))
#define FILE_WRITER_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), TYPE_FILE_WRITER, FileWriterClass))

typedef struct _FileWriter FileWriter;
typedef struct _FileWriterClass FileWriterClass;
typedef struct _FileWriterPrivate FileWriterPrivate;

#define TYPE_OBJ_PARSER (obj_parser_get_type ())
#define OBJ_PARSER(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), TYPE_OBJ_PARSER, ObjParser))
#define OBJ_PARSER_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), TYPE_OBJ_PARSER, ObjParserClass))
#define IS_OBJ_PARSER(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), TYPE_OBJ_PARSER))
#define IS_OBJ_PARSER_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), TYPE_OBJ_PARSER))
#define OBJ_PARSER_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), TYPE_OBJ_PARSER, ObjParserClass))

typedef struct _ObjParser ObjParser;
typedef struct _ObjParserClass ObjParserClass;
typedef struct _ObjParserPrivate ObjParserPrivate;

#define TYPE_GEOMETRY_DATA (geometry_data_get_type ())
#define GEOMETRY_DATA(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), TYPE_GEOMETRY_DATA, GeometryData))
#define GEOMETRY_DATA_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), TYPE_GEOMETRY_DATA, GeometryDataClass))
#define IS_GEOMETRY_DATA(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), TYPE_GEOMETRY_DATA))
#define IS_GEOMETRY_DATA_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), TYPE_GEOMETRY_DATA))
#define GEOMETRY_DATA_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), TYPE_GEOMETRY_DATA, GeometryDataClass))

typedef struct _GeometryData GeometryData;
typedef struct _GeometryDataClass GeometryDataClass;

#define TYPE_MODEL_DATA (model_data_get_type ())
#define MODEL_DATA(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), TYPE_MODEL_DATA, ModelData))
#define MODEL_DATA_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), TYPE_MODEL_DATA, ModelDataClass))
#define IS_MODEL_DATA(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), TYPE_MODEL_DATA))
#define IS_MODEL_DATA_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), TYPE_MODEL_DATA))
#define MODEL_DATA_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), TYPE_MODEL_DATA, ModelDataClass))

typedef struct _ModelData ModelData;
typedef struct _ModelDataClass ModelDataClass;

#define TYPE_MODEL_VERTEX (model_vertex_get_type ())
typedef struct _ModelVertex ModelVertex;

#define TYPE_MODEL_UV (model_uv_get_type ())
typedef struct _ModelUV ModelUV;

#define TYPE_MODEL_NORMAL (model_normal_get_type ())
typedef struct _ModelNormal ModelNormal;
typedef struct _GeometryDataPrivate GeometryDataPrivate;

#define TYPE_MATERIAL_DATA (material_data_get_type ())
#define MATERIAL_DATA(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), TYPE_MATERIAL_DATA, MaterialData))
#define MATERIAL_DATA_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), TYPE_MATERIAL_DATA, MaterialDataClass))
#define IS_MATERIAL_DATA(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), TYPE_MATERIAL_DATA))
#define IS_MATERIAL_DATA_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), TYPE_MATERIAL_DATA))
#define MATERIAL_DATA_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), TYPE_MATERIAL_DATA, MaterialDataClass))

typedef struct _MaterialData MaterialData;
typedef struct _MaterialDataClass MaterialDataClass;
typedef struct _ModelDataPrivate ModelDataPrivate;

#define TYPE_MODEL_TRIANGLE (model_triangle_get_type ())
typedef struct _ModelTriangle ModelTriangle;

#define TYPE_MODEL_POINT (model_point_get_type ())
typedef struct _ModelPoint ModelPoint;

#define TYPE_VEC3 (vec3_get_type ())
typedef struct _Vec3 Vec3;
typedef struct _MaterialDataPrivate MaterialDataPrivate;

#define TYPE_ILLUMINATION_MODEL (illumination_model_get_type ())

#define TYPE_CALCULATIONS (calculations_get_type ())
#define CALCULATIONS(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), TYPE_CALCULATIONS, Calculations))
#define CALCULATIONS_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), TYPE_CALCULATIONS, CalculationsClass))
#define IS_CALCULATIONS(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), TYPE_CALCULATIONS))
#define IS_CALCULATIONS_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), TYPE_CALCULATIONS))
#define CALCULATIONS_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), TYPE_CALCULATIONS, CalculationsClass))

typedef struct _Calculations Calculations;
typedef struct _CalculationsClass CalculationsClass;
typedef struct _CalculationsPrivate CalculationsPrivate;

#define TYPE_MAT4 (mat4_get_type ())
#define MAT4(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), TYPE_MAT4, Mat4))
#define MAT4_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), TYPE_MAT4, Mat4Class))
#define IS_MAT4(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), TYPE_MAT4))
#define IS_MAT4_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), TYPE_MAT4))
#define MAT4_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), TYPE_MAT4, Mat4Class))

typedef struct _Mat4 Mat4;
typedef struct _Mat4Class Mat4Class;

#define TYPE_VEC2I (vec2i_get_type ())
typedef struct _Vec2i Vec2i;

#define TYPE_QUAT (quat_get_type ())
#define QUAT(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), TYPE_QUAT, Quat))
#define QUAT_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), TYPE_QUAT, QuatClass))
#define IS_QUAT(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), TYPE_QUAT))
#define IS_QUAT_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), TYPE_QUAT))
#define QUAT_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), TYPE_QUAT, QuatClass))

typedef struct _Quat Quat;
typedef struct _QuatClass QuatClass;

#define TYPE_MAT3 (mat3_get_type ())
#define MAT3(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), TYPE_MAT3, Mat3))
#define MAT3_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), TYPE_MAT3, Mat3Class))
#define IS_MAT3(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), TYPE_MAT3))
#define IS_MAT3_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), TYPE_MAT3))
#define MAT3_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), TYPE_MAT3, Mat3Class))

typedef struct _Mat3 Mat3;
typedef struct _Mat3Class Mat3Class;

#define TYPE_VEC2 (vec2_get_type ())
typedef struct _Vec2 Vec2;

#define TYPE_SIZE2 (size2_get_type ())
typedef struct _Size2 Size2;

#define TYPE_DELTA_TIMER (delta_timer_get_type ())
#define DELTA_TIMER(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), TYPE_DELTA_TIMER, DeltaTimer))
#define DELTA_TIMER_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), TYPE_DELTA_TIMER, DeltaTimerClass))
#define IS_DELTA_TIMER(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), TYPE_DELTA_TIMER))
#define IS_DELTA_TIMER_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), TYPE_DELTA_TIMER))
#define DELTA_TIMER_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), TYPE_DELTA_TIMER, DeltaTimerClass))

typedef struct _DeltaTimer DeltaTimer;
typedef struct _DeltaTimerClass DeltaTimerClass;
typedef struct _DeltaTimerPrivate DeltaTimerPrivate;

#define TYPE_DELTA_ARGS (delta_args_get_type ())
#define DELTA_ARGS(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), TYPE_DELTA_ARGS, DeltaArgs))
#define DELTA_ARGS_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), TYPE_DELTA_ARGS, DeltaArgsClass))
#define IS_DELTA_ARGS(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), TYPE_DELTA_ARGS))
#define IS_DELTA_ARGS_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), TYPE_DELTA_ARGS))
#define DELTA_ARGS_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), TYPE_DELTA_ARGS, DeltaArgsClass))

typedef struct _DeltaArgs DeltaArgs;
typedef struct _DeltaArgsClass DeltaArgsClass;

#define TYPE_EVENT_TIMER (event_timer_get_type ())
#define EVENT_TIMER(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), TYPE_EVENT_TIMER, EventTimer))
#define EVENT_TIMER_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), TYPE_EVENT_TIMER, EventTimerClass))
#define IS_EVENT_TIMER(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), TYPE_EVENT_TIMER))
#define IS_EVENT_TIMER_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), TYPE_EVENT_TIMER))
#define EVENT_TIMER_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), TYPE_EVENT_TIMER, EventTimerClass))

typedef struct _EventTimer EventTimer;
typedef struct _EventTimerClass EventTimerClass;
typedef struct _EventTimerPrivate EventTimerPrivate;

#define TYPE_HELPER (helper_get_type ())
#define HELPER(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), TYPE_HELPER, Helper))
#define HELPER_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), TYPE_HELPER, HelperClass))
#define IS_HELPER(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), TYPE_HELPER))
#define IS_HELPER_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), TYPE_HELPER))
#define HELPER_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), TYPE_HELPER, HelperClass))

typedef struct _Helper Helper;
typedef struct _HelperClass HelperClass;
typedef struct _HelperPrivate HelperPrivate;

#define TYPE_IMAGE_LOADER (image_loader_get_type ())
#define IMAGE_LOADER(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), TYPE_IMAGE_LOADER, ImageLoader))
#define IMAGE_LOADER_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), TYPE_IMAGE_LOADER, ImageLoaderClass))
#define IS_IMAGE_LOADER(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), TYPE_IMAGE_LOADER))
#define IS_IMAGE_LOADER_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), TYPE_IMAGE_LOADER))
#define IMAGE_LOADER_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), TYPE_IMAGE_LOADER, ImageLoaderClass))

typedef struct _ImageLoader ImageLoader;
typedef struct _ImageLoaderClass ImageLoaderClass;
typedef struct _ImageLoaderPrivate ImageLoaderPrivate;

#define TYPE_IMAGE_DATA (image_data_get_type ())
#define IMAGE_DATA(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), TYPE_IMAGE_DATA, ImageData))
#define IMAGE_DATA_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), TYPE_IMAGE_DATA, ImageDataClass))
#define IS_IMAGE_DATA(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), TYPE_IMAGE_DATA))
#define IS_IMAGE_DATA_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), TYPE_IMAGE_DATA))
#define IMAGE_DATA_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), TYPE_IMAGE_DATA, ImageDataClass))

typedef struct _ImageData ImageData;
typedef struct _ImageDataClass ImageDataClass;
typedef struct _ImageDataPrivate ImageDataPrivate;

#define TYPE_IMAGE_LOAD_WRAP (image_load_wrap_get_type ())
#define IMAGE_LOAD_WRAP(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), TYPE_IMAGE_LOAD_WRAP, ImageLoadWrap))
#define IMAGE_LOAD_WRAP_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), TYPE_IMAGE_LOAD_WRAP, ImageLoadWrapClass))
#define IS_IMAGE_LOAD_WRAP(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), TYPE_IMAGE_LOAD_WRAP))
#define IS_IMAGE_LOAD_WRAP_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), TYPE_IMAGE_LOAD_WRAP))
#define IMAGE_LOAD_WRAP_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), TYPE_IMAGE_LOAD_WRAP, ImageLoadWrapClass))

typedef struct _ImageLoadWrap ImageLoadWrap;
typedef struct _ImageLoadWrapClass ImageLoadWrapClass;
typedef struct _ImageLoadWrapPrivate ImageLoadWrapPrivate;

#define TYPE_SCAN_CODE (scan_code_get_type ())

#define TYPE_MODIFIER (modifier_get_type ())

#define TYPE_KEY_CODE (key_code_get_type ())

#define TYPE_LABEL_LOADER (label_loader_get_type ())
#define LABEL_LOADER(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), TYPE_LABEL_LOADER, LabelLoader))
#define LABEL_LOADER_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), TYPE_LABEL_LOADER, LabelLoaderClass))
#define IS_LABEL_LOADER(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), TYPE_LABEL_LOADER))
#define IS_LABEL_LOADER_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), TYPE_LABEL_LOADER))
#define LABEL_LOADER_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), TYPE_LABEL_LOADER, LabelLoaderClass))

typedef struct _LabelLoader LabelLoader;
typedef struct _LabelLoaderClass LabelLoaderClass;
typedef struct _LabelLoaderPrivate LabelLoaderPrivate;

#define TYPE_LABEL_INFO (label_info_get_type ())
#define LABEL_INFO(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), TYPE_LABEL_INFO, LabelInfo))
#define LABEL_INFO_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), TYPE_LABEL_INFO, LabelInfoClass))
#define IS_LABEL_INFO(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), TYPE_LABEL_INFO))
#define IS_LABEL_INFO_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), TYPE_LABEL_INFO))
#define LABEL_INFO_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), TYPE_LABEL_INFO, LabelInfoClass))

typedef struct _LabelInfo LabelInfo;
typedef struct _LabelInfoClass LabelInfoClass;

#define TYPE_LABEL_BITMAP (label_bitmap_get_type ())
#define LABEL_BITMAP(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), TYPE_LABEL_BITMAP, LabelBitmap))
#define LABEL_BITMAP_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), TYPE_LABEL_BITMAP, LabelBitmapClass))
#define IS_LABEL_BITMAP(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), TYPE_LABEL_BITMAP))
#define IS_LABEL_BITMAP_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), TYPE_LABEL_BITMAP))
#define LABEL_BITMAP_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), TYPE_LABEL_BITMAP, LabelBitmapClass))

typedef struct _LabelBitmap LabelBitmap;
typedef struct _LabelBitmapClass LabelBitmapClass;
typedef struct _LabelInfoPrivate LabelInfoPrivate;
typedef struct _LabelBitmapPrivate LabelBitmapPrivate;

#define TYPE_NETWORKING (networking_get_type ())
#define NETWORKING(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), TYPE_NETWORKING, Networking))
#define NETWORKING_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), TYPE_NETWORKING, NetworkingClass))
#define IS_NETWORKING(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), TYPE_NETWORKING))
#define IS_NETWORKING_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), TYPE_NETWORKING))
#define NETWORKING_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), TYPE_NETWORKING, NetworkingClass))

typedef struct _Networking Networking;
typedef struct _NetworkingClass NetworkingClass;
typedef struct _NetworkingPrivate NetworkingPrivate;

#define TYPE_CONNECTION (connection_get_type ())
#define CONNECTION(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), TYPE_CONNECTION, Connection))
#define CONNECTION_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), TYPE_CONNECTION, ConnectionClass))
#define IS_CONNECTION(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), TYPE_CONNECTION))
#define IS_CONNECTION_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), TYPE_CONNECTION))
#define CONNECTION_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), TYPE_CONNECTION, ConnectionClass))

typedef struct _Connection Connection;
typedef struct _ConnectionClass ConnectionClass;

#define TYPE_MESSAGE_SIGNAL (message_signal_get_type ())
#define MESSAGE_SIGNAL(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), TYPE_MESSAGE_SIGNAL, MessageSignal))
#define MESSAGE_SIGNAL_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), TYPE_MESSAGE_SIGNAL, MessageSignalClass))
#define IS_MESSAGE_SIGNAL(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), TYPE_MESSAGE_SIGNAL))
#define IS_MESSAGE_SIGNAL_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), TYPE_MESSAGE_SIGNAL))
#define MESSAGE_SIGNAL_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), TYPE_MESSAGE_SIGNAL, MessageSignalClass))

typedef struct _MessageSignal MessageSignal;
typedef struct _MessageSignalClass MessageSignalClass;
typedef struct _MessageSignalPrivate MessageSignalPrivate;
typedef struct _ConnectionPrivate ConnectionPrivate;

#define TYPE_MESSAGE (message_get_type ())
#define MESSAGE(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), TYPE_MESSAGE, Message))
#define MESSAGE_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), TYPE_MESSAGE, MessageClass))
#define IS_MESSAGE(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), TYPE_MESSAGE))
#define IS_MESSAGE_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), TYPE_MESSAGE))
#define MESSAGE_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), TYPE_MESSAGE, MessageClass))

typedef struct _Message Message;
typedef struct _MessageClass MessageClass;
typedef struct _MessagePrivate MessagePrivate;

#define TYPE_DATA_UINT (data_uint_get_type ())
#define DATA_UINT(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), TYPE_DATA_UINT, DataUInt))
#define DATA_UINT_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), TYPE_DATA_UINT, DataUIntClass))
#define IS_DATA_UINT(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), TYPE_DATA_UINT))
#define IS_DATA_UINT_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), TYPE_DATA_UINT))
#define DATA_UINT_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), TYPE_DATA_UINT, DataUIntClass))

typedef struct _DataUInt DataUInt;
typedef struct _DataUIntClass DataUIntClass;
typedef struct _DataUIntPrivate DataUIntPrivate;

#define TYPE_SERIALIZABLE (serializable_get_type ())
#define SERIALIZABLE(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), TYPE_SERIALIZABLE, Serializable))
#define SERIALIZABLE_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), TYPE_SERIALIZABLE, SerializableClass))
#define IS_SERIALIZABLE(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), TYPE_SERIALIZABLE))
#define IS_SERIALIZABLE_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), TYPE_SERIALIZABLE))
#define SERIALIZABLE_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), TYPE_SERIALIZABLE, SerializableClass))

typedef struct _Serializable Serializable;
typedef struct _SerializableClass SerializableClass;
typedef struct _SerializablePrivate SerializablePrivate;

#define SERIALIZABLE_TYPE_SERIALIZATION_CONTEXT (serializable_serialization_context_get_type ())
#define SERIALIZABLE_SERIALIZATION_CONTEXT(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), SERIALIZABLE_TYPE_SERIALIZATION_CONTEXT, SerializableSerializationContext))
#define SERIALIZABLE_SERIALIZATION_CONTEXT_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), SERIALIZABLE_TYPE_SERIALIZATION_CONTEXT, SerializableSerializationContextClass))
#define SERIALIZABLE_IS_SERIALIZATION_CONTEXT(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), SERIALIZABLE_TYPE_SERIALIZATION_CONTEXT))
#define SERIALIZABLE_IS_SERIALIZATION_CONTEXT_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), SERIALIZABLE_TYPE_SERIALIZATION_CONTEXT))
#define SERIALIZABLE_SERIALIZATION_CONTEXT_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), SERIALIZABLE_TYPE_SERIALIZATION_CONTEXT, SerializableSerializationContextClass))

typedef struct _SerializableSerializationContext SerializableSerializationContext;
typedef struct _SerializableSerializationContextClass SerializableSerializationContextClass;
typedef struct _SerializableSerializationContextPrivate SerializableSerializationContextPrivate;

#define TYPE_SERIALIZABLE_LIST (serializable_list_get_type ())
#define SERIALIZABLE_LIST(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), TYPE_SERIALIZABLE_LIST, SerializableList))
#define SERIALIZABLE_LIST_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), TYPE_SERIALIZABLE_LIST, SerializableListClass))
#define IS_SERIALIZABLE_LIST(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), TYPE_SERIALIZABLE_LIST))
#define IS_SERIALIZABLE_LIST_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), TYPE_SERIALIZABLE_LIST))
#define SERIALIZABLE_LIST_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), TYPE_SERIALIZABLE_LIST, SerializableListClass))

typedef struct _SerializableList SerializableList;
typedef struct _SerializableListClass SerializableListClass;
typedef struct _SerializableListPrivate SerializableListPrivate;

#define TYPE_OBJ_INT (obj_int_get_type ())
#define OBJ_INT(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), TYPE_OBJ_INT, ObjInt))
#define OBJ_INT_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), TYPE_OBJ_INT, ObjIntClass))
#define IS_OBJ_INT(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), TYPE_OBJ_INT))
#define IS_OBJ_INT_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), TYPE_OBJ_INT))
#define OBJ_INT_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), TYPE_OBJ_INT, ObjIntClass))

typedef struct _ObjInt ObjInt;
typedef struct _ObjIntClass ObjIntClass;
typedef struct _ObjIntPrivate ObjIntPrivate;

#define TYPE_RANDOM (random_get_type ())
#define RANDOM(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), TYPE_RANDOM, Random))
#define RANDOM_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), TYPE_RANDOM, RandomClass))
#define IS_RANDOM(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), TYPE_RANDOM))
#define IS_RANDOM_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), TYPE_RANDOM))
#define RANDOM_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), TYPE_RANDOM, RandomClass))

typedef struct _Random Random;
typedef struct _RandomClass RandomClass;
typedef struct _RandomPrivate RandomPrivate;

#define TYPE_THREADING (threading_get_type ())
#define THREADING(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), TYPE_THREADING, Threading))
#define THREADING_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), TYPE_THREADING, ThreadingClass))
#define IS_THREADING(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), TYPE_THREADING))
#define IS_THREADING_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), TYPE_THREADING))
#define THREADING_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), TYPE_THREADING, ThreadingClass))

typedef struct _Threading Threading;
typedef struct _ThreadingClass ThreadingClass;
typedef struct _ThreadingPrivate ThreadingPrivate;

#define TYPE_OBJ (obj_get_type ())
#define OBJ(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), TYPE_OBJ, Obj))
#define OBJ_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), TYPE_OBJ, ObjClass))
#define IS_OBJ(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), TYPE_OBJ))
#define IS_OBJ_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), TYPE_OBJ))
#define OBJ_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), TYPE_OBJ, ObjClass))

typedef struct _Obj Obj;
typedef struct _ObjClass ObjClass;
typedef struct _ObjPrivate ObjPrivate;

#define TYPE_STEP_TIMER (step_timer_get_type ())
#define STEP_TIMER(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), TYPE_STEP_TIMER, StepTimer))
#define STEP_TIMER_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), TYPE_STEP_TIMER, StepTimerClass))
#define IS_STEP_TIMER(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), TYPE_STEP_TIMER))
#define IS_STEP_TIMER_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), TYPE_STEP_TIMER))
#define STEP_TIMER_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), TYPE_STEP_TIMER, StepTimerClass))

typedef struct _StepTimer StepTimer;
typedef struct _StepTimerClass StepTimerClass;
typedef struct _StepTimerPrivate StepTimerPrivate;

#define TYPE_DELAY_TIMER (delay_timer_get_type ())
#define DELAY_TIMER(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), TYPE_DELAY_TIMER, DelayTimer))
#define DELAY_TIMER_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), TYPE_DELAY_TIMER, DelayTimerClass))
#define IS_DELAY_TIMER(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), TYPE_DELAY_TIMER))
#define IS_DELAY_TIMER_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), TYPE_DELAY_TIMER))
#define DELAY_TIMER_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), TYPE_DELAY_TIMER, DelayTimerClass))

typedef struct _DelayTimer DelayTimer;
typedef struct _DelayTimerClass DelayTimerClass;
typedef struct _DelayTimerPrivate DelayTimerPrivate;

#define TYPE_COLOR (color_get_type ())
typedef struct _Color Color;

#define TYPE_CURVE (curve_get_type ())
#define CURVE(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), TYPE_CURVE, Curve))
#define CURVE_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), TYPE_CURVE, CurveClass))
#define IS_CURVE(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), TYPE_CURVE))
#define IS_CURVE_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), TYPE_CURVE))
#define CURVE_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), TYPE_CURVE, CurveClass))

typedef struct _Curve Curve;
typedef struct _CurveClass CurveClass;
typedef struct _CurvePrivate CurvePrivate;

#define TYPE_LINEAR_CURVE (linear_curve_get_type ())
#define LINEAR_CURVE(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), TYPE_LINEAR_CURVE, LinearCurve))
#define LINEAR_CURVE_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), TYPE_LINEAR_CURVE, LinearCurveClass))
#define IS_LINEAR_CURVE(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), TYPE_LINEAR_CURVE))
#define IS_LINEAR_CURVE_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), TYPE_LINEAR_CURVE))
#define LINEAR_CURVE_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), TYPE_LINEAR_CURVE, LinearCurveClass))

typedef struct _LinearCurve LinearCurve;
typedef struct _LinearCurveClass LinearCurveClass;
typedef struct _LinearCurvePrivate LinearCurvePrivate;

#define TYPE_SCURVE (scurve_get_type ())
#define SCURVE(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), TYPE_SCURVE, SCurve))
#define SCURVE_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), TYPE_SCURVE, SCurveClass))
#define IS_SCURVE(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), TYPE_SCURVE))
#define IS_SCURVE_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), TYPE_SCURVE))
#define SCURVE_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), TYPE_SCURVE, SCurveClass))

typedef struct _SCurve SCurve;
typedef struct _SCurveClass SCurveClass;
typedef struct _SCurvePrivate SCurvePrivate;

#define TYPE_EXPONENT_CURVE (exponent_curve_get_type ())
#define EXPONENT_CURVE(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), TYPE_EXPONENT_CURVE, ExponentCurve))
#define EXPONENT_CURVE_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), TYPE_EXPONENT_CURVE, ExponentCurveClass))
#define IS_EXPONENT_CURVE(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), TYPE_EXPONENT_CURVE))
#define IS_EXPONENT_CURVE_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), TYPE_EXPONENT_CURVE))
#define EXPONENT_CURVE_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), TYPE_EXPONENT_CURVE, ExponentCurveClass))

typedef struct _ExponentCurve ExponentCurve;
typedef struct _ExponentCurveClass ExponentCurveClass;
typedef struct _ExponentCurvePrivate ExponentCurvePrivate;

#define TYPE_SMOOTH_APPROACH_CURVE (smooth_approach_curve_get_type ())
#define SMOOTH_APPROACH_CURVE(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), TYPE_SMOOTH_APPROACH_CURVE, SmoothApproachCurve))
#define SMOOTH_APPROACH_CURVE_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), TYPE_SMOOTH_APPROACH_CURVE, SmoothApproachCurveClass))
#define IS_SMOOTH_APPROACH_CURVE(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), TYPE_SMOOTH_APPROACH_CURVE))
#define IS_SMOOTH_APPROACH_CURVE_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), TYPE_SMOOTH_APPROACH_CURVE))
#define SMOOTH_APPROACH_CURVE_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), TYPE_SMOOTH_APPROACH_CURVE, SmoothApproachCurveClass))

typedef struct _SmoothApproachCurve SmoothApproachCurve;
typedef struct _SmoothApproachCurveClass SmoothApproachCurveClass;
typedef struct _SmoothApproachCurvePrivate SmoothApproachCurvePrivate;
typedef struct _Mat3Private Mat3Private;
typedef struct _Mat4Private Mat4Private;

#define TYPE_VEC4 (vec4_get_type ())
typedef struct _Vec4 Vec4;

#define TYPE_ORIENTATION (orientation_get_type ())

#define TYPE_PATH3_D (path3_d_get_type ())
#define PATH3_D(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), TYPE_PATH3_D, Path3D))
#define PATH3_D_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), TYPE_PATH3_D, Path3DClass))
#define IS_PATH3_D(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), TYPE_PATH3_D))
#define IS_PATH3_D_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), TYPE_PATH3_D))
#define PATH3_D_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), TYPE_PATH3_D, Path3DClass))

typedef struct _Path3D Path3D;
typedef struct _Path3DClass Path3DClass;
typedef struct _Path3DPrivate Path3DPrivate;

#define TYPE_LINEAR_PATH3_D (linear_path3_d_get_type ())
#define LINEAR_PATH3_D(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), TYPE_LINEAR_PATH3_D, LinearPath3D))
#define LINEAR_PATH3_D_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), TYPE_LINEAR_PATH3_D, LinearPath3DClass))
#define IS_LINEAR_PATH3_D(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), TYPE_LINEAR_PATH3_D))
#define IS_LINEAR_PATH3_D_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), TYPE_LINEAR_PATH3_D))
#define LINEAR_PATH3_D_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), TYPE_LINEAR_PATH3_D, LinearPath3DClass))

typedef struct _LinearPath3D LinearPath3D;
typedef struct _LinearPath3DClass LinearPath3DClass;
typedef struct _LinearPath3DPrivate LinearPath3DPrivate;

#define TYPE_LINEARIZED_PATH3_D (linearized_path3_d_get_type ())
#define LINEARIZED_PATH3_D(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), TYPE_LINEARIZED_PATH3_D, LinearizedPath3D))
#define LINEARIZED_PATH3_D_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), TYPE_LINEARIZED_PATH3_D, LinearizedPath3DClass))
#define IS_LINEARIZED_PATH3_D(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), TYPE_LINEARIZED_PATH3_D))
#define IS_LINEARIZED_PATH3_D_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), TYPE_LINEARIZED_PATH3_D))
#define LINEARIZED_PATH3_D_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), TYPE_LINEARIZED_PATH3_D, LinearizedPath3DClass))

typedef struct _LinearizedPath3D LinearizedPath3D;
typedef struct _LinearizedPath3DClass LinearizedPath3DClass;
typedef struct _LinearizedPath3DPrivate LinearizedPath3DPrivate;

#define TYPE_PATH_QUAT (path_quat_get_type ())
#define PATH_QUAT(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), TYPE_PATH_QUAT, PathQuat))
#define PATH_QUAT_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), TYPE_PATH_QUAT, PathQuatClass))
#define IS_PATH_QUAT(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), TYPE_PATH_QUAT))
#define IS_PATH_QUAT_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), TYPE_PATH_QUAT))
#define PATH_QUAT_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), TYPE_PATH_QUAT, PathQuatClass))

typedef struct _PathQuat PathQuat;
typedef struct _PathQuatClass PathQuatClass;
typedef struct _PathQuatPrivate PathQuatPrivate;

#define TYPE_LINEAR_PATH_QUAT (linear_path_quat_get_type ())
#define LINEAR_PATH_QUAT(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), TYPE_LINEAR_PATH_QUAT, LinearPathQuat))
#define LINEAR_PATH_QUAT_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), TYPE_LINEAR_PATH_QUAT, LinearPathQuatClass))
#define IS_LINEAR_PATH_QUAT(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), TYPE_LINEAR_PATH_QUAT))
#define IS_LINEAR_PATH_QUAT_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), TYPE_LINEAR_PATH_QUAT))
#define LINEAR_PATH_QUAT_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), TYPE_LINEAR_PATH_QUAT, LinearPathQuatClass))

typedef struct _LinearPathQuat LinearPathQuat;
typedef struct _LinearPathQuatClass LinearPathQuatClass;
typedef struct _LinearPathQuatPrivate LinearPathQuatPrivate;
typedef struct _QuatPrivate QuatPrivate;

#define ENGINE_TYPE_RECTANGLE (engine_rectangle_get_type ())
typedef struct _EngineRectangle EngineRectangle;

#define TYPE_TRANSFORM (transform_get_type ())
#define TRANSFORM(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), TYPE_TRANSFORM, Transform))
#define TRANSFORM_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), TYPE_TRANSFORM, TransformClass))
#define IS_TRANSFORM(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), TYPE_TRANSFORM))
#define IS_TRANSFORM_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), TYPE_TRANSFORM))
#define TRANSFORM_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), TYPE_TRANSFORM, TransformClass))

typedef struct _Transform Transform;
typedef struct _TransformClass TransformClass;
typedef struct _TransformPrivate TransformPrivate;

#define TYPE_CAMERA_TRANSFORM (camera_transform_get_type ())
#define CAMERA_TRANSFORM(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), TYPE_CAMERA_TRANSFORM, CameraTransform))
#define CAMERA_TRANSFORM_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), TYPE_CAMERA_TRANSFORM, CameraTransformClass))
#define IS_CAMERA_TRANSFORM(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), TYPE_CAMERA_TRANSFORM))
#define IS_CAMERA_TRANSFORM_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), TYPE_CAMERA_TRANSFORM))
#define CAMERA_TRANSFORM_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), TYPE_CAMERA_TRANSFORM, CameraTransformClass))

typedef struct _CameraTransform CameraTransform;
typedef struct _CameraTransformClass CameraTransformClass;
typedef struct _CameraTransformPrivate CameraTransformPrivate;

#define TYPE_BASIC_GEOMETRY (basic_geometry_get_type ())
#define BASIC_GEOMETRY(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), TYPE_BASIC_GEOMETRY, BasicGeometry))
#define BASIC_GEOMETRY_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), TYPE_BASIC_GEOMETRY, BasicGeometryClass))
#define IS_BASIC_GEOMETRY(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), TYPE_BASIC_GEOMETRY))
#define IS_BASIC_GEOMETRY_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), TYPE_BASIC_GEOMETRY))
#define BASIC_GEOMETRY_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), TYPE_BASIC_GEOMETRY, BasicGeometryClass))

typedef struct _BasicGeometry BasicGeometry;
typedef struct _BasicGeometryClass BasicGeometryClass;
typedef struct _BasicGeometryPrivate BasicGeometryPrivate;

#define TYPE_CAMERA (camera_get_type ())
#define CAMERA(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), TYPE_CAMERA, Camera))
#define CAMERA_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), TYPE_CAMERA, CameraClass))
#define IS_CAMERA(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), TYPE_CAMERA))
#define IS_CAMERA_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), TYPE_CAMERA))
#define CAMERA_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), TYPE_CAMERA, CameraClass))

typedef struct _Camera Camera;
typedef struct _CameraClass CameraClass;
typedef struct _CameraPrivate CameraPrivate;

#define TYPE_CONTAINER (container_get_type ())
#define CONTAINER(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), TYPE_CONTAINER, Container))
#define CONTAINER_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), TYPE_CONTAINER, ContainerClass))
#define IS_CONTAINER(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), TYPE_CONTAINER))
#define IS_CONTAINER_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), TYPE_CONTAINER))
#define CONTAINER_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), TYPE_CONTAINER, ContainerClass))

typedef struct _Container Container;
typedef struct _ContainerClass ContainerClass;
typedef struct _ContainerPrivate ContainerPrivate;

#define TYPE_RENDER_STATE (render_state_get_type ())
#define RENDER_STATE(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), TYPE_RENDER_STATE, RenderState))
#define RENDER_STATE_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), TYPE_RENDER_STATE, RenderStateClass))
#define IS_RENDER_STATE(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), TYPE_RENDER_STATE))
#define IS_RENDER_STATE_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), TYPE_RENDER_STATE))
#define RENDER_STATE_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), TYPE_RENDER_STATE, RenderStateClass))

typedef struct _RenderState RenderState;
typedef struct _RenderStateClass RenderStateClass;

#define TYPE_RENDER_SCENE (render_scene_get_type ())
#define RENDER_SCENE(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), TYPE_RENDER_SCENE, RenderScene))
#define RENDER_SCENE_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), TYPE_RENDER_SCENE, RenderSceneClass))
#define IS_RENDER_SCENE(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), TYPE_RENDER_SCENE))
#define IS_RENDER_SCENE_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), TYPE_RENDER_SCENE))
#define RENDER_SCENE_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), TYPE_RENDER_SCENE, RenderSceneClass))

typedef struct _RenderScene RenderScene;
typedef struct _RenderSceneClass RenderSceneClass;

#define TYPE_RENDER_SCENE2_D (render_scene2_d_get_type ())
#define RENDER_SCENE2_D(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), TYPE_RENDER_SCENE2_D, RenderScene2D))
#define RENDER_SCENE2_D_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), TYPE_RENDER_SCENE2_D, RenderScene2DClass))
#define IS_RENDER_SCENE2_D(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), TYPE_RENDER_SCENE2_D))
#define IS_RENDER_SCENE2_D_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), TYPE_RENDER_SCENE2_D))
#define RENDER_SCENE2_D_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), TYPE_RENDER_SCENE2_D, RenderScene2DClass))

typedef struct _RenderScene2D RenderScene2D;
typedef struct _RenderScene2DClass RenderScene2DClass;

#define TYPE_MOUSE_EVENT_ARGS (mouse_event_args_get_type ())
#define MOUSE_EVENT_ARGS(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), TYPE_MOUSE_EVENT_ARGS, MouseEventArgs))
#define MOUSE_EVENT_ARGS_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), TYPE_MOUSE_EVENT_ARGS, MouseEventArgsClass))
#define IS_MOUSE_EVENT_ARGS(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), TYPE_MOUSE_EVENT_ARGS))
#define IS_MOUSE_EVENT_ARGS_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), TYPE_MOUSE_EVENT_ARGS))
#define MOUSE_EVENT_ARGS_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), TYPE_MOUSE_EVENT_ARGS, MouseEventArgsClass))

typedef struct _MouseEventArgs MouseEventArgs;
typedef struct _MouseEventArgsClass MouseEventArgsClass;

#define TYPE_MOUSE_MOVE_ARGS (mouse_move_args_get_type ())
#define MOUSE_MOVE_ARGS(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), TYPE_MOUSE_MOVE_ARGS, MouseMoveArgs))
#define MOUSE_MOVE_ARGS_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), TYPE_MOUSE_MOVE_ARGS, MouseMoveArgsClass))
#define IS_MOUSE_MOVE_ARGS(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), TYPE_MOUSE_MOVE_ARGS))
#define IS_MOUSE_MOVE_ARGS_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), TYPE_MOUSE_MOVE_ARGS))
#define MOUSE_MOVE_ARGS_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), TYPE_MOUSE_MOVE_ARGS, MouseMoveArgsClass))

typedef struct _MouseMoveArgs MouseMoveArgs;
typedef struct _MouseMoveArgsClass MouseMoveArgsClass;

#define TYPE_KEY_ARGS (key_args_get_type ())
#define KEY_ARGS(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), TYPE_KEY_ARGS, KeyArgs))
#define KEY_ARGS_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), TYPE_KEY_ARGS, KeyArgsClass))
#define IS_KEY_ARGS(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), TYPE_KEY_ARGS))
#define IS_KEY_ARGS_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), TYPE_KEY_ARGS))
#define KEY_ARGS_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), TYPE_KEY_ARGS, KeyArgsClass))

typedef struct _KeyArgs KeyArgs;
typedef struct _KeyArgsClass KeyArgsClass;

#define TYPE_TEXT_INPUT_ARGS (text_input_args_get_type ())
#define TEXT_INPUT_ARGS(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), TYPE_TEXT_INPUT_ARGS, TextInputArgs))
#define TEXT_INPUT_ARGS_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), TYPE_TEXT_INPUT_ARGS, TextInputArgsClass))
#define IS_TEXT_INPUT_ARGS(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), TYPE_TEXT_INPUT_ARGS))
#define IS_TEXT_INPUT_ARGS_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), TYPE_TEXT_INPUT_ARGS))
#define TEXT_INPUT_ARGS_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), TYPE_TEXT_INPUT_ARGS, TextInputArgsClass))

typedef struct _TextInputArgs TextInputArgs;
typedef struct _TextInputArgsClass TextInputArgsClass;

#define TYPE_TEXT_EDIT_ARGS (text_edit_args_get_type ())
#define TEXT_EDIT_ARGS(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), TYPE_TEXT_EDIT_ARGS, TextEditArgs))
#define TEXT_EDIT_ARGS_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), TYPE_TEXT_EDIT_ARGS, TextEditArgsClass))
#define IS_TEXT_EDIT_ARGS(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), TYPE_TEXT_EDIT_ARGS))
#define IS_TEXT_EDIT_ARGS_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), TYPE_TEXT_EDIT_ARGS))
#define TEXT_EDIT_ARGS_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), TYPE_TEXT_EDIT_ARGS, TextEditArgsClass))

typedef struct _TextEditArgs TextEditArgs;
typedef struct _TextEditArgsClass TextEditArgsClass;

#define TYPE_RENDER_WINDOW (render_window_get_type ())
#define RENDER_WINDOW(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), TYPE_RENDER_WINDOW, RenderWindow))
#define RENDER_WINDOW_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), TYPE_RENDER_WINDOW, RenderWindowClass))
#define IS_RENDER_WINDOW(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), TYPE_RENDER_WINDOW))
#define IS_RENDER_WINDOW_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), TYPE_RENDER_WINDOW))
#define RENDER_WINDOW_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), TYPE_RENDER_WINDOW, RenderWindowClass))

typedef struct _RenderWindow RenderWindow;
typedef struct _RenderWindowClass RenderWindowClass;

#define TYPE_VIEW2_D (view2_d_get_type ())
#define VIEW2_D(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), TYPE_VIEW2_D, View2D))
#define VIEW2_D_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), TYPE_VIEW2_D, View2DClass))
#define IS_VIEW2_D(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), TYPE_VIEW2_D))
#define IS_VIEW2_D_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), TYPE_VIEW2_D))
#define VIEW2_D_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), TYPE_VIEW2_D, View2DClass))

typedef struct _View2D View2D;
typedef struct _View2DClass View2DClass;
typedef struct _View2DPrivate View2DPrivate;

#define TYPE_DEBUG_VIEW (debug_view_get_type ())
#define DEBUG_VIEW(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), TYPE_DEBUG_VIEW, DebugView))
#define DEBUG_VIEW_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), TYPE_DEBUG_VIEW, DebugViewClass))
#define IS_DEBUG_VIEW(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), TYPE_DEBUG_VIEW))
#define IS_DEBUG_VIEW_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), TYPE_DEBUG_VIEW))
#define DEBUG_VIEW_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), TYPE_DEBUG_VIEW, DebugViewClass))

typedef struct _DebugView DebugView;
typedef struct _DebugViewClass DebugViewClass;
typedef struct _DebugViewPrivate DebugViewPrivate;

#define TYPE_DEBUG_INFO (debug_info_get_type ())
#define DEBUG_INFO(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), TYPE_DEBUG_INFO, DebugInfo))
#define DEBUG_INFO_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), TYPE_DEBUG_INFO, DebugInfoClass))
#define IS_DEBUG_INFO(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), TYPE_DEBUG_INFO))
#define IS_DEBUG_INFO_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), TYPE_DEBUG_INFO))
#define DEBUG_INFO_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), TYPE_DEBUG_INFO, DebugInfoClass))

typedef struct _DebugInfo DebugInfo;
typedef struct _DebugInfoClass DebugInfoClass;
typedef struct _DebugInfoPrivate DebugInfoPrivate;

#define TYPE_IMODEL_RESOURCE_HANDLE (imodel_resource_handle_get_type ())
#define IMODEL_RESOURCE_HANDLE(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), TYPE_IMODEL_RESOURCE_HANDLE, IModelResourceHandle))
#define IS_IMODEL_RESOURCE_HANDLE(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), TYPE_IMODEL_RESOURCE_HANDLE))
#define IMODEL_RESOURCE_HANDLE_GET_INTERFACE(obj) (G_TYPE_INSTANCE_GET_INTERFACE ((obj), TYPE_IMODEL_RESOURCE_HANDLE, IModelResourceHandleIface))

typedef struct _IModelResourceHandle IModelResourceHandle;
typedef struct _IModelResourceHandleIface IModelResourceHandleIface;

#define TYPE_ITEXTURE_RESOURCE_HANDLE (itexture_resource_handle_get_type ())
#define ITEXTURE_RESOURCE_HANDLE(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), TYPE_ITEXTURE_RESOURCE_HANDLE, ITextureResourceHandle))
#define IS_ITEXTURE_RESOURCE_HANDLE(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), TYPE_ITEXTURE_RESOURCE_HANDLE))
#define ITEXTURE_RESOURCE_HANDLE_GET_INTERFACE(obj) (G_TYPE_INSTANCE_GET_INTERFACE ((obj), TYPE_ITEXTURE_RESOURCE_HANDLE, ITextureResourceHandleIface))

typedef struct _ITextureResourceHandle ITextureResourceHandle;
typedef struct _ITextureResourceHandleIface ITextureResourceHandleIface;

#define TYPE_ILABEL_RESOURCE_HANDLE (ilabel_resource_handle_get_type ())
#define ILABEL_RESOURCE_HANDLE(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), TYPE_ILABEL_RESOURCE_HANDLE, ILabelResourceHandle))
#define IS_ILABEL_RESOURCE_HANDLE(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), TYPE_ILABEL_RESOURCE_HANDLE))
#define ILABEL_RESOURCE_HANDLE_GET_INTERFACE(obj) (G_TYPE_INSTANCE_GET_INTERFACE ((obj), TYPE_ILABEL_RESOURCE_HANDLE, ILabelResourceHandleIface))

typedef struct _ILabelResourceHandle ILabelResourceHandle;
typedef struct _ILabelResourceHandleIface ILabelResourceHandleIface;

#define TYPE_LIGHT_SOURCE (light_source_get_type ())
#define LIGHT_SOURCE(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), TYPE_LIGHT_SOURCE, LightSource))
#define LIGHT_SOURCE_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), TYPE_LIGHT_SOURCE, LightSourceClass))
#define IS_LIGHT_SOURCE(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), TYPE_LIGHT_SOURCE))
#define IS_LIGHT_SOURCE_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), TYPE_LIGHT_SOURCE))
#define LIGHT_SOURCE_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), TYPE_LIGHT_SOURCE, LightSourceClass))

typedef struct _LightSource LightSource;
typedef struct _LightSourceClass LightSourceClass;
typedef struct _LightSourcePrivate LightSourcePrivate;

#define TYPE_IRESOURCE (iresource_get_type ())
#define IRESOURCE(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), TYPE_IRESOURCE, IResource))
#define IRESOURCE_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), TYPE_IRESOURCE, IResourceClass))
#define IS_IRESOURCE(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), TYPE_IRESOURCE))
#define IS_IRESOURCE_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), TYPE_IRESOURCE))
#define IRESOURCE_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), TYPE_IRESOURCE, IResourceClass))

typedef struct _IResource IResource;
typedef struct _IResourceClass IResourceClass;
typedef struct _IResourcePrivate IResourcePrivate;

#define TYPE_TRANSFORMABLE3_D (transformable3_d_get_type ())
#define TRANSFORMABLE3_D(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), TYPE_TRANSFORMABLE3_D, Transformable3D))
#define TRANSFORMABLE3_D_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), TYPE_TRANSFORMABLE3_D, Transformable3DClass))
#define IS_TRANSFORMABLE3_D(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), TYPE_TRANSFORMABLE3_D))
#define IS_TRANSFORMABLE3_D_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), TYPE_TRANSFORMABLE3_D))
#define TRANSFORMABLE3_D_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), TYPE_TRANSFORMABLE3_D, Transformable3DClass))

typedef struct _Transformable3D Transformable3D;
typedef struct _Transformable3DClass Transformable3DClass;
typedef struct _Transformable3DPrivate Transformable3DPrivate;

#define TYPE_RENDER_GEOMETRY3_D (render_geometry3_d_get_type ())
#define RENDER_GEOMETRY3_D(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), TYPE_RENDER_GEOMETRY3_D, RenderGeometry3D))
#define RENDER_GEOMETRY3_D_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), TYPE_RENDER_GEOMETRY3_D, RenderGeometry3DClass))
#define IS_RENDER_GEOMETRY3_D(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), TYPE_RENDER_GEOMETRY3_D))
#define IS_RENDER_GEOMETRY3_D_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), TYPE_RENDER_GEOMETRY3_D))
#define RENDER_GEOMETRY3_D_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), TYPE_RENDER_GEOMETRY3_D, RenderGeometry3DClass))

typedef struct _RenderGeometry3D RenderGeometry3D;
typedef struct _RenderGeometry3DClass RenderGeometry3DClass;
typedef struct _RenderGeometry3DPrivate RenderGeometry3DPrivate;

#define TYPE_RENDER_OBJECT3_D (render_object3_d_get_type ())
#define RENDER_OBJECT3_D(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), TYPE_RENDER_OBJECT3_D, RenderObject3D))
#define RENDER_OBJECT3_D_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), TYPE_RENDER_OBJECT3_D, RenderObject3DClass))
#define IS_RENDER_OBJECT3_D(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), TYPE_RENDER_OBJECT3_D))
#define IS_RENDER_OBJECT3_D_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), TYPE_RENDER_OBJECT3_D))
#define RENDER_OBJECT3_D_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), TYPE_RENDER_OBJECT3_D, RenderObject3DClass))

typedef struct _RenderObject3D RenderObject3D;
typedef struct _RenderObject3DClass RenderObject3DClass;

#define TYPE_RENDER_MATERIAL (render_material_get_type ())
#define RENDER_MATERIAL(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), TYPE_RENDER_MATERIAL, RenderMaterial))
#define RENDER_MATERIAL_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), TYPE_RENDER_MATERIAL, RenderMaterialClass))
#define IS_RENDER_MATERIAL(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), TYPE_RENDER_MATERIAL))
#define IS_RENDER_MATERIAL_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), TYPE_RENDER_MATERIAL))
#define RENDER_MATERIAL_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), TYPE_RENDER_MATERIAL, RenderMaterialClass))

typedef struct _RenderMaterial RenderMaterial;
typedef struct _RenderMaterialClass RenderMaterialClass;
typedef struct _RenderMaterialPrivate RenderMaterialPrivate;

#define TYPE_BLEND_TYPE (blend_type_get_type ())

#define TYPE_RENDER_OBJECT2_D (render_object2_d_get_type ())
#define RENDER_OBJECT2_D(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), TYPE_RENDER_OBJECT2_D, RenderObject2D))
#define RENDER_OBJECT2_D_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), TYPE_RENDER_OBJECT2_D, RenderObject2DClass))
#define IS_RENDER_OBJECT2_D(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), TYPE_RENDER_OBJECT2_D))
#define IS_RENDER_OBJECT2_D_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), TYPE_RENDER_OBJECT2_D))
#define RENDER_OBJECT2_D_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), TYPE_RENDER_OBJECT2_D, RenderObject2DClass))

typedef struct _RenderObject2D RenderObject2D;
typedef struct _RenderObject2DClass RenderObject2DClass;
typedef struct _RenderObject2DPrivate RenderObject2DPrivate;

#define TYPE_RENDER_IMAGE2_D (render_image2_d_get_type ())
#define RENDER_IMAGE2_D(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), TYPE_RENDER_IMAGE2_D, RenderImage2D))
#define RENDER_IMAGE2_D_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), TYPE_RENDER_IMAGE2_D, RenderImage2DClass))
#define IS_RENDER_IMAGE2_D(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), TYPE_RENDER_IMAGE2_D))
#define IS_RENDER_IMAGE2_D_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), TYPE_RENDER_IMAGE2_D))
#define RENDER_IMAGE2_D_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), TYPE_RENDER_IMAGE2_D, RenderImage2DClass))

typedef struct _RenderImage2D RenderImage2D;
typedef struct _RenderImage2DClass RenderImage2DClass;
typedef struct _RenderImage2DPrivate RenderImage2DPrivate;

#define TYPE_RENDER_TEXTURE (render_texture_get_type ())
#define RENDER_TEXTURE(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), TYPE_RENDER_TEXTURE, RenderTexture))
#define RENDER_TEXTURE_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), TYPE_RENDER_TEXTURE, RenderTextureClass))
#define IS_RENDER_TEXTURE(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), TYPE_RENDER_TEXTURE))
#define IS_RENDER_TEXTURE_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), TYPE_RENDER_TEXTURE))
#define RENDER_TEXTURE_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), TYPE_RENDER_TEXTURE, RenderTextureClass))

typedef struct _RenderTexture RenderTexture;
typedef struct _RenderTextureClass RenderTextureClass;

#define TYPE_RENDER_LABEL2_D (render_label2_d_get_type ())
#define RENDER_LABEL2_D(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), TYPE_RENDER_LABEL2_D, RenderLabel2D))
#define RENDER_LABEL2_D_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), TYPE_RENDER_LABEL2_D, RenderLabel2DClass))
#define IS_RENDER_LABEL2_D(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), TYPE_RENDER_LABEL2_D))
#define IS_RENDER_LABEL2_D_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), TYPE_RENDER_LABEL2_D))
#define RENDER_LABEL2_D_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), TYPE_RENDER_LABEL2_D, RenderLabel2DClass))

typedef struct _RenderLabel2D RenderLabel2D;
typedef struct _RenderLabel2DClass RenderLabel2DClass;
typedef struct _RenderLabel2DPrivate RenderLabel2DPrivate;

#define TYPE_LABEL_RESOURCE_REFERENCE (label_resource_reference_get_type ())
#define LABEL_RESOURCE_REFERENCE(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), TYPE_LABEL_RESOURCE_REFERENCE, LabelResourceReference))
#define LABEL_RESOURCE_REFERENCE_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), TYPE_LABEL_RESOURCE_REFERENCE, LabelResourceReferenceClass))
#define IS_LABEL_RESOURCE_REFERENCE(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), TYPE_LABEL_RESOURCE_REFERENCE))
#define IS_LABEL_RESOURCE_REFERENCE_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), TYPE_LABEL_RESOURCE_REFERENCE))
#define LABEL_RESOURCE_REFERENCE_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), TYPE_LABEL_RESOURCE_REFERENCE, LabelResourceReferenceClass))

typedef struct _LabelResourceReference LabelResourceReference;
typedef struct _LabelResourceReferenceClass LabelResourceReferenceClass;

#define TYPE_RENDER_RECTANGLE2_D (render_rectangle2_d_get_type ())
#define RENDER_RECTANGLE2_D(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), TYPE_RENDER_RECTANGLE2_D, RenderRectangle2D))
#define RENDER_RECTANGLE2_D_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), TYPE_RENDER_RECTANGLE2_D, RenderRectangle2DClass))
#define IS_RENDER_RECTANGLE2_D(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), TYPE_RENDER_RECTANGLE2_D))
#define IS_RENDER_RECTANGLE2_D_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), TYPE_RENDER_RECTANGLE2_D))
#define RENDER_RECTANGLE2_D_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), TYPE_RENDER_RECTANGLE2_D, RenderRectangle2DClass))

typedef struct _RenderRectangle2D RenderRectangle2D;
typedef struct _RenderRectangle2DClass RenderRectangle2DClass;
typedef struct _RenderRectangle2DPrivate RenderRectangle2DPrivate;
typedef struct _RenderObject3DPrivate RenderObject3DPrivate;

#define TYPE_RENDER_MODEL (render_model_get_type ())
#define RENDER_MODEL(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), TYPE_RENDER_MODEL, RenderModel))
#define RENDER_MODEL_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), TYPE_RENDER_MODEL, RenderModelClass))
#define IS_RENDER_MODEL(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), TYPE_RENDER_MODEL))
#define IS_RENDER_MODEL_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), TYPE_RENDER_MODEL))
#define RENDER_MODEL_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), TYPE_RENDER_MODEL, RenderModelClass))

typedef struct _RenderModel RenderModel;
typedef struct _RenderModelClass RenderModelClass;

#define TYPE_RENDER_BODY3_D (render_body3_d_get_type ())
#define RENDER_BODY3_D(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), TYPE_RENDER_BODY3_D, RenderBody3D))
#define RENDER_BODY3_D_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), TYPE_RENDER_BODY3_D, RenderBody3DClass))
#define IS_RENDER_BODY3_D(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), TYPE_RENDER_BODY3_D))
#define IS_RENDER_BODY3_D_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), TYPE_RENDER_BODY3_D))
#define RENDER_BODY3_D_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), TYPE_RENDER_BODY3_D, RenderBody3DClass))

typedef struct _RenderBody3D RenderBody3D;
typedef struct _RenderBody3DClass RenderBody3DClass;
typedef struct _RenderBody3DPrivate RenderBody3DPrivate;

#define TYPE_RENDER_LABEL3_D (render_label3_d_get_type ())
#define RENDER_LABEL3_D(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), TYPE_RENDER_LABEL3_D, RenderLabel3D))
#define RENDER_LABEL3_D_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), TYPE_RENDER_LABEL3_D, RenderLabel3DClass))
#define IS_RENDER_LABEL3_D(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), TYPE_RENDER_LABEL3_D))
#define IS_RENDER_LABEL3_D_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), TYPE_RENDER_LABEL3_D))
#define RENDER_LABEL3_D_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), TYPE_RENDER_LABEL3_D, RenderLabel3DClass))

typedef struct _RenderLabel3D RenderLabel3D;
typedef struct _RenderLabel3DClass RenderLabel3DClass;
typedef struct _RenderLabel3DPrivate RenderLabel3DPrivate;
typedef struct _RenderScenePrivate RenderScenePrivate;
typedef struct _RenderScene2DPrivate RenderScene2DPrivate;

#define TYPE_RENDER_SCENE3_D (render_scene3_d_get_type ())
#define RENDER_SCENE3_D(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), TYPE_RENDER_SCENE3_D, RenderScene3D))
#define RENDER_SCENE3_D_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), TYPE_RENDER_SCENE3_D, RenderScene3DClass))
#define IS_RENDER_SCENE3_D(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), TYPE_RENDER_SCENE3_D))
#define IS_RENDER_SCENE3_D_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), TYPE_RENDER_SCENE3_D))
#define RENDER_SCENE3_D_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), TYPE_RENDER_SCENE3_D, RenderScene3DClass))

typedef struct _RenderScene3D RenderScene3D;
typedef struct _RenderScene3DClass RenderScene3DClass;
typedef struct _RenderScene3DPrivate RenderScene3DPrivate;
typedef struct _RenderStatePrivate RenderStatePrivate;
typedef struct _RenderTargetPrivate RenderTargetPrivate;

#define TYPE_INPUT_RESOURCE_MODEL (input_resource_model_get_type ())
#define INPUT_RESOURCE_MODEL(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), TYPE_INPUT_RESOURCE_MODEL, InputResourceModel))
#define INPUT_RESOURCE_MODEL_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), TYPE_INPUT_RESOURCE_MODEL, InputResourceModelClass))
#define IS_INPUT_RESOURCE_MODEL(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), TYPE_INPUT_RESOURCE_MODEL))
#define IS_INPUT_RESOURCE_MODEL_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), TYPE_INPUT_RESOURCE_MODEL))
#define INPUT_RESOURCE_MODEL_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), TYPE_INPUT_RESOURCE_MODEL, InputResourceModelClass))

typedef struct _InputResourceModel InputResourceModel;
typedef struct _InputResourceModelClass InputResourceModelClass;

#define TYPE_INPUT_RESOURCE_TEXTURE (input_resource_texture_get_type ())
#define INPUT_RESOURCE_TEXTURE(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), TYPE_INPUT_RESOURCE_TEXTURE, InputResourceTexture))
#define INPUT_RESOURCE_TEXTURE_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), TYPE_INPUT_RESOURCE_TEXTURE, InputResourceTextureClass))
#define IS_INPUT_RESOURCE_TEXTURE(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), TYPE_INPUT_RESOURCE_TEXTURE))
#define IS_INPUT_RESOURCE_TEXTURE_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), TYPE_INPUT_RESOURCE_TEXTURE))
#define INPUT_RESOURCE_TEXTURE_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), TYPE_INPUT_RESOURCE_TEXTURE, InputResourceTextureClass))

typedef struct _InputResourceTexture InputResourceTexture;
typedef struct _InputResourceTextureClass InputResourceTextureClass;

#define RENDER_TARGET_TYPE_LABEL_RESOURCE_HANDLE (render_target_label_resource_handle_get_type ())
#define RENDER_TARGET_LABEL_RESOURCE_HANDLE(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), RENDER_TARGET_TYPE_LABEL_RESOURCE_HANDLE, RenderTargetLabelResourceHandle))
#define RENDER_TARGET_LABEL_RESOURCE_HANDLE_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), RENDER_TARGET_TYPE_LABEL_RESOURCE_HANDLE, RenderTargetLabelResourceHandleClass))
#define RENDER_TARGET_IS_LABEL_RESOURCE_HANDLE(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), RENDER_TARGET_TYPE_LABEL_RESOURCE_HANDLE))
#define RENDER_TARGET_IS_LABEL_RESOURCE_HANDLE_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), RENDER_TARGET_TYPE_LABEL_RESOURCE_HANDLE))
#define RENDER_TARGET_LABEL_RESOURCE_HANDLE_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), RENDER_TARGET_TYPE_LABEL_RESOURCE_HANDLE, RenderTargetLabelResourceHandleClass))

typedef struct _RenderTargetLabelResourceHandle RenderTargetLabelResourceHandle;
typedef struct _RenderTargetLabelResourceHandleClass RenderTargetLabelResourceHandleClass;

#define TYPE_RESOURCE_STORE (resource_store_get_type ())
#define RESOURCE_STORE(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), TYPE_RESOURCE_STORE, ResourceStore))
#define RESOURCE_STORE_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), TYPE_RESOURCE_STORE, ResourceStoreClass))
#define IS_RESOURCE_STORE(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), TYPE_RESOURCE_STORE))
#define IS_RESOURCE_STORE_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), TYPE_RESOURCE_STORE))
#define RESOURCE_STORE_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), TYPE_RESOURCE_STORE, ResourceStoreClass))

typedef struct _ResourceStore ResourceStore;
typedef struct _ResourceStoreClass ResourceStoreClass;
typedef struct _RenderTargetLabelResourceHandlePrivate RenderTargetLabelResourceHandlePrivate;
typedef struct _ResourceStorePrivate ResourceStorePrivate;
typedef struct _InputResourceModelPrivate InputResourceModelPrivate;
typedef struct _InputResourceTexturePrivate InputResourceTexturePrivate;
typedef struct _LabelResourceReferencePrivate LabelResourceReferencePrivate;
typedef struct _RenderModelPrivate RenderModelPrivate;
typedef struct _RenderTexturePrivate RenderTexturePrivate;

#define TYPE_OPEN_GL_FRAME_BUFFER (open_gl_frame_buffer_get_type ())
#define OPEN_GL_FRAME_BUFFER(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), TYPE_OPEN_GL_FRAME_BUFFER, OpenGLFrameBuffer))
#define OPEN_GL_FRAME_BUFFER_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), TYPE_OPEN_GL_FRAME_BUFFER, OpenGLFrameBufferClass))
#define IS_OPEN_GL_FRAME_BUFFER(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), TYPE_OPEN_GL_FRAME_BUFFER))
#define IS_OPEN_GL_FRAME_BUFFER_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), TYPE_OPEN_GL_FRAME_BUFFER))
#define OPEN_GL_FRAME_BUFFER_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), TYPE_OPEN_GL_FRAME_BUFFER, OpenGLFrameBufferClass))

typedef struct _OpenGLFrameBuffer OpenGLFrameBuffer;
typedef struct _OpenGLFrameBufferClass OpenGLFrameBufferClass;
typedef struct _OpenGLFrameBufferPrivate OpenGLFrameBufferPrivate;

#define TYPE_OPEN_GL_RENDER_BUFFER (open_gl_render_buffer_get_type ())
#define OPEN_GL_RENDER_BUFFER(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), TYPE_OPEN_GL_RENDER_BUFFER, OpenGLRenderBuffer))
#define OPEN_GL_RENDER_BUFFER_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), TYPE_OPEN_GL_RENDER_BUFFER, OpenGLRenderBufferClass))
#define IS_OPEN_GL_RENDER_BUFFER(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), TYPE_OPEN_GL_RENDER_BUFFER))
#define IS_OPEN_GL_RENDER_BUFFER_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), TYPE_OPEN_GL_RENDER_BUFFER))
#define OPEN_GL_RENDER_BUFFER_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), TYPE_OPEN_GL_RENDER_BUFFER, OpenGLRenderBufferClass))

typedef struct _OpenGLRenderBuffer OpenGLRenderBuffer;
typedef struct _OpenGLRenderBufferClass OpenGLRenderBufferClass;
typedef struct _OpenGLRenderBufferPrivate OpenGLRenderBufferPrivate;

#define TYPE_OPEN_GL_RENDERER (open_gl_renderer_get_type ())
#define OPEN_GL_RENDERER(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), TYPE_OPEN_GL_RENDERER, OpenGLRenderer))
#define OPEN_GL_RENDERER_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), TYPE_OPEN_GL_RENDERER, OpenGLRendererClass))
#define IS_OPEN_GL_RENDERER(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), TYPE_OPEN_GL_RENDERER))
#define IS_OPEN_GL_RENDERER_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), TYPE_OPEN_GL_RENDERER))
#define OPEN_GL_RENDERER_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), TYPE_OPEN_GL_RENDERER, OpenGLRendererClass))

typedef struct _OpenGLRenderer OpenGLRenderer;
typedef struct _OpenGLRendererClass OpenGLRendererClass;
typedef struct _OpenGLRendererPrivate OpenGLRendererPrivate;

#define TYPE_OPEN_GL_SHADER_BUILDER (open_gl_shader_builder_get_type ())
#define OPEN_GL_SHADER_BUILDER(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), TYPE_OPEN_GL_SHADER_BUILDER, OpenGLShaderBuilder))
#define OPEN_GL_SHADER_BUILDER_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), TYPE_OPEN_GL_SHADER_BUILDER, OpenGLShaderBuilderClass))
#define IS_OPEN_GL_SHADER_BUILDER(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), TYPE_OPEN_GL_SHADER_BUILDER))
#define IS_OPEN_GL_SHADER_BUILDER_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), TYPE_OPEN_GL_SHADER_BUILDER))
#define OPEN_GL_SHADER_BUILDER_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), TYPE_OPEN_GL_SHADER_BUILDER, OpenGLShaderBuilderClass))

typedef struct _OpenGLShaderBuilder OpenGLShaderBuilder;
typedef struct _OpenGLShaderBuilderClass OpenGLShaderBuilderClass;
typedef struct _OpenGLShaderBuilderPrivate OpenGLShaderBuilderPrivate;

#define TYPE_OPEN_GL_SHADER_DEPENDENCY_TREE (open_gl_shader_dependency_tree_get_type ())
#define OPEN_GL_SHADER_DEPENDENCY_TREE(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), TYPE_OPEN_GL_SHADER_DEPENDENCY_TREE, OpenGLShaderDependencyTree))
#define OPEN_GL_SHADER_DEPENDENCY_TREE_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), TYPE_OPEN_GL_SHADER_DEPENDENCY_TREE, OpenGLShaderDependencyTreeClass))
#define IS_OPEN_GL_SHADER_DEPENDENCY_TREE(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), TYPE_OPEN_GL_SHADER_DEPENDENCY_TREE))
#define IS_OPEN_GL_SHADER_DEPENDENCY_TREE_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), TYPE_OPEN_GL_SHADER_DEPENDENCY_TREE))
#define OPEN_GL_SHADER_DEPENDENCY_TREE_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), TYPE_OPEN_GL_SHADER_DEPENDENCY_TREE, OpenGLShaderDependencyTreeClass))

typedef struct _OpenGLShaderDependencyTree OpenGLShaderDependencyTree;
typedef struct _OpenGLShaderDependencyTreeClass OpenGLShaderDependencyTreeClass;

#define TYPE_OPEN_GL_SHADER_UNIT (open_gl_shader_unit_get_type ())
#define OPEN_GL_SHADER_UNIT(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), TYPE_OPEN_GL_SHADER_UNIT, OpenGLShaderUnit))
#define OPEN_GL_SHADER_UNIT_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), TYPE_OPEN_GL_SHADER_UNIT, OpenGLShaderUnitClass))
#define IS_OPEN_GL_SHADER_UNIT(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), TYPE_OPEN_GL_SHADER_UNIT))
#define IS_OPEN_GL_SHADER_UNIT_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), TYPE_OPEN_GL_SHADER_UNIT))
#define OPEN_GL_SHADER_UNIT_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), TYPE_OPEN_GL_SHADER_UNIT, OpenGLShaderUnitClass))

typedef struct _OpenGLShaderUnit OpenGLShaderUnit;
typedef struct _OpenGLShaderUnitClass OpenGLShaderUnitClass;

#define TYPE_OPEN_GL_SHADER_FUNCTION (open_gl_shader_function_get_type ())
#define OPEN_GL_SHADER_FUNCTION(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), TYPE_OPEN_GL_SHADER_FUNCTION, OpenGLShaderFunction))
#define OPEN_GL_SHADER_FUNCTION_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), TYPE_OPEN_GL_SHADER_FUNCTION, OpenGLShaderFunctionClass))
#define IS_OPEN_GL_SHADER_FUNCTION(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), TYPE_OPEN_GL_SHADER_FUNCTION))
#define IS_OPEN_GL_SHADER_FUNCTION_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), TYPE_OPEN_GL_SHADER_FUNCTION))
#define OPEN_GL_SHADER_FUNCTION_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), TYPE_OPEN_GL_SHADER_FUNCTION, OpenGLShaderFunctionClass))

typedef struct _OpenGLShaderFunction OpenGLShaderFunction;
typedef struct _OpenGLShaderFunctionClass OpenGLShaderFunctionClass;

#define TYPE_OPEN_GL2_DSHADER_BUILDER (open_gl2_dshader_builder_get_type ())
#define OPEN_GL2_DSHADER_BUILDER(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), TYPE_OPEN_GL2_DSHADER_BUILDER, OpenGL2DShaderBuilder))
#define OPEN_GL2_DSHADER_BUILDER_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), TYPE_OPEN_GL2_DSHADER_BUILDER, OpenGL2DShaderBuilderClass))
#define IS_OPEN_GL2_DSHADER_BUILDER(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), TYPE_OPEN_GL2_DSHADER_BUILDER))
#define IS_OPEN_GL2_DSHADER_BUILDER_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), TYPE_OPEN_GL2_DSHADER_BUILDER))
#define OPEN_GL2_DSHADER_BUILDER_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), TYPE_OPEN_GL2_DSHADER_BUILDER, OpenGL2DShaderBuilderClass))

typedef struct _OpenGL2DShaderBuilder OpenGL2DShaderBuilder;
typedef struct _OpenGL2DShaderBuilderClass OpenGL2DShaderBuilderClass;
typedef struct _OpenGL2DShaderBuilderPrivate OpenGL2DShaderBuilderPrivate;

#define TYPE_OPEN_GL_SHADER_PRIMITIVE_TYPE (open_gl_shader_primitive_type_get_type ())

#define TYPE_OPEN_GL_SHADER_PROPERTY_DIRECTION (open_gl_shader_property_direction_get_type ())
typedef struct _OpenGLShaderUnitPrivate OpenGLShaderUnitPrivate;

#define TYPE_OPEN_GL_SHADER_DEFINE (open_gl_shader_define_get_type ())
#define OPEN_GL_SHADER_DEFINE(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), TYPE_OPEN_GL_SHADER_DEFINE, OpenGLShaderDefine))
#define OPEN_GL_SHADER_DEFINE_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), TYPE_OPEN_GL_SHADER_DEFINE, OpenGLShaderDefineClass))
#define IS_OPEN_GL_SHADER_DEFINE(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), TYPE_OPEN_GL_SHADER_DEFINE))
#define IS_OPEN_GL_SHADER_DEFINE_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), TYPE_OPEN_GL_SHADER_DEFINE))
#define OPEN_GL_SHADER_DEFINE_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), TYPE_OPEN_GL_SHADER_DEFINE, OpenGLShaderDefineClass))

typedef struct _OpenGLShaderDefine OpenGLShaderDefine;
typedef struct _OpenGLShaderDefineClass OpenGLShaderDefineClass;
typedef struct _OpenGLShaderDefinePrivate OpenGLShaderDefinePrivate;

#define TYPE_OPEN_GL_SHADER_PROPERTY (open_gl_shader_property_get_type ())
#define OPEN_GL_SHADER_PROPERTY(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), TYPE_OPEN_GL_SHADER_PROPERTY, OpenGLShaderProperty))
#define OPEN_GL_SHADER_PROPERTY_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), TYPE_OPEN_GL_SHADER_PROPERTY, OpenGLShaderPropertyClass))
#define IS_OPEN_GL_SHADER_PROPERTY(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), TYPE_OPEN_GL_SHADER_PROPERTY))
#define IS_OPEN_GL_SHADER_PROPERTY_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), TYPE_OPEN_GL_SHADER_PROPERTY))
#define OPEN_GL_SHADER_PROPERTY_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), TYPE_OPEN_GL_SHADER_PROPERTY, OpenGLShaderPropertyClass))

typedef struct _OpenGLShaderProperty OpenGLShaderProperty;
typedef struct _OpenGLShaderPropertyClass OpenGLShaderPropertyClass;
typedef struct _OpenGLShaderPropertyPrivate OpenGLShaderPropertyPrivate;

#define TYPE_OPEN_GL_SHADER_ATTRIBUTE (open_gl_shader_attribute_get_type ())
#define OPEN_GL_SHADER_ATTRIBUTE(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), TYPE_OPEN_GL_SHADER_ATTRIBUTE, OpenGLShaderAttribute))
#define OPEN_GL_SHADER_ATTRIBUTE_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), TYPE_OPEN_GL_SHADER_ATTRIBUTE, OpenGLShaderAttributeClass))
#define IS_OPEN_GL_SHADER_ATTRIBUTE(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), TYPE_OPEN_GL_SHADER_ATTRIBUTE))
#define IS_OPEN_GL_SHADER_ATTRIBUTE_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), TYPE_OPEN_GL_SHADER_ATTRIBUTE))
#define OPEN_GL_SHADER_ATTRIBUTE_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), TYPE_OPEN_GL_SHADER_ATTRIBUTE, OpenGLShaderAttributeClass))

typedef struct _OpenGLShaderAttribute OpenGLShaderAttribute;
typedef struct _OpenGLShaderAttributeClass OpenGLShaderAttributeClass;
typedef struct _OpenGLShaderAttributePrivate OpenGLShaderAttributePrivate;

#define TYPE_OPEN_GL_SHADER_VARYING (open_gl_shader_varying_get_type ())
#define OPEN_GL_SHADER_VARYING(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), TYPE_OPEN_GL_SHADER_VARYING, OpenGLShaderVarying))
#define OPEN_GL_SHADER_VARYING_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), TYPE_OPEN_GL_SHADER_VARYING, OpenGLShaderVaryingClass))
#define IS_OPEN_GL_SHADER_VARYING(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), TYPE_OPEN_GL_SHADER_VARYING))
#define IS_OPEN_GL_SHADER_VARYING_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), TYPE_OPEN_GL_SHADER_VARYING))
#define OPEN_GL_SHADER_VARYING_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), TYPE_OPEN_GL_SHADER_VARYING, OpenGLShaderVaryingClass))

typedef struct _OpenGLShaderVarying OpenGLShaderVarying;
typedef struct _OpenGLShaderVaryingClass OpenGLShaderVaryingClass;
typedef struct _OpenGLShaderVaryingPrivate OpenGLShaderVaryingPrivate;

#define TYPE_OPEN_GL_SHADER_UNIFORM (open_gl_shader_uniform_get_type ())
#define OPEN_GL_SHADER_UNIFORM(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), TYPE_OPEN_GL_SHADER_UNIFORM, OpenGLShaderUniform))
#define OPEN_GL_SHADER_UNIFORM_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), TYPE_OPEN_GL_SHADER_UNIFORM, OpenGLShaderUniformClass))
#define IS_OPEN_GL_SHADER_UNIFORM(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), TYPE_OPEN_GL_SHADER_UNIFORM))
#define IS_OPEN_GL_SHADER_UNIFORM_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), TYPE_OPEN_GL_SHADER_UNIFORM))
#define OPEN_GL_SHADER_UNIFORM_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), TYPE_OPEN_GL_SHADER_UNIFORM, OpenGLShaderUniformClass))

typedef struct _OpenGLShaderUniform OpenGLShaderUniform;
typedef struct _OpenGLShaderUniformClass OpenGLShaderUniformClass;
typedef struct _OpenGLShaderUniformPrivate OpenGLShaderUniformPrivate;

#define TYPE_OPEN_GL_SHADER_STRUCT (open_gl_shader_struct_get_type ())
#define OPEN_GL_SHADER_STRUCT(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), TYPE_OPEN_GL_SHADER_STRUCT, OpenGLShaderStruct))
#define OPEN_GL_SHADER_STRUCT_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), TYPE_OPEN_GL_SHADER_STRUCT, OpenGLShaderStructClass))
#define IS_OPEN_GL_SHADER_STRUCT(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), TYPE_OPEN_GL_SHADER_STRUCT))
#define IS_OPEN_GL_SHADER_STRUCT_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), TYPE_OPEN_GL_SHADER_STRUCT))
#define OPEN_GL_SHADER_STRUCT_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), TYPE_OPEN_GL_SHADER_STRUCT, OpenGLShaderStructClass))

typedef struct _OpenGLShaderStruct OpenGLShaderStruct;
typedef struct _OpenGLShaderStructClass OpenGLShaderStructClass;
typedef struct _OpenGLShaderStructPrivate OpenGLShaderStructPrivate;

#define TYPE_OPEN_GL_SHADER_CODE_BLOCK (open_gl_shader_code_block_get_type ())
#define OPEN_GL_SHADER_CODE_BLOCK(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), TYPE_OPEN_GL_SHADER_CODE_BLOCK, OpenGLShaderCodeBlock))
#define OPEN_GL_SHADER_CODE_BLOCK_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), TYPE_OPEN_GL_SHADER_CODE_BLOCK, OpenGLShaderCodeBlockClass))
#define IS_OPEN_GL_SHADER_CODE_BLOCK(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), TYPE_OPEN_GL_SHADER_CODE_BLOCK))
#define IS_OPEN_GL_SHADER_CODE_BLOCK_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), TYPE_OPEN_GL_SHADER_CODE_BLOCK))
#define OPEN_GL_SHADER_CODE_BLOCK_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), TYPE_OPEN_GL_SHADER_CODE_BLOCK, OpenGLShaderCodeBlockClass))

typedef struct _OpenGLShaderCodeBlock OpenGLShaderCodeBlock;
typedef struct _OpenGLShaderCodeBlockClass OpenGLShaderCodeBlockClass;
typedef struct _OpenGLShaderCodeBlockPrivate OpenGLShaderCodeBlockPrivate;
typedef struct _OpenGLShaderFunctionPrivate OpenGLShaderFunctionPrivate;

#define TYPE_OPEN_GL_SHADER_CODE_DEPENDENCY_TREE (open_gl_shader_code_dependency_tree_get_type ())
#define OPEN_GL_SHADER_CODE_DEPENDENCY_TREE(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), TYPE_OPEN_GL_SHADER_CODE_DEPENDENCY_TREE, OpenGLShaderCodeDependencyTree))
#define OPEN_GL_SHADER_CODE_DEPENDENCY_TREE_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), TYPE_OPEN_GL_SHADER_CODE_DEPENDENCY_TREE, OpenGLShaderCodeDependencyTreeClass))
#define IS_OPEN_GL_SHADER_CODE_DEPENDENCY_TREE(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), TYPE_OPEN_GL_SHADER_CODE_DEPENDENCY_TREE))
#define IS_OPEN_GL_SHADER_CODE_DEPENDENCY_TREE_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), TYPE_OPEN_GL_SHADER_CODE_DEPENDENCY_TREE))
#define OPEN_GL_SHADER_CODE_DEPENDENCY_TREE_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), TYPE_OPEN_GL_SHADER_CODE_DEPENDENCY_TREE, OpenGLShaderCodeDependencyTreeClass))

typedef struct _OpenGLShaderCodeDependencyTree OpenGLShaderCodeDependencyTree;
typedef struct _OpenGLShaderCodeDependencyTreeClass OpenGLShaderCodeDependencyTreeClass;
typedef struct _OpenGLShaderCodeDependencyTreePrivate OpenGLShaderCodeDependencyTreePrivate;
typedef struct _OpenGLShaderDependencyTreePrivate OpenGLShaderDependencyTreePrivate;

#define TYPE_OPEN_GL_SHADER_PROGRAM3_D (open_gl_shader_program3_d_get_type ())
#define OPEN_GL_SHADER_PROGRAM3_D(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), TYPE_OPEN_GL_SHADER_PROGRAM3_D, OpenGLShaderProgram3D))
#define OPEN_GL_SHADER_PROGRAM3_D_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), TYPE_OPEN_GL_SHADER_PROGRAM3_D, OpenGLShaderProgram3DClass))
#define IS_OPEN_GL_SHADER_PROGRAM3_D(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), TYPE_OPEN_GL_SHADER_PROGRAM3_D))
#define IS_OPEN_GL_SHADER_PROGRAM3_D_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), TYPE_OPEN_GL_SHADER_PROGRAM3_D))
#define OPEN_GL_SHADER_PROGRAM3_D_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), TYPE_OPEN_GL_SHADER_PROGRAM3_D, OpenGLShaderProgram3DClass))

typedef struct _OpenGLShaderProgram3D OpenGLShaderProgram3D;
typedef struct _OpenGLShaderProgram3DClass OpenGLShaderProgram3DClass;
typedef struct _OpenGLShaderProgram3DPrivate OpenGLShaderProgram3DPrivate;

#define TYPE_OPEN_GL_STANDARD_SHADER_BUILDER (open_gl_standard_shader_builder_get_type ())
#define OPEN_GL_STANDARD_SHADER_BUILDER(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), TYPE_OPEN_GL_STANDARD_SHADER_BUILDER, OpenGLStandardShaderBuilder))
#define OPEN_GL_STANDARD_SHADER_BUILDER_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), TYPE_OPEN_GL_STANDARD_SHADER_BUILDER, OpenGLStandardShaderBuilderClass))
#define IS_OPEN_GL_STANDARD_SHADER_BUILDER(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), TYPE_OPEN_GL_STANDARD_SHADER_BUILDER))
#define IS_OPEN_GL_STANDARD_SHADER_BUILDER_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), TYPE_OPEN_GL_STANDARD_SHADER_BUILDER))
#define OPEN_GL_STANDARD_SHADER_BUILDER_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), TYPE_OPEN_GL_STANDARD_SHADER_BUILDER, OpenGLStandardShaderBuilderClass))

typedef struct _OpenGLStandardShaderBuilder OpenGLStandardShaderBuilder;
typedef struct _OpenGLStandardShaderBuilderClass OpenGLStandardShaderBuilderClass;
typedef struct _OpenGLStandardShaderBuilderPrivate OpenGLStandardShaderBuilderPrivate;

#define TYPE_WORLD (world_get_type ())
#define WORLD(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), TYPE_WORLD, World))
#define WORLD_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), TYPE_WORLD, WorldClass))
#define IS_WORLD(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), TYPE_WORLD))
#define IS_WORLD_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), TYPE_WORLD))
#define WORLD_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), TYPE_WORLD, WorldClass))

typedef struct _World World;
typedef struct _WorldClass WorldClass;
typedef struct _WorldPrivate WorldPrivate;

#define TYPE_WORLD_OBJECT (world_object_get_type ())
#define WORLD_OBJECT(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), TYPE_WORLD_OBJECT, WorldObject))
#define WORLD_OBJECT_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), TYPE_WORLD_OBJECT, WorldObjectClass))
#define IS_WORLD_OBJECT(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), TYPE_WORLD_OBJECT))
#define IS_WORLD_OBJECT_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), TYPE_WORLD_OBJECT))
#define WORLD_OBJECT_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), TYPE_WORLD_OBJECT, WorldObjectClass))

typedef struct _WorldObject WorldObject;
typedef struct _WorldObjectClass WorldObjectClass;

#define TYPE_WORLD_CAMERA (world_camera_get_type ())
#define WORLD_CAMERA(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), TYPE_WORLD_CAMERA, WorldCamera))
#define WORLD_CAMERA_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), TYPE_WORLD_CAMERA, WorldCameraClass))
#define IS_WORLD_CAMERA(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), TYPE_WORLD_CAMERA))
#define IS_WORLD_CAMERA_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), TYPE_WORLD_CAMERA))
#define WORLD_CAMERA_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), TYPE_WORLD_CAMERA, WorldCameraClass))

typedef struct _WorldCamera WorldCamera;
typedef struct _WorldCameraClass WorldCameraClass;
typedef struct _WorldObjectPrivate WorldObjectPrivate;

#define TYPE_WORLD_OBJECT_ANIMATION (world_object_animation_get_type ())
#define WORLD_OBJECT_ANIMATION(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), TYPE_WORLD_OBJECT_ANIMATION, WorldObjectAnimation))
#define WORLD_OBJECT_ANIMATION_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), TYPE_WORLD_OBJECT_ANIMATION, WorldObjectAnimationClass))
#define IS_WORLD_OBJECT_ANIMATION(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), TYPE_WORLD_OBJECT_ANIMATION))
#define IS_WORLD_OBJECT_ANIMATION_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), TYPE_WORLD_OBJECT_ANIMATION))
#define WORLD_OBJECT_ANIMATION_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), TYPE_WORLD_OBJECT_ANIMATION, WorldObjectAnimationClass))

typedef struct _WorldObjectAnimation WorldObjectAnimation;
typedef struct _WorldObjectAnimationClass WorldObjectAnimationClass;

#define TYPE_WORLD_TRANSFORM (world_transform_get_type ())
#define WORLD_TRANSFORM(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), TYPE_WORLD_TRANSFORM, WorldTransform))
#define WORLD_TRANSFORM_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), TYPE_WORLD_TRANSFORM, WorldTransformClass))
#define IS_WORLD_TRANSFORM(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), TYPE_WORLD_TRANSFORM))
#define IS_WORLD_TRANSFORM_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), TYPE_WORLD_TRANSFORM))
#define WORLD_TRANSFORM_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), TYPE_WORLD_TRANSFORM, WorldTransformClass))

typedef struct _WorldTransform WorldTransform;
typedef struct _WorldTransformClass WorldTransformClass;
typedef struct _WorldTransformPrivate WorldTransformPrivate;
typedef struct _WorldCameraPrivate WorldCameraPrivate;

#define TYPE_TARGET_WORLD_CAMERA (target_world_camera_get_type ())
#define TARGET_WORLD_CAMERA(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), TYPE_TARGET_WORLD_CAMERA, TargetWorldCamera))
#define TARGET_WORLD_CAMERA_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), TYPE_TARGET_WORLD_CAMERA, TargetWorldCameraClass))
#define IS_TARGET_WORLD_CAMERA(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), TYPE_TARGET_WORLD_CAMERA))
#define IS_TARGET_WORLD_CAMERA_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), TYPE_TARGET_WORLD_CAMERA))
#define TARGET_WORLD_CAMERA_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), TYPE_TARGET_WORLD_CAMERA, TargetWorldCameraClass))

typedef struct _TargetWorldCamera TargetWorldCamera;
typedef struct _TargetWorldCameraClass TargetWorldCameraClass;
typedef struct _TargetWorldCameraPrivate TargetWorldCameraPrivate;

#define TYPE_WORLD_OBJECT_TRANSFORMABLE (world_object_transformable_get_type ())
#define WORLD_OBJECT_TRANSFORMABLE(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), TYPE_WORLD_OBJECT_TRANSFORMABLE, WorldObjectTransformable))
#define WORLD_OBJECT_TRANSFORMABLE_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), TYPE_WORLD_OBJECT_TRANSFORMABLE, WorldObjectTransformableClass))
#define IS_WORLD_OBJECT_TRANSFORMABLE(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), TYPE_WORLD_OBJECT_TRANSFORMABLE))
#define IS_WORLD_OBJECT_TRANSFORMABLE_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), TYPE_WORLD_OBJECT_TRANSFORMABLE))
#define WORLD_OBJECT_TRANSFORMABLE_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), TYPE_WORLD_OBJECT_TRANSFORMABLE, WorldObjectTransformableClass))

typedef struct _WorldObjectTransformable WorldObjectTransformable;
typedef struct _WorldObjectTransformableClass WorldObjectTransformableClass;
typedef struct _WorldObjectTransformablePrivate WorldObjectTransformablePrivate;

#define TYPE_WORLD_LABEL (world_label_get_type ())
#define WORLD_LABEL(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), TYPE_WORLD_LABEL, WorldLabel))
#define WORLD_LABEL_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), TYPE_WORLD_LABEL, WorldLabelClass))
#define IS_WORLD_LABEL(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), TYPE_WORLD_LABEL))
#define IS_WORLD_LABEL_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), TYPE_WORLD_LABEL))
#define WORLD_LABEL_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), TYPE_WORLD_LABEL, WorldLabelClass))

typedef struct _WorldLabel WorldLabel;
typedef struct _WorldLabelClass WorldLabelClass;
typedef struct _WorldLabelPrivate WorldLabelPrivate;

#define TYPE_WORLD_LIGHT (world_light_get_type ())
#define WORLD_LIGHT(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), TYPE_WORLD_LIGHT, WorldLight))
#define WORLD_LIGHT_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), TYPE_WORLD_LIGHT, WorldLightClass))
#define IS_WORLD_LIGHT(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), TYPE_WORLD_LIGHT))
#define IS_WORLD_LIGHT_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), TYPE_WORLD_LIGHT))
#define WORLD_LIGHT_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), TYPE_WORLD_LIGHT, WorldLightClass))

typedef struct _WorldLight WorldLight;
typedef struct _WorldLightClass WorldLightClass;
typedef struct _WorldLightPrivate WorldLightPrivate;
typedef struct _WorldObjectAnimationPrivate WorldObjectAnimationPrivate;

#define TYPE_WORLD_LIGHT_ANIMATION (world_light_animation_get_type ())
#define WORLD_LIGHT_ANIMATION(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), TYPE_WORLD_LIGHT_ANIMATION, WorldLightAnimation))
#define WORLD_LIGHT_ANIMATION_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), TYPE_WORLD_LIGHT_ANIMATION, WorldLightAnimationClass))
#define IS_WORLD_LIGHT_ANIMATION(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), TYPE_WORLD_LIGHT_ANIMATION))
#define IS_WORLD_LIGHT_ANIMATION_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), TYPE_WORLD_LIGHT_ANIMATION))
#define WORLD_LIGHT_ANIMATION_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), TYPE_WORLD_LIGHT_ANIMATION, WorldLightAnimationClass))

typedef struct _WorldLightAnimation WorldLightAnimation;
typedef struct _WorldLightAnimationClass WorldLightAnimationClass;
typedef struct _WorldLightAnimationPrivate WorldLightAnimationPrivate;

#define TYPE_ANIMATION_TIME (animation_time_get_type ())
#define ANIMATION_TIME(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), TYPE_ANIMATION_TIME, AnimationTime))
#define ANIMATION_TIME_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), TYPE_ANIMATION_TIME, AnimationTimeClass))
#define IS_ANIMATION_TIME(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), TYPE_ANIMATION_TIME))
#define IS_ANIMATION_TIME_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), TYPE_ANIMATION_TIME))
#define ANIMATION_TIME_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), TYPE_ANIMATION_TIME, AnimationTimeClass))

typedef struct _AnimationTime AnimationTime;
typedef struct _AnimationTimeClass AnimationTimeClass;

#define TYPE_ANIMATION (animation_get_type ())
#define ANIMATION(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), TYPE_ANIMATION, Animation))
#define ANIMATION_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), TYPE_ANIMATION, AnimationClass))
#define IS_ANIMATION(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), TYPE_ANIMATION))
#define IS_ANIMATION_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), TYPE_ANIMATION))
#define ANIMATION_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), TYPE_ANIMATION, AnimationClass))

typedef struct _Animation Animation;
typedef struct _AnimationClass AnimationClass;
typedef struct _AnimationPrivate AnimationPrivate;
typedef struct _AnimationTimePrivate AnimationTimePrivate;

#define TYPE_RESIZE_STYLE (resize_style_get_type ())

#define TYPE_CONTROL (control_get_type ())
#define CONTROL(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), TYPE_CONTROL, Control))
#define CONTROL_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), TYPE_CONTROL, ControlClass))
#define IS_CONTROL(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), TYPE_CONTROL))
#define IS_CONTROL_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), TYPE_CONTROL))
#define CONTROL_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), TYPE_CONTROL, ControlClass))

typedef struct _Control Control;
typedef struct _ControlClass ControlClass;
typedef struct _ControlPrivate ControlPrivate;

#define TYPE_END_CONTROL (end_control_get_type ())
#define END_CONTROL(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), TYPE_END_CONTROL, EndControl))
#define END_CONTROL_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), TYPE_END_CONTROL, EndControlClass))
#define IS_END_CONTROL(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), TYPE_END_CONTROL))
#define IS_END_CONTROL_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), TYPE_END_CONTROL))
#define END_CONTROL_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), TYPE_END_CONTROL, EndControlClass))

typedef struct _EndControl EndControl;
typedef struct _EndControlClass EndControlClass;
typedef struct _EndControlPrivate EndControlPrivate;

#define TYPE_MAIN_VIEW (main_view_get_type ())
#define MAIN_VIEW(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), TYPE_MAIN_VIEW, MainView))
#define MAIN_VIEW_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), TYPE_MAIN_VIEW, MainViewClass))
#define IS_MAIN_VIEW(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), TYPE_MAIN_VIEW))
#define IS_MAIN_VIEW_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), TYPE_MAIN_VIEW))
#define MAIN_VIEW_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), TYPE_MAIN_VIEW, MainViewClass))

typedef struct _MainView MainView;
typedef struct _MainViewClass MainViewClass;
typedef struct _MainViewPrivate MainViewPrivate;
typedef struct _MouseEventArgsPrivate MouseEventArgsPrivate;

#define MOUSE_EVENT_ARGS_TYPE_BUTTON (mouse_event_args_button_get_type ())

#define TYPE_MOUSE_REFERENCE (mouse_reference_get_type ())
#define MOUSE_REFERENCE(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), TYPE_MOUSE_REFERENCE, MouseReference))
#define MOUSE_REFERENCE_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), TYPE_MOUSE_REFERENCE, MouseReferenceClass))
#define IS_MOUSE_REFERENCE(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), TYPE_MOUSE_REFERENCE))
#define IS_MOUSE_REFERENCE_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), TYPE_MOUSE_REFERENCE))
#define MOUSE_REFERENCE_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), TYPE_MOUSE_REFERENCE, MouseReferenceClass))

typedef struct _MouseReference MouseReference;
typedef struct _MouseReferenceClass MouseReferenceClass;
typedef struct _MouseMoveArgsPrivate MouseMoveArgsPrivate;
typedef struct _MouseReferencePrivate MouseReferencePrivate;
typedef struct _KeyArgsPrivate KeyArgsPrivate;
typedef struct _TextInputArgsPrivate TextInputArgsPrivate;
typedef struct _TextEditArgsPrivate TextEditArgsPrivate;
typedef struct _DeltaArgsPrivate DeltaArgsPrivate;
typedef struct _RenderWindowPrivate RenderWindowPrivate;

#define TYPE_SDL_WINDOW_TARGET (sdl_window_target_get_type ())
#define SDL_WINDOW_TARGET(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), TYPE_SDL_WINDOW_TARGET, SDLWindowTarget))
#define SDL_WINDOW_TARGET_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), TYPE_SDL_WINDOW_TARGET, SDLWindowTargetClass))
#define IS_SDL_WINDOW_TARGET(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), TYPE_SDL_WINDOW_TARGET))
#define IS_SDL_WINDOW_TARGET_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), TYPE_SDL_WINDOW_TARGET))
#define SDL_WINDOW_TARGET_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), TYPE_SDL_WINDOW_TARGET, SDLWindowTargetClass))

typedef struct _SDLWindowTarget SDLWindowTarget;
typedef struct _SDLWindowTargetClass SDLWindowTargetClass;
typedef struct _SDLWindowTargetPrivate SDLWindowTargetPrivate;

#define TYPE_RESET_CONTAINER (reset_container_get_type ())
#define RESET_CONTAINER(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), TYPE_RESET_CONTAINER, ResetContainer))
#define RESET_CONTAINER_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), TYPE_RESET_CONTAINER, ResetContainerClass))
#define IS_RESET_CONTAINER(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), TYPE_RESET_CONTAINER))
#define IS_RESET_CONTAINER_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), TYPE_RESET_CONTAINER))
#define RESET_CONTAINER_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), TYPE_RESET_CONTAINER, ResetContainerClass))

typedef struct _ResetContainer ResetContainer;
typedef struct _ResetContainerClass ResetContainerClass;
typedef struct _ResetContainerPrivate ResetContainerPrivate;

#define TYPE_VIEW3_D (view3_d_get_type ())
#define VIEW3_D(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), TYPE_VIEW3_D, View3D))
#define VIEW3_D_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), TYPE_VIEW3_D, View3DClass))
#define IS_VIEW3_D(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), TYPE_VIEW3_D))
#define IS_VIEW3_D_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), TYPE_VIEW3_D))
#define VIEW3_D_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), TYPE_VIEW3_D, View3DClass))

typedef struct _View3D View3D;
typedef struct _View3DClass View3DClass;
typedef struct _View3DPrivate View3DPrivate;

#define TYPE_LABEL_CONTROL (label_control_get_type ())
#define LABEL_CONTROL(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), TYPE_LABEL_CONTROL, LabelControl))
#define LABEL_CONTROL_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), TYPE_LABEL_CONTROL, LabelControlClass))
#define IS_LABEL_CONTROL(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), TYPE_LABEL_CONTROL))
#define IS_LABEL_CONTROL_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), TYPE_LABEL_CONTROL))
#define LABEL_CONTROL_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), TYPE_LABEL_CONTROL, LabelControlClass))

typedef struct _LabelControl LabelControl;
typedef struct _LabelControlClass LabelControlClass;
typedef struct _LabelControlPrivate LabelControlPrivate;

#define TYPE_LINE_CONTROL (line_control_get_type ())
#define LINE_CONTROL(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), TYPE_LINE_CONTROL, LineControl))
#define LINE_CONTROL_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), TYPE_LINE_CONTROL, LineControlClass))
#define IS_LINE_CONTROL(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), TYPE_LINE_CONTROL))
#define IS_LINE_CONTROL_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), TYPE_LINE_CONTROL))
#define LINE_CONTROL_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), TYPE_LINE_CONTROL, LineControlClass))

typedef struct _LineControl LineControl;
typedef struct _LineControlClass LineControlClass;
typedef struct _LineControlPrivate LineControlPrivate;

#define TYPE_LIST_CONTROL (list_control_get_type ())
#define LIST_CONTROL(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), TYPE_LIST_CONTROL, ListControl))
#define LIST_CONTROL_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), TYPE_LIST_CONTROL, ListControlClass))
#define IS_LIST_CONTROL(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), TYPE_LIST_CONTROL))
#define IS_LIST_CONTROL_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), TYPE_LIST_CONTROL))
#define LIST_CONTROL_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), TYPE_LIST_CONTROL, ListControlClass))

typedef struct _ListControl ListControl;
typedef struct _ListControlClass ListControlClass;
typedef struct _ListControlPrivate ListControlPrivate;

#define TYPE_LIST_COLUMN_INFO (list_column_info_get_type ())
#define LIST_COLUMN_INFO(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), TYPE_LIST_COLUMN_INFO, ListColumnInfo))
#define LIST_COLUMN_INFO_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), TYPE_LIST_COLUMN_INFO, ListColumnInfoClass))
#define IS_LIST_COLUMN_INFO(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), TYPE_LIST_COLUMN_INFO))
#define IS_LIST_COLUMN_INFO_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), TYPE_LIST_COLUMN_INFO))
#define LIST_COLUMN_INFO_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), TYPE_LIST_COLUMN_INFO, ListColumnInfoClass))

typedef struct _ListColumnInfo ListColumnInfo;
typedef struct _ListColumnInfoClass ListColumnInfoClass;
typedef struct _ListColumnInfoPrivate ListColumnInfoPrivate;

#define TYPE_LIST_CELL_STYLE (list_cell_style_get_type ())
#define LIST_CELL_STYLE(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), TYPE_LIST_CELL_STYLE, ListCellStyle))
#define LIST_CELL_STYLE_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), TYPE_LIST_CELL_STYLE, ListCellStyleClass))
#define IS_LIST_CELL_STYLE(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), TYPE_LIST_CELL_STYLE))
#define IS_LIST_CELL_STYLE_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), TYPE_LIST_CELL_STYLE))
#define LIST_CELL_STYLE_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), TYPE_LIST_CELL_STYLE, ListCellStyleClass))

typedef struct _ListCellStyle ListCellStyle;
typedef struct _ListCellStyleClass ListCellStyleClass;
typedef struct _ListCellStylePrivate ListCellStylePrivate;

#define TYPE_RECTANGLE_CONTROL (rectangle_control_get_type ())
#define RECTANGLE_CONTROL(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), TYPE_RECTANGLE_CONTROL, RectangleControl))
#define RECTANGLE_CONTROL_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), TYPE_RECTANGLE_CONTROL, RectangleControlClass))
#define IS_RECTANGLE_CONTROL(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), TYPE_RECTANGLE_CONTROL))
#define IS_RECTANGLE_CONTROL_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), TYPE_RECTANGLE_CONTROL))
#define RECTANGLE_CONTROL_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), TYPE_RECTANGLE_CONTROL, RectangleControlClass))

typedef struct _RectangleControl RectangleControl;
typedef struct _RectangleControlClass RectangleControlClass;
typedef struct _RectangleControlPrivate RectangleControlPrivate;

#define TYPE_SCROLL_BAR_CONTROL (scroll_bar_control_get_type ())
#define SCROLL_BAR_CONTROL(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), TYPE_SCROLL_BAR_CONTROL, ScrollBarControl))
#define SCROLL_BAR_CONTROL_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), TYPE_SCROLL_BAR_CONTROL, ScrollBarControlClass))
#define IS_SCROLL_BAR_CONTROL(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), TYPE_SCROLL_BAR_CONTROL))
#define IS_SCROLL_BAR_CONTROL_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), TYPE_SCROLL_BAR_CONTROL))
#define SCROLL_BAR_CONTROL_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), TYPE_SCROLL_BAR_CONTROL, ScrollBarControlClass))

typedef struct _ScrollBarControl ScrollBarControl;
typedef struct _ScrollBarControlClass ScrollBarControlClass;
typedef struct _ScrollBarControlPrivate ScrollBarControlPrivate;

#define TYPE_SIZING_CONTROL (sizing_control_get_type ())
#define SIZING_CONTROL(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), TYPE_SIZING_CONTROL, SizingControl))
#define SIZING_CONTROL_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), TYPE_SIZING_CONTROL, SizingControlClass))
#define IS_SIZING_CONTROL(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), TYPE_SIZING_CONTROL))
#define IS_SIZING_CONTROL_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), TYPE_SIZING_CONTROL))
#define SIZING_CONTROL_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), TYPE_SIZING_CONTROL, SizingControlClass))

typedef struct _SizingControl SizingControl;
typedef struct _SizingControlClass SizingControlClass;
typedef struct _SizingControlPrivate SizingControlPrivate;

#define TYPE_SIZING_STYLE (sizing_style_get_type ())

#define TYPE_TEXT_INPUT_CONTROL (text_input_control_get_type ())
#define TEXT_INPUT_CONTROL(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), TYPE_TEXT_INPUT_CONTROL, TextInputControl))
#define TEXT_INPUT_CONTROL_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), TYPE_TEXT_INPUT_CONTROL, TextInputControlClass))
#define IS_TEXT_INPUT_CONTROL(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), TYPE_TEXT_INPUT_CONTROL))
#define IS_TEXT_INPUT_CONTROL_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), TYPE_TEXT_INPUT_CONTROL))
#define TEXT_INPUT_CONTROL_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), TYPE_TEXT_INPUT_CONTROL, TextInputControlClass))

typedef struct _TextInputControl TextInputControl;
typedef struct _TextInputControlClass TextInputControlClass;
typedef struct _TextInputControlPrivate TextInputControlPrivate;

struct _EngineEngine {
	GObject parent_instance;
	EngineEnginePrivate * priv;
};

struct _EngineEngineClass {
	GObjectClass parent_class;
	gboolean (*init) (EngineEngine* self, const gchar* window_name, gint window_width, gint window_height, gint multisampling, gboolean fullscreen);
	void (*stop) (EngineEngine* self);
	void (*quit) (EngineEngine* self);
};

typedef enum  {
	CURSOR_TYPE_UNDEFINED,
	CURSOR_TYPE_NORMAL,
	CURSOR_TYPE_HOVER,
	CURSOR_TYPE_CARET
} CursorType;

struct _Size2i {
	gint width;
	gint height;
};

struct _IWindowTargetIface {
	GTypeInterface parent_iface;
	void (*swap) (IWindowTarget* self);
	void (*pump_events) (IWindowTarget* self);
	void (*set_icon) (IWindowTarget* self, const gchar* icon);
	void (*set_cursor_type) (IWindowTarget* self, CursorType type);
	void (*set_cursor_hidden) (IWindowTarget* self, gboolean hidden);
	void (*set_cursor_position) (IWindowTarget* self, gint x, gint y);
	gchar* (*get_clipboard_text) (IWindowTarget* self);
	void (*set_clipboard_text) (IWindowTarget* self, const gchar* text);
	void (*start_text_input) (IWindowTarget* self);
	void (*stop_text_input) (IWindowTarget* self);
	gboolean (*get_fullscreen) (IWindowTarget* self);
	void (*set_fullscreen) (IWindowTarget* self, gboolean value);
	void (*get_size) (IWindowTarget* self, Size2i * value);
	void (*set_size) (IWindowTarget* self, Size2i * value);
};

struct _EngineSDLGLEngine {
	EngineEngine parent_instance;
	EngineSDLGLEnginePrivate * priv;
};

struct _EngineSDLGLEngineClass {
	EngineEngineClass parent_class;
};

struct _EngineLog {
	GTypeInstance parent_instance;
	volatile int ref_count;
	EngineLogPrivate * priv;
};

struct _EngineLogClass {
	GTypeClass parent_class;
	void (*finalize) (EngineLog *self);
};

typedef enum  {
	ENGINE_LOG_TYPE_ENGINE,
	ENGINE_LOG_TYPE_NETWORK,
	ENGINE_LOG_TYPE_RENDERING,
	ENGINE_LOG_TYPE_DEBUG
} EngineLogType;

struct _LogCallback {
	GTypeInstance parent_instance;
	volatile int ref_count;
	LogCallbackPrivate * priv;
};

struct _LogCallbackClass {
	GTypeClass parent_class;
	void (*finalize) (LogCallback *self);
};

struct _AudioPlayer {
	GTypeInstance parent_instance;
	volatile int ref_count;
	AudioPlayerPrivate * priv;
};

struct _AudioPlayerClass {
	GTypeClass parent_class;
	void (*finalize) (AudioPlayer *self);
};

struct _Sound {
	GTypeInstance parent_instance;
	volatile int ref_count;
	SoundPrivate * priv;
};

struct _SoundClass {
	GTypeClass parent_class;
	void (*finalize) (Sound *self);
};

struct _Music {
	GObject parent_instance;
	MusicPrivate * priv;
};

struct _MusicClass {
	GObjectClass parent_class;
};

struct _FileLoader {
	GTypeInstance parent_instance;
	volatile int ref_count;
	FileLoaderPrivate * priv;
};

struct _FileLoaderClass {
	GTypeClass parent_class;
	void (*finalize) (FileLoader *self);
};

struct _FileWriter {
	GTypeInstance parent_instance;
	volatile int ref_count;
	FileWriterPrivate * priv;
};

struct _FileWriterClass {
	GTypeClass parent_class;
	void (*finalize) (FileWriter *self);
};

struct _ObjParser {
	GTypeInstance parent_instance;
	volatile int ref_count;
	ObjParserPrivate * priv;
};

struct _ObjParserClass {
	GTypeClass parent_class;
	void (*finalize) (ObjParser *self);
};

struct _ModelVertex {
	gfloat x;
	gfloat y;
	gfloat z;
	gfloat w;
};

struct _ModelUV {
	gfloat u;
	gfloat v;
	gfloat w;
};

struct _ModelNormal {
	gfloat i;
	gfloat j;
	gfloat k;
};

struct _GeometryData {
	GTypeInstance parent_instance;
	volatile int ref_count;
	GeometryDataPrivate * priv;
};

struct _GeometryDataClass {
	GTypeClass parent_class;
	void (*finalize) (GeometryData *self);
};

struct _ModelData {
	GTypeInstance parent_instance;
	volatile int ref_count;
	ModelDataPrivate * priv;
};

struct _ModelDataClass {
	GTypeClass parent_class;
	void (*finalize) (ModelData *self);
};

struct _ModelTriangle {
	ModelVertex vertex_a;
	ModelVertex vertex_b;
	ModelVertex vertex_c;
	ModelUV uv_a;
	ModelUV uv_b;
	ModelUV uv_c;
	ModelNormal normal_a;
	ModelNormal normal_b;
	ModelNormal normal_c;
	gboolean has_uv;
	gboolean has_normal;
};

struct _ModelPoint {
	ModelVertex vertex;
	ModelUV uv;
	ModelNormal normal;
};

struct _Vec3 {
	gfloat x;
	gfloat y;
	gfloat z;
};

struct _MaterialData {
	GTypeInstance parent_instance;
	volatile int ref_count;
	MaterialDataPrivate * priv;
};

struct _MaterialDataClass {
	GTypeClass parent_class;
	void (*finalize) (MaterialData *self);
};

typedef enum  {
	ILLUMINATION_MODEL_COLOR_ON_AMBIENT_OFF = 0,
	ILLUMINATION_MODEL_COLOR_ON_AMBIENT_ON = 1,
	ILLUMINATION_MODEL_HIGHLIGHT_ON = 2
} IlluminationModel;

struct _Calculations {
	GTypeInstance parent_instance;
	volatile int ref_count;
	CalculationsPrivate * priv;
};

struct _CalculationsClass {
	GTypeClass parent_class;
	void (*finalize) (Calculations *self);
};

struct _Vec2i {
	gint x;
	gint y;
};

struct _Vec2 {
	gfloat x;
	gfloat y;
};

struct _Size2 {
	gfloat width;
	gfloat height;
};

struct _DeltaTimer {
	GTypeInstance parent_instance;
	volatile int ref_count;
	DeltaTimerPrivate * priv;
};

struct _DeltaTimerClass {
	GTypeClass parent_class;
	void (*finalize) (DeltaTimer *self);
};

struct _EventTimer {
	GTypeInstance parent_instance;
	volatile int ref_count;
	EventTimerPrivate * priv;
};

struct _EventTimerClass {
	GTypeClass parent_class;
	void (*finalize) (EventTimer *self);
};

struct _Helper {
	GTypeInstance parent_instance;
	volatile int ref_count;
	HelperPrivate * priv;
};

struct _HelperClass {
	GTypeClass parent_class;
	void (*finalize) (Helper *self);
};

struct _ImageLoader {
	GTypeInstance parent_instance;
	volatile int ref_count;
	ImageLoaderPrivate * priv;
};

struct _ImageLoaderClass {
	GTypeClass parent_class;
	void (*finalize) (ImageLoader *self);
};

struct _ImageData {
	GTypeInstance parent_instance;
	volatile int ref_count;
	ImageDataPrivate * priv;
};

struct _ImageDataClass {
	GTypeClass parent_class;
	void (*finalize) (ImageData *self);
};

struct _ImageLoadWrap {
	GObject parent_instance;
	ImageLoadWrapPrivate * priv;
};

struct _ImageLoadWrapClass {
	GObjectClass parent_class;
};

typedef enum  {
	SCAN_CODE_UNKNOWN = 0,
	SCAN_CODE_A = 4,
	SCAN_CODE_B = 5,
	SCAN_CODE_C = 6,
	SCAN_CODE_D = 7,
	SCAN_CODE_E = 8,
	SCAN_CODE_F = 9,
	SCAN_CODE_G = 10,
	SCAN_CODE_H = 11,
	SCAN_CODE_I = 12,
	SCAN_CODE_J = 13,
	SCAN_CODE_K = 14,
	SCAN_CODE_L = 15,
	SCAN_CODE_M = 16,
	SCAN_CODE_N = 17,
	SCAN_CODE_O = 18,
	SCAN_CODE_P = 19,
	SCAN_CODE_Q = 20,
	SCAN_CODE_R = 21,
	SCAN_CODE_S = 22,
	SCAN_CODE_T = 23,
	SCAN_CODE_U = 24,
	SCAN_CODE_V = 25,
	SCAN_CODE_W = 26,
	SCAN_CODE_X = 27,
	SCAN_CODE_Y = 28,
	SCAN_CODE_Z = 29,
	SCAN_CODE_NUM_1 = 30,
	SCAN_CODE_NUM_2 = 31,
	SCAN_CODE_NUM_3 = 32,
	SCAN_CODE_NUM_4 = 33,
	SCAN_CODE_NUM_5 = 34,
	SCAN_CODE_NUM_6 = 35,
	SCAN_CODE_NUM_7 = 36,
	SCAN_CODE_NUM_8 = 37,
	SCAN_CODE_NUM_9 = 38,
	SCAN_CODE_NUM_0 = 39,
	SCAN_CODE_RETURN = 40,
	SCAN_CODE_ESCAPE = 41,
	SCAN_CODE_BACKSPACE = 42,
	SCAN_CODE_TAB = 43,
	SCAN_CODE_SPACE = 44,
	SCAN_CODE_MINUS = 45,
	SCAN_CODE_EQUALS = 46,
	SCAN_CODE_LEFTBRACKET = 47,
	SCAN_CODE_RIGHTBRACKET = 48,
	SCAN_CODE_BACKSLASH = 49,
	SCAN_CODE_NONUSHASH = 50,
	SCAN_CODE_SEMICOLON = 51,
	SCAN_CODE_APOSTROPHE = 52,
	SCAN_CODE_GRAVE = 53,
	SCAN_CODE_COMMA = 54,
	SCAN_CODE_PERIOD = 55,
	SCAN_CODE_SLASH = 56,
	SCAN_CODE_CAPSLOCK = 57,
	SCAN_CODE_F1 = 58,
	SCAN_CODE_F2 = 59,
	SCAN_CODE_F3 = 60,
	SCAN_CODE_F4 = 61,
	SCAN_CODE_F5 = 62,
	SCAN_CODE_F6 = 63,
	SCAN_CODE_F7 = 64,
	SCAN_CODE_F8 = 65,
	SCAN_CODE_F9 = 66,
	SCAN_CODE_F10 = 67,
	SCAN_CODE_F11 = 68,
	SCAN_CODE_F12 = 69,
	SCAN_CODE_PRINTSCREEN = 70,
	SCAN_CODE_SCROLLLOCK = 71,
	SCAN_CODE_PAUSE = 72,
	SCAN_CODE_INSERT = 73,
	SCAN_CODE_HOME = 74,
	SCAN_CODE_PAGEUP = 75,
	SCAN_CODE_DELETE = 76,
	SCAN_CODE_END = 77,
	SCAN_CODE_PAGEDOWN = 78,
	SCAN_CODE_RIGHT = 79,
	SCAN_CODE_LEFT = 80,
	SCAN_CODE_DOWN = 81,
	SCAN_CODE_UP = 82,
	SCAN_CODE_NUMLOCKCLEAR = 83,
	SCAN_CODE_KP_DIVIDE = 84,
	SCAN_CODE_KP_MULTIPLY = 85,
	SCAN_CODE_KP_MINUS = 86,
	SCAN_CODE_KP_PLUS = 87,
	SCAN_CODE_KP_ENTER = 88,
	SCAN_CODE_KP_1 = 89,
	SCAN_CODE_KP_2 = 90,
	SCAN_CODE_KP_3 = 91,
	SCAN_CODE_KP_4 = 92,
	SCAN_CODE_KP_5 = 93,
	SCAN_CODE_KP_6 = 94,
	SCAN_CODE_KP_7 = 95,
	SCAN_CODE_KP_8 = 96,
	SCAN_CODE_KP_9 = 97,
	SCAN_CODE_KP_0 = 98,
	SCAN_CODE_KP_PERIOD = 99,
	SCAN_CODE_NONUSBACKSLASH = 100,
	SCAN_CODE_APPLICATION = 101,
	SCAN_CODE_POWER = 102,
	SCAN_CODE_KP_EQUALS = 103,
	SCAN_CODE_F13 = 104,
	SCAN_CODE_F14 = 105,
	SCAN_CODE_F15 = 106,
	SCAN_CODE_F16 = 107,
	SCAN_CODE_F17 = 108,
	SCAN_CODE_F18 = 109,
	SCAN_CODE_F19 = 110,
	SCAN_CODE_F20 = 111,
	SCAN_CODE_F21 = 112,
	SCAN_CODE_F22 = 113,
	SCAN_CODE_F23 = 114,
	SCAN_CODE_F24 = 115,
	SCAN_CODE_EXECUTE = 116,
	SCAN_CODE_HELP = 117,
	SCAN_CODE_MENU = 118,
	SCAN_CODE_SELECT = 119,
	SCAN_CODE_STOP = 120,
	SCAN_CODE_AGAIN = 121,
	SCAN_CODE_UNDO = 122,
	SCAN_CODE_CUT = 123,
	SCAN_CODE_COPY = 124,
	SCAN_CODE_PASTE = 125,
	SCAN_CODE_FIND = 126,
	SCAN_CODE_MUTE = 127,
	SCAN_CODE_VOLUMEUP = 128,
	SCAN_CODE_VOLUMEDOWN = 129,
	SCAN_CODE_LOCKINGCAPSLOCK = 130,
	SCAN_CODE_LOCKINGNUMLOCK = 131,
	SCAN_CODE_LOCKINGSCROLLLOCK = 132,
	SCAN_CODE_KP_COMMA = 133,
	SCAN_CODE_KP_EQUALSAS400 = 134,
	SCAN_CODE_INTERNATIONAL1 = 135,
	SCAN_CODE_INTERNATIONAL2 = 136,
	SCAN_CODE_INTERNATIONAL3 = 137,
	SCAN_CODE_INTERNATIONAL4 = 138,
	SCAN_CODE_INTERNATIONAL5 = 139,
	SCAN_CODE_INTERNATIONAL6 = 140,
	SCAN_CODE_INTERNATIONAL7 = 141,
	SCAN_CODE_INTERNATIONAL8 = 142,
	SCAN_CODE_INTERNATIONAL9 = 143,
	SCAN_CODE_LANG1 = 144,
	SCAN_CODE_LANG2 = 145,
	SCAN_CODE_LANG3 = 146,
	SCAN_CODE_LANG4 = 147,
	SCAN_CODE_LANG5 = 148,
	SCAN_CODE_LANG6 = 149,
	SCAN_CODE_LANG7 = 150,
	SCAN_CODE_LANG8 = 151,
	SCAN_CODE_LANG9 = 152,
	SCAN_CODE_ALTERASE = 153,
	SCAN_CODE_SYSREQ = 154,
	SCAN_CODE_CANCEL = 155,
	SCAN_CODE_CLEAR = 156,
	SCAN_CODE_PRIOR = 157,
	SCAN_CODE_RETURN2 = 158,
	SCAN_CODE_SEPARATOR = 159,
	SCAN_CODE_OUT = 160,
	SCAN_CODE_OPER = 161,
	SCAN_CODE_CLEARAGAIN = 162,
	SCAN_CODE_CRSEL = 163,
	SCAN_CODE_EXSEL = 164,
	SCAN_CODE_KP_00 = 176,
	SCAN_CODE_KP_000 = 177,
	SCAN_CODE_THOUSANDSSEPARATOR = 178,
	SCAN_CODE_DECIMALSEPARATOR = 179,
	SCAN_CODE_CURRENCYUNIT = 180,
	SCAN_CODE_CURRENCYSUBUNIT = 181,
	SCAN_CODE_KP_LEFTPAREN = 182,
	SCAN_CODE_KP_RIGHTPAREN = 183,
	SCAN_CODE_KP_LEFTBRACE = 184,
	SCAN_CODE_KP_RIGHTBRACE = 185,
	SCAN_CODE_KP_TAB = 186,
	SCAN_CODE_KP_BACKSPACE = 187,
	SCAN_CODE_KP_A = 188,
	SCAN_CODE_KP_B = 189,
	SCAN_CODE_KP_C = 190,
	SCAN_CODE_KP_D = 191,
	SCAN_CODE_KP_E = 192,
	SCAN_CODE_KP_F = 193,
	SCAN_CODE_KP_XOR = 194,
	SCAN_CODE_KP_POWER = 195,
	SCAN_CODE_KP_PERCENT = 196,
	SCAN_CODE_KP_LESS = 197,
	SCAN_CODE_KP_GREATER = 198,
	SCAN_CODE_KP_AMPERSAND = 199,
	SCAN_CODE_KP_DBLAMPERSAND = 200,
	SCAN_CODE_KP_VERTICALBAR = 201,
	SCAN_CODE_KP_DBLVERTICALBAR = 202,
	SCAN_CODE_KP_COLON = 203,
	SCAN_CODE_KP_HASH = 204,
	SCAN_CODE_KP_SPACE = 205,
	SCAN_CODE_KP_AT = 206,
	SCAN_CODE_KP_EXCLAM = 207,
	SCAN_CODE_KP_MEMSTORE = 208,
	SCAN_CODE_KP_MEMRECALL = 209,
	SCAN_CODE_KP_MEMCLEAR = 210,
	SCAN_CODE_KP_MEMADD = 211,
	SCAN_CODE_KP_MEMSUBTRACT = 212,
	SCAN_CODE_KP_MEMMULTIPLY = 213,
	SCAN_CODE_KP_MEMDIVIDE = 214,
	SCAN_CODE_KP_PLUSMINUS = 215,
	SCAN_CODE_KP_CLEAR = 216,
	SCAN_CODE_KP_CLEARENTRY = 217,
	SCAN_CODE_KP_BINARY = 218,
	SCAN_CODE_KP_OCTAL = 219,
	SCAN_CODE_KP_DECIMAL = 220,
	SCAN_CODE_KP_HEXADECIMAL = 221,
	SCAN_CODE_LCTRL = 224,
	SCAN_CODE_LSHIFT = 225,
	SCAN_CODE_LALT = 226,
	SCAN_CODE_LGUI = 227,
	SCAN_CODE_RCTRL = 228,
	SCAN_CODE_RSHIFT = 229,
	SCAN_CODE_RALT = 230,
	SCAN_CODE_RGUI = 231,
	SCAN_CODE_MODE = 257,
	SCAN_CODE_AUDIONEXT = 258,
	SCAN_CODE_AUDIOPREV = 259,
	SCAN_CODE_AUDIOSTOP = 260,
	SCAN_CODE_AUDIOPLAY = 261,
	SCAN_CODE_AUDIOMUTE = 262,
	SCAN_CODE_MEDIASELECT = 263,
	SCAN_CODE_WWW = 264,
	SCAN_CODE_MAIL = 265,
	SCAN_CODE_CALCULATOR = 266,
	SCAN_CODE_COMPUTER = 267,
	SCAN_CODE_AC_SEARCH = 268,
	SCAN_CODE_AC_HOME = 269,
	SCAN_CODE_AC_BACK = 270,
	SCAN_CODE_AC_FORWARD = 271,
	SCAN_CODE_AC_STOP = 272,
	SCAN_CODE_AC_REFRESH = 273,
	SCAN_CODE_AC_BOOKMARKS = 274,
	SCAN_CODE_BRIGHTNESSDOWN = 275,
	SCAN_CODE_BRIGHTNESSUP = 276,
	SCAN_CODE_DISPLAYSWITCH = 277,
	SCAN_CODE_KBDILLUMTOGGLE = 278,
	SCAN_CODE_KBDILLUMDOWN = 279,
	SCAN_CODE_KBDILLUMUP = 280,
	SCAN_CODE_EJECT = 281,
	SCAN_CODE_SLEEP = 282,
	SCAN_CODE_APP1 = 283,
	SCAN_CODE_APP2 = 284,
	SCAN_CODE_NUM_SCANCODES = 512
} ScanCode;

typedef enum  {
	MODIFIER_NONE = 0x0000,
	MODIFIER_LSHIFT = 0x0001,
	MODIFIER_RSHIFT = 0x0002,
	MODIFIER_LCTRL = 0x0040,
	MODIFIER_RCTRL = 0x0080,
	MODIFIER_LALT = 0x0100,
	MODIFIER_RALT = 0x0200,
	MODIFIER_LGUI = 0x0400,
	MODIFIER_RGUI = 0x0800,
	MODIFIER_NUM = 0x1000,
	MODIFIER_CAPS = 0x2000,
	MODIFIER_MODE = 0x4000,
	MODIFIER_RESERVED = 0x8000
} Modifier;

typedef enum  {
	KEY_CODE_SCANCODE_MASK = 1 << 30,
	KEY_CODE_UNKNOWN = 0,
	KEY_CODE_RETURN = '\r',
	KEY_CODE_ESCAPE = 27,
	KEY_CODE_BACKSPACE = '\b',
	KEY_CODE_TAB = '\t',
	KEY_CODE_SPACE = ' ',
	KEY_CODE_EXCLAIM = '!',
	KEY_CODE_QUOTEDBL = '"',
	KEY_CODE_HASH = '#',
	KEY_CODE_PERCENT = '%',
	KEY_CODE_DOLLAR = '$',
	KEY_CODE_AMPERSAND = '&',
	KEY_CODE_QUOTE = '\'',
	KEY_CODE_LEFTPAREN = '(',
	KEY_CODE_RIGHTPAREN = ')',
	KEY_CODE_ASTERISK = '*',
	KEY_CODE_PLUS = '+',
	KEY_CODE_COMMA = ',',
	KEY_CODE_MINUS = '-',
	KEY_CODE_PERIOD = '.',
	KEY_CODE_SLASH = '/',
	KEY_CODE_NUM_0 = '0',
	KEY_CODE_NUM_1 = '1',
	KEY_CODE_NUM_2 = '2',
	KEY_CODE_NUM_3 = '3',
	KEY_CODE_NUM_4 = '4',
	KEY_CODE_NUM_5 = '5',
	KEY_CODE_NUM_6 = '6',
	KEY_CODE_NUM_7 = '7',
	KEY_CODE_NUM_8 = '8',
	KEY_CODE_NUM_9 = '9',
	KEY_CODE_COLON = ':',
	KEY_CODE_SEMICOLON = ';',
	KEY_CODE_LESS = '<',
	KEY_CODE_EQUALS = '=',
	KEY_CODE_GREATER = '>',
	KEY_CODE_QUESTION = '?',
	KEY_CODE_AT = '@',
	KEY_CODE_LEFTBRACKET = '[',
	KEY_CODE_BACKSLASH = '\\',
	KEY_CODE_RIGHTBRACKET = ']',
	KEY_CODE_CARET = '^',
	KEY_CODE_UNDERSCORE = '_',
	KEY_CODE_BACKQUOTE = '`',
	KEY_CODE_a = 'a',
	KEY_CODE_b = 'b',
	KEY_CODE_c = 'c',
	KEY_CODE_d = 'd',
	KEY_CODE_e = 'e',
	KEY_CODE_f = 'f',
	KEY_CODE_g = 'g',
	KEY_CODE_h = 'h',
	KEY_CODE_i = 'i',
	KEY_CODE_j = 'j',
	KEY_CODE_k = 'k',
	KEY_CODE_l = 'l',
	KEY_CODE_m = 'm',
	KEY_CODE_n = 'n',
	KEY_CODE_o = 'o',
	KEY_CODE_p = 'p',
	KEY_CODE_q = 'q',
	KEY_CODE_r = 'r',
	KEY_CODE_s = 's',
	KEY_CODE_t = 't',
	KEY_CODE_u = 'u',
	KEY_CODE_v = 'v',
	KEY_CODE_w = 'w',
	KEY_CODE_x = 'x',
	KEY_CODE_y = 'y',
	KEY_CODE_z = 'z',
	KEY_CODE_HOME = 74 | KEY_CODE_SCANCODE_MASK,
	KEY_CODE_DELETE = 127,
	KEY_CODE_END = 77 | KEY_CODE_SCANCODE_MASK,
	KEY_CODE_RIGHT = 79 | KEY_CODE_SCANCODE_MASK,
	KEY_CODE_LEFT = 80 | KEY_CODE_SCANCODE_MASK,
	KEY_CODE_DOWN = 81 | KEY_CODE_SCANCODE_MASK,
	KEY_CODE_UP = 82 | KEY_CODE_SCANCODE_MASK
} KeyCode;

struct _LabelLoader {
	GTypeInstance parent_instance;
	volatile int ref_count;
	LabelLoaderPrivate * priv;
};

struct _LabelLoaderClass {
	GTypeClass parent_class;
	void (*finalize) (LabelLoader *self);
};

struct _LabelInfo {
	GTypeInstance parent_instance;
	volatile int ref_count;
	LabelInfoPrivate * priv;
};

struct _LabelInfoClass {
	GTypeClass parent_class;
	void (*finalize) (LabelInfo *self);
};

struct _LabelBitmap {
	GTypeInstance parent_instance;
	volatile int ref_count;
	LabelBitmapPrivate * priv;
};

struct _LabelBitmapClass {
	GTypeClass parent_class;
	void (*finalize) (LabelBitmap *self);
};

struct _Networking {
	GObject parent_instance;
	NetworkingPrivate * priv;
};

struct _NetworkingClass {
	GObjectClass parent_class;
};

struct _MessageSignal {
	GTypeInstance parent_instance;
	volatile int ref_count;
	MessageSignalPrivate * priv;
};

struct _MessageSignalClass {
	GTypeClass parent_class;
	void (*finalize) (MessageSignal *self);
};

struct _Connection {
	GObject parent_instance;
	ConnectionPrivate * priv;
};

struct _ConnectionClass {
	GObjectClass parent_class;
};

struct _Message {
	GObject parent_instance;
	MessagePrivate * priv;
};

struct _MessageClass {
	GObjectClass parent_class;
};

struct _DataUInt {
	GTypeInstance parent_instance;
	volatile int ref_count;
	DataUIntPrivate * priv;
};

struct _DataUIntClass {
	GTypeClass parent_class;
	void (*finalize) (DataUInt *self);
};

typedef enum  {
	DATA_LENGTH_ERROR_OUT_OF_RANGE,
	DATA_LENGTH_ERROR_NEGATIVE_LENGTH
} DataLengthError;
#define DATA_LENGTH_ERROR data_length_error_quark ()
struct _Serializable {
	GObject parent_instance;
	SerializablePrivate * priv;
};

struct _SerializableClass {
	GObjectClass parent_class;
};

struct _SerializableSerializationContext {
	GTypeInstance parent_instance;
	volatile int ref_count;
	SerializableSerializationContextPrivate * priv;
};

struct _SerializableSerializationContextClass {
	GTypeClass parent_class;
	void (*finalize) (SerializableSerializationContext *self);
};

struct _SerializableList {
	Serializable parent_instance;
	SerializableListPrivate * priv;
};

struct _SerializableListClass {
	SerializableClass parent_class;
};

struct _ObjInt {
	Serializable parent_instance;
	ObjIntPrivate * priv;
};

struct _ObjIntClass {
	SerializableClass parent_class;
};

struct _Random {
	GTypeInstance parent_instance;
	volatile int ref_count;
	RandomPrivate * priv;
};

struct _RandomClass {
	GTypeClass parent_class;
	void (*finalize) (Random *self);
};

struct _Threading {
	GTypeInstance parent_instance;
	volatile int ref_count;
	ThreadingPrivate * priv;
};

struct _ThreadingClass {
	GTypeClass parent_class;
	void (*finalize) (Threading *self);
};

typedef void (*ThreadingDel0Arg) (void* user_data);
typedef void (*ThreadingDel1Arg) (GObject* arg1, void* user_data);
typedef void (*ThreadingDel2Arg) (GObject* arg1, GObject* arg2, void* user_data);
typedef void (*ThreadingDel3Arg) (GObject* arg1, GObject* arg2, GObject* arg3, void* user_data);
typedef void (*ThreadingDel4Arg) (GObject* arg1, GObject* arg2, GObject* arg3, GObject* arg4, void* user_data);
struct _Obj {
	Serializable parent_instance;
	ObjPrivate * priv;
	gpointer obj;
};

struct _ObjClass {
	SerializableClass parent_class;
};

struct _StepTimer {
	GTypeInstance parent_instance;
	volatile int ref_count;
	StepTimerPrivate * priv;
};

struct _StepTimerClass {
	GTypeClass parent_class;
	void (*finalize) (StepTimer *self);
};

struct _DelayTimer {
	GTypeInstance parent_instance;
	volatile int ref_count;
	DelayTimerPrivate * priv;
};

struct _DelayTimerClass {
	GTypeClass parent_class;
	void (*finalize) (DelayTimer *self);
};

struct _Color {
	gfloat r;
	gfloat g;
	gfloat b;
	gfloat a;
};

struct _Curve {
	GTypeInstance parent_instance;
	volatile int ref_count;
	CurvePrivate * priv;
};

struct _CurveClass {
	GTypeClass parent_class;
	void (*finalize) (Curve *self);
	gfloat (*map) (Curve* self, gfloat x);
};

struct _LinearCurve {
	Curve parent_instance;
	LinearCurvePrivate * priv;
};

struct _LinearCurveClass {
	CurveClass parent_class;
};

struct _SCurve {
	Curve parent_instance;
	SCurvePrivate * priv;
};

struct _SCurveClass {
	CurveClass parent_class;
};

struct _ExponentCurve {
	Curve parent_instance;
	ExponentCurvePrivate * priv;
};

struct _ExponentCurveClass {
	CurveClass parent_class;
};

struct _SmoothApproachCurve {
	Curve parent_instance;
	SmoothApproachCurvePrivate * priv;
};

struct _SmoothApproachCurveClass {
	CurveClass parent_class;
};

struct _Mat3 {
	GTypeInstance parent_instance;
	volatile int ref_count;
	Mat3Private * priv;
};

struct _Mat3Class {
	GTypeClass parent_class;
	void (*finalize) (Mat3 *self);
};

struct _Mat4 {
	GTypeInstance parent_instance;
	volatile int ref_count;
	Mat4Private * priv;
};

struct _Mat4Class {
	GTypeClass parent_class;
	void (*finalize) (Mat4 *self);
};

struct _Vec4 {
	gfloat x;
	gfloat y;
	gfloat z;
	gfloat w;
};

typedef enum  {
	ORIENTATION_VERTICAL,
	ORIENTATION_HORIZONTAL
} Orientation;

struct _Path3D {
	GTypeInstance parent_instance;
	volatile int ref_count;
	Path3DPrivate * priv;
};

struct _Path3DClass {
	GTypeClass parent_class;
	void (*finalize) (Path3D *self);
	void (*map) (Path3D* self, gfloat time, Vec3* result);
	void (*do_init) (Path3D* self);
};

struct _LinearPath3D {
	Path3D parent_instance;
	LinearPath3DPrivate * priv;
};

struct _LinearPath3DClass {
	Path3DClass parent_class;
};

struct _LinearizedPath3D {
	Path3D parent_instance;
	LinearizedPath3DPrivate * priv;
};

struct _LinearizedPath3DClass {
	Path3DClass parent_class;
};

struct _PathQuat {
	GTypeInstance parent_instance;
	volatile int ref_count;
	PathQuatPrivate * priv;
};

struct _PathQuatClass {
	GTypeClass parent_class;
	void (*finalize) (PathQuat *self);
	Quat* (*map) (PathQuat* self, gfloat time);
	void (*do_init) (PathQuat* self);
};

struct _LinearPathQuat {
	PathQuat parent_instance;
	LinearPathQuatPrivate * priv;
};

struct _LinearPathQuatClass {
	PathQuatClass parent_class;
};

struct _Quat {
	GTypeInstance parent_instance;
	volatile int ref_count;
	QuatPrivate * priv;
};

struct _QuatClass {
	GTypeClass parent_class;
	void (*finalize) (Quat *self);
};

struct _EngineRectangle {
	gfloat x;
	gfloat y;
	gfloat width;
	gfloat height;
};

struct _Transform {
	GTypeInstance parent_instance;
	volatile int ref_count;
	TransformPrivate * priv;
	Mat4* _matrix;
	Vec3 _position;
	Vec3 _scale;
	Quat* _rotation;
	Transform* _parent;
	Mat4* _parent_matrix;
	Mat4* _full_matrix;
};

struct _TransformClass {
	GTypeClass parent_class;
	void (*finalize) (Transform *self);
	Mat4* (*calculate_matrix) (Transform* self);
};

struct _CameraTransform {
	Transform parent_instance;
	CameraTransformPrivate * priv;
};

struct _CameraTransformClass {
	TransformClass parent_class;
};

struct _BasicGeometry {
	GTypeInstance parent_instance;
	volatile int ref_count;
	BasicGeometryPrivate * priv;
};

struct _BasicGeometryClass {
	GTypeClass parent_class;
	void (*finalize) (BasicGeometry *self);
};

struct _Camera {
	GTypeInstance parent_instance;
	volatile int ref_count;
	CameraPrivate * priv;
};

struct _CameraClass {
	GTypeClass parent_class;
	void (*finalize) (Camera *self);
};

struct _Container {
	GTypeInstance parent_instance;
	volatile int ref_count;
	ContainerPrivate * priv;
	GeeArrayList* children;
	RenderWindow* parent_window;
};

struct _ContainerClass {
	GTypeClass parent_class;
	void (*finalize) (Container *self);
	void (*render) (Container* self, RenderState* state, RenderScene2D* scene);
	void (*added) (Container* self);
	void (*removed) (Container* self);
	void (*resized) (Container* self);
	void (*do_render) (Container* self, RenderState* state, RenderScene2D* scene);
	void (*do_process) (Container* self, DeltaArgs* delta);
	void (*do_mouse_event) (Container* self, MouseEventArgs* mouse);
	void (*do_mouse_move) (Container* self, MouseMoveArgs* mouse);
	void (*do_key_press) (Container* self, KeyArgs* key);
	void (*do_text_input) (Container* self, TextInputArgs* text);
	void (*do_text_edit) (Container* self, TextEditArgs* text);
};

struct _View2D {
	Container parent_instance;
	View2DPrivate * priv;
};

struct _View2DClass {
	ContainerClass parent_class;
};

struct _DebugView {
	View2D parent_instance;
	DebugViewPrivate * priv;
};

struct _DebugViewClass {
	View2DClass parent_class;
};

struct _DebugInfo {
	GTypeInstance parent_instance;
	volatile int ref_count;
	DebugInfoPrivate * priv;
};

struct _DebugInfoClass {
	GTypeClass parent_class;
	void (*finalize) (DebugInfo *self);
};

struct _IModelResourceHandleIface {
	GTypeInterface parent_iface;
};

struct _ITextureResourceHandleIface {
	GTypeInterface parent_iface;
};

struct _ILabelResourceHandleIface {
	GTypeInterface parent_iface;
};

struct _LightSource {
	GTypeInstance parent_instance;
	volatile int ref_count;
	LightSourcePrivate * priv;
};

struct _LightSourceClass {
	GTypeClass parent_class;
	void (*finalize) (LightSource *self);
};

struct _IResource {
	GTypeInstance parent_instance;
	volatile int ref_count;
	IResourcePrivate * priv;
};

struct _IResourceClass {
	GTypeClass parent_class;
	void (*finalize) (IResource *self);
};

struct _Transformable3D {
	IResource parent_instance;
	Transformable3DPrivate * priv;
};

struct _Transformable3DClass {
	IResourceClass parent_class;
	Transformable3D* (*copy_transformable) (Transformable3D* self, Transform* transform);
};

struct _RenderGeometry3D {
	Transformable3D parent_instance;
	RenderGeometry3DPrivate * priv;
};

struct _RenderGeometry3DClass {
	Transformable3DClass parent_class;
};

struct _RenderMaterial {
	GTypeInstance parent_instance;
	volatile int ref_count;
	RenderMaterialPrivate * priv;
};

struct _RenderMaterialClass {
	GTypeClass parent_class;
	void (*finalize) (RenderMaterial *self);
};

typedef enum  {
	BLEND_TYPE_COLOR = 0,
	BLEND_TYPE_MATERIAL = 1,
	BLEND_TYPE_BLEND = 2,
	BLEND_TYPE_HYBRID = 3
} BlendType;

struct _RenderObject2D {
	GObject parent_instance;
	RenderObject2DPrivate * priv;
};

struct _RenderObject2DClass {
	GObjectClass parent_class;
	RenderObject2D* (*copy_new) (RenderObject2D* self);
};

struct _RenderImage2D {
	RenderObject2D parent_instance;
	RenderImage2DPrivate * priv;
};

struct _RenderImage2DClass {
	RenderObject2DClass parent_class;
};

struct _RenderLabel2D {
	RenderObject2D parent_instance;
	RenderLabel2DPrivate * priv;
};

struct _RenderLabel2DClass {
	RenderObject2DClass parent_class;
};

struct _RenderRectangle2D {
	RenderObject2D parent_instance;
	RenderRectangle2DPrivate * priv;
};

struct _RenderRectangle2DClass {
	RenderObject2DClass parent_class;
};

struct _RenderObject3D {
	Transformable3D parent_instance;
	RenderObject3DPrivate * priv;
};

struct _RenderObject3DClass {
	Transformable3DClass parent_class;
	RenderObject3D* (*copy_object) (RenderObject3D* self);
};

struct _RenderBody3D {
	RenderObject3D parent_instance;
	RenderBody3DPrivate * priv;
};

struct _RenderBody3DClass {
	RenderObject3DClass parent_class;
};

struct _RenderLabel3D {
	RenderObject3D parent_instance;
	RenderLabel3DPrivate * priv;
};

struct _RenderLabel3DClass {
	RenderObject3DClass parent_class;
};

struct _RenderScene {
	GObject parent_instance;
	RenderScenePrivate * priv;
};

struct _RenderSceneClass {
	GObjectClass parent_class;
};

struct _RenderScene2D {
	RenderScene parent_instance;
	RenderScene2DPrivate * priv;
};

struct _RenderScene2DClass {
	RenderSceneClass parent_class;
};

struct _RenderScene3D {
	RenderScene parent_instance;
	RenderScene3DPrivate * priv;
};

struct _RenderScene3DClass {
	RenderSceneClass parent_class;
};

struct _RenderState {
	GTypeInstance parent_instance;
	volatile int ref_count;
	RenderStatePrivate * priv;
};

struct _RenderStateClass {
	GTypeClass parent_class;
	void (*finalize) (RenderState *self);
};

struct _RenderTarget {
	GObject parent_instance;
	RenderTargetPrivate * priv;
	IWindowTarget* window;
	ResourceStore* store;
};

struct _RenderTargetClass {
	GObjectClass parent_class;
	void (*render) (RenderTarget* self, RenderState* state);
	gboolean (*renderer_init) (RenderTarget* self);
	void (*do_load_model) (RenderTarget* self, IModelResourceHandle* handle);
	void (*do_load_texture) (RenderTarget* self, ITextureResourceHandle* handle);
	void (*do_load_label) (RenderTarget* self, ILabelResourceHandle* handle, LabelBitmap* bitmap);
	void (*do_unload_model) (RenderTarget* self, IModelResourceHandle* handle);
	void (*do_unload_texture) (RenderTarget* self, ITextureResourceHandle* handle);
	void (*do_unload_label) (RenderTarget* self, ILabelResourceHandle* handle);
	IModelResourceHandle* (*init_model) (RenderTarget* self, InputResourceModel* model);
	ITextureResourceHandle* (*init_texture) (RenderTarget* self, InputResourceTexture* texture);
	RenderTargetLabelResourceHandle* (*init_label) (RenderTarget* self);
	void (*change_v_sync) (RenderTarget* self, gboolean v_sync);
	gboolean (*change_shader_3D) (RenderTarget* self, const gchar* name);
	gboolean (*change_shader_2D) (RenderTarget* self, const gchar* name);
	gchar** (*get_debug_strings) (RenderTarget* self, int* result_length1);
	void (*do_secondly) (RenderTarget* self);
};

struct _RenderTargetLabelResourceHandle {
	GObject parent_instance;
	RenderTargetLabelResourceHandlePrivate * priv;
};

struct _RenderTargetLabelResourceHandleClass {
	GObjectClass parent_class;
};

struct _ResourceStore {
	GTypeInstance parent_instance;
	volatile int ref_count;
	ResourceStorePrivate * priv;
};

struct _ResourceStoreClass {
	GTypeClass parent_class;
	void (*finalize) (ResourceStore *self);
};

struct _InputResourceModel {
	GTypeInstance parent_instance;
	volatile int ref_count;
	InputResourceModelPrivate * priv;
};

struct _InputResourceModelClass {
	GTypeClass parent_class;
	void (*finalize) (InputResourceModel *self);
};

struct _InputResourceTexture {
	GTypeInstance parent_instance;
	volatile int ref_count;
	InputResourceTexturePrivate * priv;
};

struct _InputResourceTextureClass {
	GTypeClass parent_class;
	void (*finalize) (InputResourceTexture *self);
};

struct _LabelResourceReference {
	GTypeInstance parent_instance;
	volatile int ref_count;
	LabelResourceReferencePrivate * priv;
};

struct _LabelResourceReferenceClass {
	GTypeClass parent_class;
	void (*finalize) (LabelResourceReference *self);
};

struct _RenderModel {
	IResource parent_instance;
	RenderModelPrivate * priv;
};

struct _RenderModelClass {
	IResourceClass parent_class;
};

struct _RenderTexture {
	IResource parent_instance;
	RenderTexturePrivate * priv;
};

struct _RenderTextureClass {
	IResourceClass parent_class;
};

struct _OpenGLFrameBuffer {
	GTypeInstance parent_instance;
	volatile int ref_count;
	OpenGLFrameBufferPrivate * priv;
};

struct _OpenGLFrameBufferClass {
	GTypeClass parent_class;
	void (*finalize) (OpenGLFrameBuffer *self);
};

struct _OpenGLRenderBuffer {
	GTypeInstance parent_instance;
	volatile int ref_count;
	OpenGLRenderBufferPrivate * priv;
};

struct _OpenGLRenderBufferClass {
	GTypeClass parent_class;
	void (*finalize) (OpenGLRenderBuffer *self);
};

struct _OpenGLRenderer {
	RenderTarget parent_instance;
	OpenGLRendererPrivate * priv;
};

struct _OpenGLRendererClass {
	RenderTargetClass parent_class;
};

struct _OpenGLShaderBuilder {
	GTypeInstance parent_instance;
	volatile int ref_count;
	OpenGLShaderBuilderPrivate * priv;
	gint version;
	OpenGLShaderDependencyTree* vertex_tree;
	OpenGLShaderDependencyTree* fragment_tree;
	OpenGLShaderFunction* vertex_main;
	OpenGLShaderFunction* fragment_main;
};

struct _OpenGLShaderBuilderClass {
	GTypeClass parent_class;
	void (*finalize) (OpenGLShaderBuilder *self);
};

struct _OpenGL2DShaderBuilder {
	OpenGLShaderBuilder parent_instance;
	OpenGL2DShaderBuilderPrivate * priv;
};

struct _OpenGL2DShaderBuilderClass {
	OpenGLShaderBuilderClass parent_class;
};

typedef enum  {
	OPEN_GL_SHADER_PRIMITIVE_TYPE_CUSTOM,
	OPEN_GL_SHADER_PRIMITIVE_TYPE_VOID,
	OPEN_GL_SHADER_PRIMITIVE_TYPE_BOOL,
	OPEN_GL_SHADER_PRIMITIVE_TYPE_INT,
	OPEN_GL_SHADER_PRIMITIVE_TYPE_FLOAT,
	OPEN_GL_SHADER_PRIMITIVE_TYPE_VEC2,
	OPEN_GL_SHADER_PRIMITIVE_TYPE_VEC3,
	OPEN_GL_SHADER_PRIMITIVE_TYPE_VEC4,
	OPEN_GL_SHADER_PRIMITIVE_TYPE_MAT3,
	OPEN_GL_SHADER_PRIMITIVE_TYPE_MAT4,
	OPEN_GL_SHADER_PRIMITIVE_TYPE_SAMPLER2D
} OpenGLShaderPrimitiveType;

typedef enum  {
	OPEN_GL_SHADER_PROPERTY_DIRECTION_NONE,
	OPEN_GL_SHADER_PROPERTY_DIRECTION_IN,
	OPEN_GL_SHADER_PROPERTY_DIRECTION_OUT
} OpenGLShaderPropertyDirection;

struct _OpenGLShaderUnit {
	GTypeInstance parent_instance;
	volatile int ref_count;
	OpenGLShaderUnitPrivate * priv;
};

struct _OpenGLShaderUnitClass {
	GTypeClass parent_class;
	void (*finalize) (OpenGLShaderUnit *self);
	void (*to_string) (OpenGLShaderUnit* self, GString* str);
};

struct _OpenGLShaderDefine {
	OpenGLShaderUnit parent_instance;
	OpenGLShaderDefinePrivate * priv;
};

struct _OpenGLShaderDefineClass {
	OpenGLShaderUnitClass parent_class;
};

struct _OpenGLShaderProperty {
	OpenGLShaderUnit parent_instance;
	OpenGLShaderPropertyPrivate * priv;
};

struct _OpenGLShaderPropertyClass {
	OpenGLShaderUnitClass parent_class;
};

struct _OpenGLShaderAttribute {
	OpenGLShaderProperty parent_instance;
	OpenGLShaderAttributePrivate * priv;
};

struct _OpenGLShaderAttributeClass {
	OpenGLShaderPropertyClass parent_class;
};

struct _OpenGLShaderVarying {
	OpenGLShaderProperty parent_instance;
	OpenGLShaderVaryingPrivate * priv;
};

struct _OpenGLShaderVaryingClass {
	OpenGLShaderPropertyClass parent_class;
};

struct _OpenGLShaderUniform {
	OpenGLShaderProperty parent_instance;
	OpenGLShaderUniformPrivate * priv;
};

struct _OpenGLShaderUniformClass {
	OpenGLShaderPropertyClass parent_class;
};

struct _OpenGLShaderStruct {
	OpenGLShaderUnit parent_instance;
	OpenGLShaderStructPrivate * priv;
};

struct _OpenGLShaderStructClass {
	OpenGLShaderUnitClass parent_class;
};

struct _OpenGLShaderCodeBlock {
	OpenGLShaderUnit parent_instance;
	OpenGLShaderCodeBlockPrivate * priv;
};

struct _OpenGLShaderCodeBlockClass {
	OpenGLShaderUnitClass parent_class;
};

struct _OpenGLShaderFunction {
	OpenGLShaderUnit parent_instance;
	OpenGLShaderFunctionPrivate * priv;
};

struct _OpenGLShaderFunctionClass {
	OpenGLShaderUnitClass parent_class;
};

struct _OpenGLShaderCodeDependencyTree {
	GTypeInstance parent_instance;
	volatile int ref_count;
	OpenGLShaderCodeDependencyTreePrivate * priv;
};

struct _OpenGLShaderCodeDependencyTreeClass {
	GTypeClass parent_class;
	void (*finalize) (OpenGLShaderCodeDependencyTree *self);
};

struct _OpenGLShaderDependencyTree {
	GTypeInstance parent_instance;
	volatile int ref_count;
	OpenGLShaderDependencyTreePrivate * priv;
};

struct _OpenGLShaderDependencyTreeClass {
	GTypeClass parent_class;
	void (*finalize) (OpenGLShaderDependencyTree *self);
};

struct _OpenGLShaderProgram3D {
	GTypeInstance parent_instance;
	volatile int ref_count;
	OpenGLShaderProgram3DPrivate * priv;
};

struct _OpenGLShaderProgram3DClass {
	GTypeClass parent_class;
	void (*finalize) (OpenGLShaderProgram3D *self);
};

struct _OpenGLStandardShaderBuilder {
	OpenGLShaderBuilder parent_instance;
	OpenGLStandardShaderBuilderPrivate * priv;
};

struct _OpenGLStandardShaderBuilderClass {
	OpenGLShaderBuilderClass parent_class;
};

struct _World {
	GTypeInstance parent_instance;
	volatile int ref_count;
	WorldPrivate * priv;
};

struct _WorldClass {
	GTypeClass parent_class;
	void (*finalize) (World *self);
};

struct _WorldObject {
	GTypeInstance parent_instance;
	volatile int ref_count;
	WorldObjectPrivate * priv;
};

struct _WorldObjectClass {
	GTypeClass parent_class;
	void (*finalize) (WorldObject *self);
	void (*start_custom_animation) (WorldObject* self, WorldObjectAnimation* animation);
	void (*process_custom_animation) (WorldObject* self, WorldObjectAnimation* animation, gfloat time);
	void (*do_process) (WorldObject* self, DeltaArgs* args);
	void (*apply_transform) (WorldObject* self, Transform* transform);
	void (*add_to_scene) (WorldObject* self, RenderScene3D* scene);
};

struct _WorldTransform {
	WorldObject parent_instance;
	WorldTransformPrivate * priv;
};

struct _WorldTransformClass {
	WorldObjectClass parent_class;
};

struct _WorldCamera {
	WorldObject parent_instance;
	WorldCameraPrivate * priv;
};

struct _WorldCameraClass {
	WorldObjectClass parent_class;
};

struct _TargetWorldCamera {
	WorldCamera parent_instance;
	TargetWorldCameraPrivate * priv;
};

struct _TargetWorldCameraClass {
	WorldCameraClass parent_class;
};

struct _WorldObjectTransformable {
	WorldObject parent_instance;
	WorldObjectTransformablePrivate * priv;
};

struct _WorldObjectTransformableClass {
	WorldObjectClass parent_class;
};

struct _WorldLabel {
	WorldObjectTransformable parent_instance;
	WorldLabelPrivate * priv;
};

struct _WorldLabelClass {
	WorldObjectTransformableClass parent_class;
};

struct _WorldLight {
	WorldObject parent_instance;
	WorldLightPrivate * priv;
};

struct _WorldLightClass {
	WorldObjectClass parent_class;
};

struct _WorldObjectAnimation {
	GTypeInstance parent_instance;
	volatile int ref_count;
	WorldObjectAnimationPrivate * priv;
};

struct _WorldObjectAnimationClass {
	GTypeClass parent_class;
	void (*finalize) (WorldObjectAnimation *self);
};

struct _WorldLightAnimation {
	WorldObjectAnimation parent_instance;
	WorldLightAnimationPrivate * priv;
};

struct _WorldLightAnimationClass {
	WorldObjectAnimationClass parent_class;
};

struct _Animation {
	GTypeInstance parent_instance;
	volatile int ref_count;
	AnimationPrivate * priv;
};

struct _AnimationClass {
	GTypeClass parent_class;
	void (*finalize) (Animation *self);
};

typedef void (*Animationanimation_delegate) (gfloat time, void* user_data);
struct _AnimationTime {
	Serializable parent_instance;
	AnimationTimePrivate * priv;
};

struct _AnimationTimeClass {
	SerializableClass parent_class;
};

typedef enum  {
	RESIZE_STYLE_ABSOLUTE,
	RESIZE_STYLE_RELATIVE
} ResizeStyle;

struct _Control {
	Container parent_instance;
	ControlPrivate * priv;
};

struct _ControlClass {
	ContainerClass parent_class;
	void (*on_mouse_move) (Control* self, Vec2* position);
	void (*on_click) (Control* self, Vec2* position);
	void (*on_mouse_down) (Control* self, Vec2* position);
	void (*on_mouse_up) (Control* self, Vec2* position);
	void (*on_mouse_over) (Control* self);
	void (*on_focus_lost) (Control* self);
	void (*on_child_focus_lost) (Control* self);
	void (*on_key_press) (Control* self, KeyArgs* key);
	void (*on_text_input) (Control* self, TextInputArgs* text);
	void (*on_text_edit) (Control* self, TextEditArgs* text);
};

struct _EndControl {
	Control parent_instance;
	EndControlPrivate * priv;
};

struct _EndControlClass {
	ControlClass parent_class;
	void (*on_added) (EndControl* self);
	RenderObject2D* (*get_obj) (EndControl* self);
	void (*get_end_size) (EndControl* self, Size2 * result);
};

struct _MainView {
	Container parent_instance;
	MainViewPrivate * priv;
};

struct _MainViewClass {
	ContainerClass parent_class;
};

struct _MouseEventArgs {
	GTypeInstance parent_instance;
	volatile int ref_count;
	MouseEventArgsPrivate * priv;
};

struct _MouseEventArgsClass {
	GTypeClass parent_class;
	void (*finalize) (MouseEventArgs *self);
};

typedef enum  {
	MOUSE_EVENT_ARGS_BUTTON_LEFT,
	MOUSE_EVENT_ARGS_BUTTON_CENTER,
	MOUSE_EVENT_ARGS_BUTTON_RIGHT
} MouseEventArgsButton;

struct _MouseMoveArgs {
	GTypeInstance parent_instance;
	volatile int ref_count;
	MouseMoveArgsPrivate * priv;
};

struct _MouseMoveArgsClass {
	GTypeClass parent_class;
	void (*finalize) (MouseMoveArgs *self);
};

struct _MouseReference {
	GTypeInstance parent_instance;
	volatile int ref_count;
	MouseReferencePrivate * priv;
};

struct _MouseReferenceClass {
	GTypeClass parent_class;
	void (*finalize) (MouseReference *self);
};

struct _KeyArgs {
	GTypeInstance parent_instance;
	volatile int ref_count;
	KeyArgsPrivate * priv;
};

struct _KeyArgsClass {
	GTypeClass parent_class;
	void (*finalize) (KeyArgs *self);
};

struct _TextInputArgs {
	GTypeInstance parent_instance;
	volatile int ref_count;
	TextInputArgsPrivate * priv;
};

struct _TextInputArgsClass {
	GTypeClass parent_class;
	void (*finalize) (TextInputArgs *self);
};

struct _TextEditArgs {
	GTypeInstance parent_instance;
	volatile int ref_count;
	TextEditArgsPrivate * priv;
};

struct _TextEditArgsClass {
	GTypeClass parent_class;
	void (*finalize) (TextEditArgs *self);
};

struct _DeltaArgs {
	GTypeInstance parent_instance;
	volatile int ref_count;
	DeltaArgsPrivate * priv;
};

struct _DeltaArgsClass {
	GTypeClass parent_class;
	void (*finalize) (DeltaArgs *self);
};

struct _RenderWindow {
	GTypeInstance parent_instance;
	volatile int ref_count;
	RenderWindowPrivate * priv;
};

struct _RenderWindowClass {
	GTypeClass parent_class;
	void (*finalize) (RenderWindow *self);
	void (*do_process) (RenderWindow* self, DeltaArgs* delta);
	gboolean (*key_press) (RenderWindow* self, KeyArgs* key);
	void (*shown) (RenderWindow* self);
};

struct _SDLWindowTarget {
	GObject parent_instance;
	SDLWindowTargetPrivate * priv;
};

struct _SDLWindowTargetClass {
	GObjectClass parent_class;
};

struct _ResetContainer {
	Container parent_instance;
	ResetContainerPrivate * priv;
};

struct _ResetContainerClass {
	ContainerClass parent_class;
};

struct _View3D {
	Container parent_instance;
	View3DPrivate * priv;
};

struct _View3DClass {
	ContainerClass parent_class;
	void (*process_3d) (View3D* self, DeltaArgs* args);
};

struct _LabelControl {
	EndControl parent_instance;
	LabelControlPrivate * priv;
};

struct _LabelControlClass {
	EndControlClass parent_class;
};

struct _LineControl {
	Control parent_instance;
	LineControlPrivate * priv;
};

struct _LineControlClass {
	ControlClass parent_class;
	void (*set_line_end_pos) (LineControl* self, Vec2* position);
};

struct _ListControl {
	Control parent_instance;
	ListControlPrivate * priv;
};

struct _ListControlClass {
	ControlClass parent_class;
	void (*on_added) (ListControl* self);
	gchar* (*get_cell_data) (ListControl* self, gint row, gint column);
	ListColumnInfo* (*get_column_info) (ListControl* self, gint column);
	gint (*get_row_count) (ListControl* self);
	gint (*get_column_count) (ListControl* self);
};

struct _ListColumnInfo {
	GTypeInstance parent_instance;
	volatile int ref_count;
	ListColumnInfoPrivate * priv;
};

struct _ListColumnInfoClass {
	GTypeClass parent_class;
	void (*finalize) (ListColumnInfo *self);
};

struct _ListCellStyle {
	GTypeInstance parent_instance;
	volatile int ref_count;
	ListCellStylePrivate * priv;
};

struct _ListCellStyleClass {
	GTypeClass parent_class;
	void (*finalize) (ListCellStyle *self);
};

struct _RectangleControl {
	EndControl parent_instance;
	RectangleControlPrivate * priv;
};

struct _RectangleControlClass {
	EndControlClass parent_class;
};

struct _ScrollBarControl {
	Control parent_instance;
	ScrollBarControlPrivate * priv;
};

struct _ScrollBarControlClass {
	ControlClass parent_class;
};

struct _SizingControl {
	Container parent_instance;
	SizingControlPrivate * priv;
};

struct _SizingControlClass {
	ContainerClass parent_class;
};

typedef enum  {
	SIZING_STYLE_EVEN,
	SIZING_STYLE_AUTOSIZE
} SizingStyle;

struct _TextInputControl {
	Control parent_instance;
	TextInputControlPrivate * priv;
};

struct _TextInputControlClass {
	ControlClass parent_class;
};


GType engine_engine_get_type (void) G_GNUC_CONST;
EngineEngine* engine_engine_construct (GType object_type, gboolean multithread_rendering, gboolean debug);
gboolean engine_engine_init (EngineEngine* self, const gchar* window_name, gint window_width, gint window_height, gint multisampling, gboolean fullscreen);
void engine_engine_stop (EngineEngine* self);
void engine_engine_quit (EngineEngine* self);
gboolean engine_engine_get_multithread_rendering (EngineEngine* self);
gboolean engine_engine_get_debug (EngineEngine* self);
GType cursor_type_get_type (void) G_GNUC_CONST;
GType size2i_get_type (void) G_GNUC_CONST;
Size2i* size2i_dup (const Size2i* self);
void size2i_free (Size2i* self);
GType iwindow_target_get_type (void) G_GNUC_CONST;
IWindowTarget* engine_engine_get_window (EngineEngine* self);
void engine_engine_set_window (EngineEngine* self, IWindowTarget* value);
GType render_target_get_type (void) G_GNUC_CONST;
RenderTarget* engine_engine_get_renderer (EngineEngine* self);
void engine_engine_set_renderer (EngineEngine* self, RenderTarget* value);
GType engine_sdlgl_engine_get_type (void) G_GNUC_CONST;
EngineSDLGLEngine* engine_sdlgl_engine_new (gboolean multithread_rendering, gboolean debug);
EngineSDLGLEngine* engine_sdlgl_engine_construct (GType object_type, gboolean multithread_rendering, gboolean debug);
gpointer engine_log_ref (gpointer instance);
void engine_log_unref (gpointer instance);
GParamSpec* param_spec_engine_log (const gchar* name, const gchar* nick, const gchar* blurb, GType object_type, GParamFlags flags);
void value_set_engine_log (GValue* value, gpointer v_object);
void value_take_engine_log (GValue* value, gpointer v_object);
gpointer value_get_engine_log (const GValue* value);
GType engine_log_get_type (void) G_GNUC_CONST;
gpointer log_callback_ref (gpointer instance);
void log_callback_unref (gpointer instance);
GParamSpec* param_spec_log_callback (const gchar* name, const gchar* nick, const gchar* blurb, GType object_type, GParamFlags flags);
void value_set_log_callback (GValue* value, gpointer v_object);
void value_take_log_callback (GValue* value, gpointer v_object);
gpointer value_get_log_callback (const GValue* value);
GType log_callback_get_type (void) G_GNUC_CONST;
void engine_log_set_log_callback (LogCallback* callback);
GType engine_log_type_get_type (void) G_GNUC_CONST;
void engine_log_log (EngineLogType log_type, const gchar* origin, const gchar* message);
LogCallback* log_callback_new (void);
LogCallback* log_callback_construct (GType object_type);
gpointer audio_player_ref (gpointer instance);
void audio_player_unref (gpointer instance);
GParamSpec* param_spec_audio_player (const gchar* name, const gchar* nick, const gchar* blurb, GType object_type, GParamFlags flags);
void value_set_audio_player (GValue* value, gpointer v_object);
void value_take_audio_player (GValue* value, gpointer v_object);
gpointer value_get_audio_player (const GValue* value);
GType audio_player_get_type (void) G_GNUC_CONST;
gpointer sound_ref (gpointer instance);
void sound_unref (gpointer instance);
GParamSpec* param_spec_sound (const gchar* name, const gchar* nick, const gchar* blurb, GType object_type, GParamFlags flags);
void value_set_sound (GValue* value, gpointer v_object);
void value_take_sound (GValue* value, gpointer v_object);
gpointer value_get_sound (const GValue* value);
GType sound_get_type (void) G_GNUC_CONST;
Sound* audio_player_load_sound (AudioPlayer* self, const gchar* name);
GType music_get_type (void) G_GNUC_CONST;
Music* audio_player_load_music (AudioPlayer* self, const gchar* name);
AudioPlayer* audio_player_new (void);
AudioPlayer* audio_player_construct (GType object_type);
gboolean audio_player_get_muted (AudioPlayer* self);
void audio_player_set_muted (AudioPlayer* self, gboolean value);
Sound* sound_new (const gchar* name);
Sound* sound_construct (GType object_type, const gchar* name);
void sound_play (Sound* self, gboolean loop);
void sound_stop (Sound* self);
const gchar* sound_get_name (Sound* self);
gboolean sound_get_muted (Sound* self);
void sound_set_muted (Sound* self, gboolean value);
Music* music_new (const gchar* name);
Music* music_construct (GType object_type, const gchar* name);
void music_play (Music* self);
void music_stop (Music* self);
gpointer file_loader_ref (gpointer instance);
void file_loader_unref (gpointer instance);
GParamSpec* param_spec_file_loader (const gchar* name, const gchar* nick, const gchar* blurb, GType object_type, GParamFlags flags);
void value_set_file_loader (GValue* value, gpointer v_object);
void value_take_file_loader (GValue* value, gpointer v_object);
gpointer value_get_file_loader (const GValue* value);
GType file_loader_get_type (void) G_GNUC_CONST;
gchar** file_loader_load (const gchar* name, int* result_length1);
guint8* file_loader_load_data (const gchar* name, int* result_length1);
gpointer file_writer_ref (gpointer instance);
void file_writer_unref (gpointer instance);
GParamSpec* param_spec_file_writer (const gchar* name, const gchar* nick, const gchar* blurb, GType object_type, GParamFlags flags);
void value_set_file_writer (GValue* value, gpointer v_object);
void value_take_file_writer (GValue* value, gpointer v_object);
gpointer value_get_file_writer (const GValue* value);
GType file_writer_get_type (void) G_GNUC_CONST;
FileWriter* file_loader_open (const gchar* name);
gboolean file_loader_save (const gchar* name, gchar** lines, int lines_length1);
gboolean file_loader_exists (const gchar* name);
gchar** file_loader_split_string (const gchar* str, gboolean retain_newline, int* result_length1);
gchar** file_loader_get_files_in_dir (const gchar* name, int* result_length1);
gchar* file_loader_array_to_string (gchar** lines, int lines_length1);
guint8* file_loader_compress (guint8* data, int data_length1, int* result_length1);
guint8* file_loader_uncompress (guint8* data, int data_length1, int* result_length1);
FileWriter* file_writer_new (GFileOutputStream* stream);
FileWriter* file_writer_construct (GType object_type, GFileOutputStream* stream);
gboolean file_writer_write_data (FileWriter* self, guint8* data, int data_length1);
gboolean file_writer_write_line (FileWriter* self, const gchar* line);
gboolean file_writer_write (FileWriter* self, const gchar* text);
void file_writer_close (FileWriter* self);
gpointer obj_parser_ref (gpointer instance);
void obj_parser_unref (gpointer instance);
GParamSpec* param_spec_obj_parser (const gchar* name, const gchar* nick, const gchar* blurb, GType object_type, GParamFlags flags);
void value_set_obj_parser (GValue* value, gpointer v_object);
void value_take_obj_parser (GValue* value, gpointer v_object);
gpointer value_get_obj_parser (const GValue* value);
GType obj_parser_get_type (void) G_GNUC_CONST;
gpointer geometry_data_ref (gpointer instance);
void geometry_data_unref (gpointer instance);
GParamSpec* param_spec_geometry_data (const gchar* name, const gchar* nick, const gchar* blurb, GType object_type, GParamFlags flags);
void value_set_geometry_data (GValue* value, gpointer v_object);
void value_take_geometry_data (GValue* value, gpointer v_object);
gpointer value_get_geometry_data (const GValue* value);
GType geometry_data_get_type (void) G_GNUC_CONST;
GeometryData* obj_parser_parse (const gchar* path, const gchar* filename);
gpointer model_data_ref (gpointer instance);
void model_data_unref (gpointer instance);
GParamSpec* param_spec_model_data (const gchar* name, const gchar* nick, const gchar* blurb, GType object_type, GParamFlags flags);
void value_set_model_data (GValue* value, gpointer v_object);
void value_take_model_data (GValue* value, gpointer v_object);
gpointer value_get_model_data (const GValue* value);
GType model_data_get_type (void) G_GNUC_CONST;
GeeArrayList* obj_parser_parse_string (const gchar* str);
GeeArrayList* obj_parser_parse_strings (gchar** str, int str_length1);
ObjParser* obj_parser_new (void);
ObjParser* obj_parser_construct (GType object_type);
GType model_vertex_get_type (void) G_GNUC_CONST;
ModelVertex* model_vertex_dup (const ModelVertex* self);
void model_vertex_free (ModelVertex* self);
GType model_uv_get_type (void) G_GNUC_CONST;
ModelUV* model_uv_dup (const ModelUV* self);
void model_uv_free (ModelUV* self);
GType model_normal_get_type (void) G_GNUC_CONST;
ModelNormal* model_normal_dup (const ModelNormal* self);
void model_normal_free (ModelNormal* self);
gpointer material_data_ref (gpointer instance);
void material_data_unref (gpointer instance);
GParamSpec* param_spec_material_data (const gchar* name, const gchar* nick, const gchar* blurb, GType object_type, GParamFlags flags);
void value_set_material_data (GValue* value, gpointer v_object);
void value_take_material_data (GValue* value, gpointer v_object);
gpointer value_get_material_data (const GValue* value);
GType material_data_get_type (void) G_GNUC_CONST;
GeometryData* geometry_data_new (GeeArrayList* models, GeeArrayList* materials);
GeometryData* geometry_data_construct (GType object_type, GeeArrayList* models, GeeArrayList* materials);
GeeArrayList* geometry_data_get_models (GeometryData* self);
GeeArrayList* geometry_data_get_materials (GeometryData* self);
GType model_triangle_get_type (void) G_GNUC_CONST;
ModelTriangle* model_triangle_dup (const ModelTriangle* self);
void model_triangle_free (ModelTriangle* self);
ModelData* model_data_new (const gchar* name, const gchar* material_name, ModelTriangle* triangles, int triangles_length1);
ModelData* model_data_construct (GType object_type, const gchar* name, const gchar* material_name, ModelTriangle* triangles, int triangles_length1);
void model_data_center_points (ModelData* self);
const gchar* model_data_get_name (ModelData* self);
const gchar* model_data_get_material_name (ModelData* self);
GType model_point_get_type (void) G_GNUC_CONST;
ModelPoint* model_point_dup (const ModelPoint* self);
void model_point_free (ModelPoint* self);
ModelPoint* model_data_get_points (ModelData* self, int* result_length1);
GType vec3_get_type (void) G_GNUC_CONST;
Vec3* vec3_dup (const Vec3* self);
void vec3_free (Vec3* self);
void model_data_get_center (ModelData* self, Vec3 * result);
void model_data_get_size (ModelData* self, Vec3 * result);
MaterialData* material_data_new (const gchar* name, gfloat ns, Vec3* Ka, Vec3* Kd, Vec3* Ks, gfloat d, gfloat illum);
MaterialData* material_data_construct (GType object_type, const gchar* name, gfloat ns, Vec3* Ka, Vec3* Kd, Vec3* Ks, gfloat d, gfloat illum);
const gchar* material_data_get_name (MaterialData* self);
void material_data_set_name (MaterialData* self, const gchar* value);
void material_data_get_ambient_color (MaterialData* self, Vec3 * result);
void material_data_set_ambient_color (MaterialData* self, Vec3 * value);
void material_data_get_diffuse_color (MaterialData* self, Vec3 * result);
void material_data_set_diffuse_color (MaterialData* self, Vec3 * value);
void material_data_get_specular_color (MaterialData* self, Vec3 * result);
void material_data_set_specular_color (MaterialData* self, Vec3 * value);
gfloat material_data_get_specular_exponent (MaterialData* self);
void material_data_set_specular_exponent (MaterialData* self, gfloat value);
gfloat material_data_get_alpha (MaterialData* self);
void material_data_set_alpha (MaterialData* self, gfloat value);
GType illumination_model_get_type (void) G_GNUC_CONST;
IlluminationModel material_data_get_illumination_model (MaterialData* self);
void material_data_set_illumination_model (MaterialData* self, IlluminationModel value);
gpointer calculations_ref (gpointer instance);
void calculations_unref (gpointer instance);
GParamSpec* param_spec_calculations (const gchar* name, const gchar* nick, const gchar* blurb, GType object_type, GParamFlags flags);
void value_set_calculations (GValue* value, gpointer v_object);
void value_take_calculations (GValue* value, gpointer v_object);
gpointer value_get_calculations (const GValue* value);
GType calculations_get_type (void) G_GNUC_CONST;
void calculations_rotate (Vec3* origin, Vec3* rotation, Vec3* offset, Vec3* result);
void calculations_rotate_x (Vec3* origin, gfloat rotation, Vec3* offset, Vec3* result);
void calculations_rotate_y (Vec3* origin, gfloat rotation, Vec3* offset, Vec3* result);
void calculations_rotate_z (Vec3* origin, gfloat rotation, Vec3* offset, Vec3* result);
gpointer mat4_ref (gpointer instance);
void mat4_unref (gpointer instance);
GParamSpec* param_spec_mat4 (const gchar* name, const gchar* nick, const gchar* blurb, GType object_type, GParamFlags flags);
void value_set_mat4 (GValue* value, gpointer v_object);
void value_take_mat4 (GValue* value, gpointer v_object);
gpointer value_get_mat4 (const GValue* value);
GType mat4_get_type (void) G_GNUC_CONST;
GType vec2i_get_type (void) G_GNUC_CONST;
Vec2i* vec2i_dup (const Vec2i* self);
void vec2i_free (Vec2i* self);
void calculations_get_ray (Mat4* projection_matrix, Mat4* view_matrix, Vec2i* point, Size2i* size, Vec3* result);
gfloat calculations_get_collision_distance (Vec3* ray_origin, Vec3* ray_direction, Vec3* model_obb, Mat4* model_matrix);
gfloat calculations_get_collision_distance_box (Vec3* ray_origin, Vec3* ray_direction, Vec3* aabb_min, Vec3* aabb_max, Mat4* model_matrix);
gpointer quat_ref (gpointer instance);
void quat_unref (gpointer instance);
GParamSpec* param_spec_quat (const gchar* name, const gchar* nick, const gchar* blurb, GType object_type, GParamFlags flags);
void value_set_quat (GValue* value, gpointer v_object);
void value_take_quat (GValue* value, gpointer v_object);
gpointer value_get_quat (const GValue* value);
GType quat_get_type (void) G_GNUC_CONST;
Mat4* calculations_rotation_matrix_quat (Quat* quat);
Mat4* calculations_translation_matrix (Vec3* vec);
Mat4* calculations_scale_matrix (Vec3* vec);
Mat4* calculations_get_model_matrix (Vec3* translation, Vec3* scale, Quat* rotation);
gpointer mat3_ref (gpointer instance);
void mat3_unref (gpointer instance);
GParamSpec* param_spec_mat3 (const gchar* name, const gchar* nick, const gchar* blurb, GType object_type, GParamFlags flags);
void value_set_mat3 (GValue* value, gpointer v_object);
void value_take_mat3 (GValue* value, gpointer v_object);
gpointer value_get_mat3 (const GValue* value);
GType mat3_get_type (void) G_GNUC_CONST;
Mat3* calculations_rotation_matrix_3 (gfloat angle);
GType vec2_get_type (void) G_GNUC_CONST;
Vec2* vec2_dup (const Vec2* self);
void vec2_free (Vec2* self);
Mat3* calculations_translation_matrix_3 (Vec2* vec);
GType size2_get_type (void) G_GNUC_CONST;
Size2* size2_dup (const Size2* self);
void size2_free (Size2* self);
Mat3* calculations_scale_matrix_3 (Size2* vec);
Mat3* calculations_get_model_matrix_3 (Vec2* position, gfloat rotation, Size2* scale, gfloat aspect);
gint calculations_sign (gfloat n);
gpointer delta_timer_ref (gpointer instance);
void delta_timer_unref (gpointer instance);
GParamSpec* param_spec_delta_timer (const gchar* name, const gchar* nick, const gchar* blurb, GType object_type, GParamFlags flags);
void value_set_delta_timer (GValue* value, gpointer v_object);
void value_take_delta_timer (GValue* value, gpointer v_object);
gpointer value_get_delta_timer (const GValue* value);
GType delta_timer_get_type (void) G_GNUC_CONST;
gpointer delta_args_ref (gpointer instance);
void delta_args_unref (gpointer instance);
GParamSpec* param_spec_delta_args (const gchar* name, const gchar* nick, const gchar* blurb, GType object_type, GParamFlags flags);
void value_set_delta_args (GValue* value, gpointer v_object);
void value_take_delta_args (GValue* value, gpointer v_object);
gpointer value_get_delta_args (const GValue* value);
GType delta_args_get_type (void) G_GNUC_CONST;
gfloat delta_timer_elapsed (DeltaTimer* self, DeltaArgs* args);
void delta_timer_reset (DeltaTimer* self);
DeltaTimer* delta_timer_new (void);
DeltaTimer* delta_timer_construct (GType object_type);
gpointer event_timer_ref (gpointer instance);
void event_timer_unref (gpointer instance);
GParamSpec* param_spec_event_timer (const gchar* name, const gchar* nick, const gchar* blurb, GType object_type, GParamFlags flags);
void value_set_event_timer (GValue* value, gpointer v_object);
void value_take_event_timer (GValue* value, gpointer v_object);
gpointer value_get_event_timer (const GValue* value);
GType event_timer_get_type (void) G_GNUC_CONST;
EventTimer* event_timer_new (gfloat delay, gboolean active);
EventTimer* event_timer_construct (GType object_type, gfloat delay, gboolean active);
void event_timer_process (EventTimer* self, DeltaArgs* args);
void event_timer_activate (EventTimer* self);
gfloat event_timer_get_delay (EventTimer* self);
void event_timer_set_delay (EventTimer* self, gfloat value);
gpointer helper_ref (gpointer instance);
void helper_unref (gpointer instance);
GParamSpec* param_spec_helper (const gchar* name, const gchar* nick, const gchar* blurb, GType object_type, GParamFlags flags);
void value_set_helper (GValue* value, gpointer v_object);
void value_take_helper (GValue* value, gpointer v_object);
gpointer value_get_helper (const GValue* value);
GType helper_get_type (void) G_GNUC_CONST;
gchar* helper_sanitize_string (const gchar* input);
gpointer image_loader_ref (gpointer instance);
void image_loader_unref (gpointer instance);
GParamSpec* param_spec_image_loader (const gchar* name, const gchar* nick, const gchar* blurb, GType object_type, GParamFlags flags);
void value_set_image_loader (GValue* value, gpointer v_object);
void value_take_image_loader (GValue* value, gpointer v_object);
gpointer value_get_image_loader (const GValue* value);
GType image_loader_get_type (void) G_GNUC_CONST;
gpointer image_data_ref (gpointer instance);
void image_data_unref (gpointer instance);
GParamSpec* param_spec_image_data (const gchar* name, const gchar* nick, const gchar* blurb, GType object_type, GParamFlags flags);
void value_set_image_data (GValue* value, gpointer v_object);
void value_take_image_data (GValue* value, gpointer v_object);
gpointer value_get_image_data (const GValue* value);
GType image_data_get_type (void) G_GNUC_CONST;
ImageData* image_loader_load_image (const gchar* name);
ImageData* image_data_new (guchar* data, int data_length1, Size2i* size);
ImageData* image_data_construct (GType object_type, guchar* data, int data_length1, Size2i* size);
guchar* image_data_get_data (ImageData* self, int* result_length1);
void image_data_get_size (ImageData* self, Size2i * result);
GType image_load_wrap_get_type (void) G_GNUC_CONST;
ImageData* image_load_wrap_load_image (const gchar* name);
GType scan_code_get_type (void) G_GNUC_CONST;
GType modifier_get_type (void) G_GNUC_CONST;
GType key_code_get_type (void) G_GNUC_CONST;
gpointer label_loader_ref (gpointer instance);
void label_loader_unref (gpointer instance);
GParamSpec* param_spec_label_loader (const gchar* name, const gchar* nick, const gchar* blurb, GType object_type, GParamFlags flags);
void value_set_label_loader (GValue* value, gpointer v_object);
void value_take_label_loader (GValue* value, gpointer v_object);
gpointer value_get_label_loader (const GValue* value);
GType label_loader_get_type (void) G_GNUC_CONST;
LabelLoader* label_loader_new (void);
LabelLoader* label_loader_construct (GType object_type);
void label_loader_initialize (void);
gpointer label_info_ref (gpointer instance);
void label_info_unref (gpointer instance);
GParamSpec* param_spec_label_info (const gchar* name, const gchar* nick, const gchar* blurb, GType object_type, GParamFlags flags);
void value_set_label_info (GValue* value, gpointer v_object);
void value_take_label_info (GValue* value, gpointer v_object);
gpointer value_get_label_info (const GValue* value);
GType label_info_get_type (void) G_GNUC_CONST;
LabelInfo* label_loader_get_label_info (LabelLoader* self, const gchar* font_type, gfloat font_size, const gchar* text);
gpointer label_bitmap_ref (gpointer instance);
void label_bitmap_unref (gpointer instance);
GParamSpec* param_spec_label_bitmap (const gchar* name, const gchar* nick, const gchar* blurb, GType object_type, GParamFlags flags);
void value_set_label_bitmap (GValue* value, gpointer v_object);
void value_take_label_bitmap (GValue* value, gpointer v_object);
gpointer value_get_label_bitmap (const GValue* value);
GType label_bitmap_get_type (void) G_GNUC_CONST;
LabelBitmap* label_loader_generate_label_bitmap (LabelLoader* self, const gchar* font_type, gfloat font_size, const gchar* text);
LabelInfo* label_loader_get_label_info_static (const gchar* font_type, gfloat font_size, const gchar* text);
LabelBitmap* label_loader_generate_label_bitmap_static (const gchar* font_type, gfloat font_size, const gchar* text);
LabelInfo* label_info_new (Size2i* size);
LabelInfo* label_info_construct (GType object_type, Size2i* size);
void label_info_get_size (LabelInfo* self, Size2i * result);
LabelBitmap* label_bitmap_new (guchar* data, int data_length1, Size2i* size);
LabelBitmap* label_bitmap_construct (GType object_type, guchar* data, int data_length1, Size2i* size);
guchar* label_bitmap_get_data (LabelBitmap* self, int* result_length1);
void label_bitmap_get_size (LabelBitmap* self, Size2i * result);
GType networking_get_type (void) G_GNUC_CONST;
Networking* networking_new (void);
Networking* networking_construct (GType object_type);
void networking_close (Networking* self);
void networking_stop_listening (Networking* self);
gboolean networking_host (Networking* self, guint16 port);
GType connection_get_type (void) G_GNUC_CONST;
Connection* networking_join (const gchar* addr, guint16 port);
guint8* networking_int_to_data (guint32 n, int* result_length1);
guint8* networking_float_to_data (gfloat f, int* result_length1);
gpointer message_signal_ref (gpointer instance);
void message_signal_unref (gpointer instance);
GParamSpec* param_spec_message_signal (const gchar* name, const gchar* nick, const gchar* blurb, GType object_type, GParamFlags flags);
void value_set_message_signal (GValue* value, gpointer v_object);
void value_take_message_signal (GValue* value, gpointer v_object);
gpointer value_get_message_signal (const GValue* value);
GType message_signal_get_type (void) G_GNUC_CONST;
MessageSignal* message_signal_new (void);
MessageSignal* message_signal_construct (GType object_type);
Connection* connection_new (GSocketConnection* connection);
Connection* connection_construct (GType object_type, GSocketConnection* connection);
GType message_get_type (void) G_GNUC_CONST;
void connection_send (Connection* self, Message* message);
void connection_start (Connection* self);
void connection_close (Connection* self);
Message* message_new_empty (void);
Message* message_construct_empty (GType object_type);
Message* message_new (guint8* data, int data_length1);
Message* message_construct (GType object_type, guint8* data, int data_length1);
guint8* message_get_data (Message* self, int* result_length1);
void message_set_data (Message* self, guint8* value, int value_length1);
gpointer data_uint_ref (gpointer instance);
void data_uint_unref (gpointer instance);
GParamSpec* param_spec_data_uint (const gchar* name, const gchar* nick, const gchar* blurb, GType object_type, GParamFlags flags);
void value_set_data_uint (GValue* value, gpointer v_object);
void value_take_data_uint (GValue* value, gpointer v_object);
gpointer value_get_data_uint (const GValue* value);
GType data_uint_get_type (void) G_GNUC_CONST;
DataUInt* data_uint_new (guint8* data, int data_length1);
DataUInt* data_uint_construct (GType object_type, guint8* data, int data_length1);
GQuark data_length_error_quark (void);
guint8 data_uint_get_byte (DataUInt* self, GError** error);
gint data_uint_get_int (DataUInt* self, GError** error);
gfloat data_uint_get_float (DataUInt* self, GError** error);
gboolean data_uint_get_bool (DataUInt* self, GError** error);
gchar* data_uint_get_string (DataUInt* self, GError** error);
gchar* data_uint_get_string_length (DataUInt* self, gint length, GError** error);
guint8* data_uint_get_data (DataUInt* self, gint length, int* result_length1, GError** error);
GType serializable_get_type (void) G_GNUC_CONST;
Serializable* serializable_deserialize_string (const gchar* str);
Serializable* serializable_deserialize (guint8* bytes_raw, int bytes_raw_length1);
guint8* serializable_serialize (Serializable* self, int* result_length1);
Serializable* serializable_construct (GType object_type);
gpointer serializable_serialization_context_ref (gpointer instance);
void serializable_serialization_context_unref (gpointer instance);
GParamSpec* serializable_param_spec_serialization_context (const gchar* name, const gchar* nick, const gchar* blurb, GType object_type, GParamFlags flags);
void serializable_value_set_serialization_context (GValue* value, gpointer v_object);
void serializable_value_take_serialization_context (GValue* value, gpointer v_object);
gpointer serializable_value_get_serialization_context (const GValue* value);
GType serializable_serialization_context_get_type (void) G_GNUC_CONST;
void serializable_serialization_context_add_int (SerializableSerializationContext* self, gint i);
void serializable_serialization_context_add_float (SerializableSerializationContext* self, gfloat f);
void serializable_serialization_context_add_byte (SerializableSerializationContext* self, guint8 b);
void serializable_serialization_context_add_bool (SerializableSerializationContext* self, gboolean b);
void serializable_serialization_context_add_string (SerializableSerializationContext* self, const gchar* str);
guint8* serializable_serialization_context_serialize (SerializableSerializationContext* self, int* result_length1);
SerializableSerializationContext* serializable_serialization_context_new (void);
SerializableSerializationContext* serializable_serialization_context_construct (GType object_type);
GType serializable_list_get_type (void) G_GNUC_CONST;
SerializableList* serializable_list_new (GType t_type, GBoxedCopyFunc t_dup_func, GDestroyNotify t_destroy_func, gpointer* items, int items_length1);
SerializableList* serializable_list_construct (GType object_type, GType t_type, GBoxedCopyFunc t_dup_func, GDestroyNotify t_destroy_func, gpointer* items, int items_length1);
SerializableList* serializable_list_new_empty (GType t_type, GBoxedCopyFunc t_dup_func, GDestroyNotify t_destroy_func);
SerializableList* serializable_list_construct_empty (GType object_type, GType t_type, GBoxedCopyFunc t_dup_func, GDestroyNotify t_destroy_func);
gpointer* serializable_list_to_array (SerializableList* self, int* result_length1);
gpointer* serializable_list_get_items (SerializableList* self, int* result_length1);
void serializable_list_set_items (SerializableList* self, gpointer* value, int value_length1);
GType obj_int_get_type (void) G_GNUC_CONST;
ObjInt* obj_int_new (gint value);
ObjInt* obj_int_construct (GType object_type, gint value);
gint obj_int_get_value (ObjInt* self);
void obj_int_set_value (ObjInt* self, gint value);
gpointer random_ref (gpointer instance);
void random_unref (gpointer instance);
GParamSpec* param_spec_random (const gchar* name, const gchar* nick, const gchar* blurb, GType object_type, GParamFlags flags);
void value_set_random (GValue* value, gpointer v_object);
void value_take_random (GValue* value, gpointer v_object);
gpointer value_get_random (const GValue* value);
GType random_get_type (void) G_GNUC_CONST;
Random* random_new (void);
Random* random_construct (GType object_type);
Random* random_new_seed (gint seed);
Random* random_construct_seed (GType object_type, gint seed);
gint random_int_range (Random* self, gint min, gint max);
gfloat random_next_float (Random* self);
gfloat random_float_range (Random* self, gfloat min, gfloat max);
gboolean random_next_bool (Random* self);
gpointer threading_ref (gpointer instance);
void threading_unref (gpointer instance);
GParamSpec* param_spec_threading (const gchar* name, const gchar* nick, const gchar* blurb, GType object_type, GParamFlags flags);
void value_set_threading (GValue* value, gpointer v_object);
void value_take_threading (GValue* value, gpointer v_object);
gpointer value_get_threading (const GValue* value);
GType threading_get_type (void) G_GNUC_CONST;
void threading_start0 (ThreadingDel0Arg function, void* function_target);
void threading_start1 (ThreadingDel1Arg function, void* function_target, GObject* arg1);
void threading_start2 (ThreadingDel2Arg function, void* function_target, GObject* arg1, GObject* arg2);
void threading_start3 (ThreadingDel3Arg function, void* function_target, GObject* arg1, GObject* arg2, GObject* arg3);
void threading_start4 (ThreadingDel4Arg function, void* function_target, GObject* arg1, GObject* arg2, GObject* arg3, GObject* arg4);
gboolean threading_get_threading (void);
GType obj_get_type (void) G_GNUC_CONST;
Obj* obj_new (GType t_type, GBoxedCopyFunc t_dup_func, GDestroyNotify t_destroy_func, gconstpointer t);
Obj* obj_construct (GType object_type, GType t_type, GBoxedCopyFunc t_dup_func, GDestroyNotify t_destroy_func, gconstpointer t);
gpointer step_timer_ref (gpointer instance);
void step_timer_unref (gpointer instance);
GParamSpec* param_spec_step_timer (const gchar* name, const gchar* nick, const gchar* blurb, GType object_type, GParamFlags flags);
void value_set_step_timer (GValue* value, gpointer v_object);
void value_take_step_timer (GValue* value, gpointer v_object);
gpointer value_get_step_timer (const GValue* value);
GType step_timer_get_type (void) G_GNUC_CONST;
StepTimer* step_timer_new (gfloat step_seconds, gboolean skip_multiples);
StepTimer* step_timer_construct (GType object_type, gfloat step_seconds, gboolean skip_multiples);
gboolean step_timer_elapsed (StepTimer* self);
gpointer delay_timer_ref (gpointer instance);
void delay_timer_unref (gpointer instance);
GParamSpec* param_spec_delay_timer (const gchar* name, const gchar* nick, const gchar* blurb, GType object_type, GParamFlags flags);
void value_set_delay_timer (GValue* value, gpointer v_object);
void value_take_delay_timer (GValue* value, gpointer v_object);
gpointer value_get_delay_timer (const GValue* value);
GType delay_timer_get_type (void) G_GNUC_CONST;
gboolean delay_timer_active (DelayTimer* self, gfloat time);
void delay_timer_set_time (DelayTimer* self, gfloat delay, gboolean add);
DelayTimer* delay_timer_new (void);
DelayTimer* delay_timer_construct (GType object_type);
gfloat delay_timer_get_delay (DelayTimer* self);
void delay_timer_set_delay (DelayTimer* self, gfloat value);
gboolean delay_timer_get_is_active (DelayTimer* self);
GType color_get_type (void) G_GNUC_CONST;
Color* color_dup (const Color* self);
void color_free (Color* self);
void color_init (Color *self, gfloat r, gfloat g, gfloat b, gfloat a);
void color_init_with_alpha (Color *self, gfloat a);
void color_init_none (Color *self);
void color_init_black (Color *self);
void color_init_white (Color *self);
void color_init_red (Color *self);
void color_init_green (Color *self);
void color_init_blue (Color *self);
gpointer curve_ref (gpointer instance);
void curve_unref (gpointer instance);
GParamSpec* param_spec_curve (const gchar* name, const gchar* nick, const gchar* blurb, GType object_type, GParamFlags flags);
void value_set_curve (GValue* value, gpointer v_object);
void value_take_curve (GValue* value, gpointer v_object);
gpointer value_get_curve (const GValue* value);
GType curve_get_type (void) G_GNUC_CONST;
gfloat curve_map (Curve* self, gfloat x);
Curve* curve_construct (GType object_type);
GType linear_curve_get_type (void) G_GNUC_CONST;
LinearCurve* linear_curve_new (void);
LinearCurve* linear_curve_construct (GType object_type);
GType scurve_get_type (void) G_GNUC_CONST;
SCurve* scurve_new (gfloat exp);
SCurve* scurve_construct (GType object_type, gfloat exp);
GType exponent_curve_get_type (void) G_GNUC_CONST;
ExponentCurve* exponent_curve_new (gfloat exp);
ExponentCurve* exponent_curve_construct (GType object_type, gfloat exp);
GType smooth_approach_curve_get_type (void) G_GNUC_CONST;
SmoothApproachCurve* smooth_approach_curve_new (void);
SmoothApproachCurve* smooth_approach_curve_construct (GType object_type);
Mat3* mat3_new (void);
Mat3* mat3_construct (GType object_type);
Mat3* mat3_new_with_array (gfloat* a);
Mat3* mat3_construct_with_array (GType object_type, gfloat* a);
Mat3* mat3_new_with_vecs (Vec3* v1, Vec3* v2, Vec3* v3);
Mat3* mat3_construct_with_vecs (GType object_type, Vec3* v1, Vec3* v2, Vec3* v3);
Mat3* mat3_transpose (Mat3* self);
Mat3* mat3_copy (Mat3* self);
Mat3* mat3_mul_mat (Mat3* self, Mat3* mat);
void mat3_mul_vec (Mat3* self, Vec3* vec, Vec3* result);
void mat3_col (Mat3* self, gint c, Vec3* result);
gfloat* mat3_get_data (Mat3* self, int* result_length1);
Mat4* mat4_new (void);
Mat4* mat4_construct (GType object_type);
Mat4* mat4_new_with_array (gfloat* a);
Mat4* mat4_construct_with_array (GType object_type, gfloat* a);
GType vec4_get_type (void) G_GNUC_CONST;
Vec4* vec4_dup (const Vec4* self);
void vec4_free (Vec4* self);
Mat4* mat4_new_with_vecs (Vec4* v1, Vec4* v2, Vec4* v3, Vec4* v4);
Mat4* mat4_construct_with_vecs (GType object_type, Vec4* v1, Vec4* v2, Vec4* v3, Vec4* v4);
Mat4* mat4_new_empty (void);
Mat4* mat4_construct_empty (GType object_type);
gboolean mat4_equals (Mat4* self, Mat4* other);
Mat4* mat4_inverse (Mat4* self);
Mat4* mat4_transpose (Mat4* self);
Mat4* mat4_mul_mat (Mat4* self, Mat4* mat);
void mat4_mul_vec (Mat4* self, Vec4* vec, Vec4* result);
void mat4_col (Mat4* self, gint c, Vec4* result);
void mat4_row (Mat4* self, gint i, Vec4* result);
void mat4_get_position (Mat4* self, Vec3* result);
void mat4_get_scale (Mat4* self, Vec3* result);
Quat* mat4_get_rotation (Mat4* self);
gfloat* mat4_get_data (Mat4* self, int* result_length1);
gfloat* mat4_get_transpose_data (Mat4* self, int* result_length1);
gfloat mat4_get (Mat4* self, gint i);
gboolean mat4_get_identity (Mat4* self);
GType orientation_get_type (void) G_GNUC_CONST;
gpointer path3_d_ref (gpointer instance);
void path3_d_unref (gpointer instance);
GParamSpec* param_spec_path3_d (const gchar* name, const gchar* nick, const gchar* blurb, GType object_type, GParamFlags flags);
void value_set_path3_d (GValue* value, gpointer v_object);
void value_take_path3_d (GValue* value, gpointer v_object);
gpointer value_get_path3_d (const GValue* value);
GType path3_d_get_type (void) G_GNUC_CONST;
void path3_d_map (Path3D* self, gfloat time, Vec3* result);
void path3_d_init (Path3D* self, Vec3* start);
void path3_d_do_init (Path3D* self);
Path3D* path3_d_construct (GType object_type);
void path3_d_get_start (Path3D* self, Vec3 * result);
gboolean path3_d_get_relative (Path3D* self);
void path3_d_set_relative (Path3D* self, gboolean value);
GType linear_path3_d_get_type (void) G_GNUC_CONST;
LinearPath3D* linear_path3_d_new (Vec3* end);
LinearPath3D* linear_path3_d_construct (GType object_type, Vec3* end);
void linear_path3_d_get_end (LinearPath3D* self, Vec3 * result);
GType linearized_path3_d_get_type (void) G_GNUC_CONST;
LinearizedPath3D* linearized_path3_d_new (Vec3* points, int points_length1);
LinearizedPath3D* linearized_path3_d_construct (GType object_type, Vec3* points, int points_length1);
gpointer path_quat_ref (gpointer instance);
void path_quat_unref (gpointer instance);
GParamSpec* param_spec_path_quat (const gchar* name, const gchar* nick, const gchar* blurb, GType object_type, GParamFlags flags);
void value_set_path_quat (GValue* value, gpointer v_object);
void value_take_path_quat (GValue* value, gpointer v_object);
gpointer value_get_path_quat (const GValue* value);
GType path_quat_get_type (void) G_GNUC_CONST;
void path_quat_init (PathQuat* self, Quat* start);
Quat* path_quat_map (PathQuat* self, gfloat time);
void path_quat_do_init (PathQuat* self);
PathQuat* path_quat_construct (GType object_type);
gboolean path_quat_get_relative (PathQuat* self);
void path_quat_set_relative (PathQuat* self, gboolean value);
Quat* path_quat_get_start (PathQuat* self);
GType linear_path_quat_get_type (void) G_GNUC_CONST;
LinearPathQuat* linear_path_quat_new (Quat* end);
LinearPathQuat* linear_path_quat_construct (GType object_type, Quat* end);
Quat* linear_path_quat_get_end (LinearPathQuat* self);
Quat* quat_new (void);
Quat* quat_construct (GType object_type);
Quat* quat_new_from_euler (gfloat yaw, gfloat pitch, gfloat roll);
Quat* quat_construct_from_euler (GType object_type, gfloat yaw, gfloat pitch, gfloat roll);
Quat* quat_new_from_euler_vec (Vec3* vec);
Quat* quat_construct_from_euler_vec (GType object_type, Vec3* vec);
Quat* quat_new_from_direction (Vec3* from, Vec3* to);
Quat* quat_construct_from_direction (GType object_type, Vec3* from, Vec3* to);
Quat* quat_new_vals (gfloat w, gfloat x, gfloat y, gfloat z);
Quat* quat_construct_vals (GType object_type, gfloat w, gfloat x, gfloat y, gfloat z);
gboolean quat_equals (Quat* self, Quat* other);
gfloat quat_len (Quat* self);
Quat* quat_mul (Quat* self, Quat* other);
Quat* quat_mul_scalar (Quat* self, gfloat scalar);
Quat* quat_div_scalar (Quat* self, gfloat scalar);
gfloat quat_dot (Quat* self, Quat* other);
Quat* quat_inv (Quat* self);
Quat* quat_norm (Quat* self);
Quat* quat_neg (Quat* self);
Quat* quat_conjugate (Quat* self);
void quat_to_euler (Quat* self, Vec3* result);
Quat* quat_slerp (Quat* from, Quat* to, gfloat t);
gfloat quat_get_w (Quat* self);
gfloat quat_get_x (Quat* self);
gfloat quat_get_y (Quat* self);
gfloat quat_get_z (Quat* self);
GType engine_rectangle_get_type (void) G_GNUC_CONST;
EngineRectangle* engine_rectangle_dup (const EngineRectangle* self);
void engine_rectangle_free (EngineRectangle* self);
void engine_rectangle_init (EngineRectangle *self, gfloat x, gfloat y, gfloat width, gfloat height);
void engine_rectangle_init_vec (EngineRectangle *self, Vec2* position, Size2* size);
void engine_rectangle_get_position (EngineRectangle* self, Vec2 * result);
void engine_rectangle_get_size (EngineRectangle* self, Size2 * result);
void size2_init (Size2 *self, gfloat width, gfloat height);
void size2_to_size2i (Size2 *self, Size2i* result);
void size2i_init (Size2i *self, gint width, gint height);
void size2i_to_size2 (Size2i *self, Size2* result);
gpointer transform_ref (gpointer instance);
void transform_unref (gpointer instance);
GParamSpec* param_spec_transform (const gchar* name, const gchar* nick, const gchar* blurb, GType object_type, GParamFlags flags);
void value_set_transform (GValue* value, gpointer v_object);
void value_take_transform (GValue* value, gpointer v_object);
gpointer value_get_transform (const GValue* value);
GType transform_get_type (void) G_GNUC_CONST;
Transform* transform_new (void);
Transform* transform_construct (GType object_type);
Transform* transform_new_with_mat (Mat4* mat);
Transform* transform_construct_with_mat (GType object_type, Mat4* mat);
Transform* transform_copy_shallow_parentless (Transform* self);
Transform* transform_copy_full_parentless (Transform* self);
void transform_change_parent (Transform* self, Transform* parent);
void transform_convert_to_parent (Transform* self, Transform* parent);
void transform_apply_transform (Transform* self, Transform* t);
void transform_apply_matrix (Transform* self, Mat4* mat);
void transform_unapply_transform (Transform* self, Transform* t);
void transform_unapply_matrix (Transform* self, Mat4* mat);
Mat4* transform_calculate_matrix (Transform* self);
Mat4* transform_get_full_matrix (Transform* self);
Mat4* transform_get_matrix (Transform* self);
void transform_set_matrix (Transform* self, Mat4* value);
void transform_get_position (Transform* self, Vec3 * result);
void transform_set_position (Transform* self, Vec3 * value);
void transform_get_scale (Transform* self, Vec3 * result);
void transform_set_scale (Transform* self, Vec3 * value);
Quat* transform_get_rotation (Transform* self);
void transform_set_rotation (Transform* self, Quat* value);
gboolean transform_get_dirty_matrix (Transform* self);
gboolean transform_get_dirty_position (Transform* self);
gboolean transform_get_dirty_scale (Transform* self);
gboolean transform_get_dirty_rotation (Transform* self);
GType camera_transform_get_type (void) G_GNUC_CONST;
CameraTransform* camera_transform_new (void);
CameraTransform* camera_transform_construct (GType object_type);
void vec2_init_empty (Vec2 *self);
void vec2_init (Vec2 *self, gfloat x, gfloat y);
void vec2_plus (Vec2 *self, Vec2* other, Vec2* result);
void vec2_minus (Vec2 *self, Vec2* other, Vec2* result);
void vec2_mul_scalar (Vec2 *self, gfloat scalar, Vec2* result);
void vec2i_init_empty (Vec2i *self);
void vec2i_init (Vec2i *self, gint x, gint y);
void vec2i_plus (Vec2i *self, Vec2i* other, Vec2i* result);
void vec2i_mul_scalar (Vec2i *self, gint scalar, Vec2i* result);
void vec3_init_empty (Vec3 *self);
void vec3_init (Vec3 *self, gfloat x, gfloat y, gfloat z);
void vec3_plus (Vec3 *self, Vec3* other, Vec3* result);
void vec3_minus (Vec3 *self, Vec3* other, Vec3* result);
void vec3_mul_scalar (Vec3 *self, gfloat scalar, Vec3* result);
void vec3_div_scalar (Vec3 *self, gfloat scalar, Vec3* result);
gfloat vec3_dot (Vec3 *self, Vec3* other);
gfloat vec3_length (Vec3 *self);
void vec3_normalize (Vec3 *self, Vec3* result);
void vec3_negate (Vec3 *self, Vec3* result);
gfloat vec3_dist_sq (Vec3 *self, Vec3* other);
gfloat vec3_dist (Vec3 *self, Vec3* other);
void vec3_lerp (Vec3* start, Vec3* end, gfloat lerp, Vec3* result);
void vec4_init_empty (Vec4 *self);
void vec4_init (Vec4 *self, gfloat x, gfloat y, gfloat z, gfloat w);
gfloat vec4_dot (Vec4 *self, Vec4* other);
void vec4_minus (Vec4 *self, Vec4* other, Vec4* result);
gfloat vec4_get (Vec4 *self, gint i);
gpointer basic_geometry_ref (gpointer instance);
void basic_geometry_unref (gpointer instance);
GParamSpec* param_spec_basic_geometry (const gchar* name, const gchar* nick, const gchar* blurb, GType object_type, GParamFlags flags);
void value_set_basic_geometry (GValue* value, gpointer v_object);
void value_take_basic_geometry (GValue* value, gpointer v_object);
gpointer value_get_basic_geometry (const GValue* value);
GType basic_geometry_get_type (void) G_GNUC_CONST;
ModelData* basic_geometry_get_plane (void);
gpointer camera_ref (gpointer instance);
void camera_unref (gpointer instance);
GParamSpec* param_spec_camera (const gchar* name, const gchar* nick, const gchar* blurb, GType object_type, GParamFlags flags);
void value_set_camera (GValue* value, gpointer v_object);
void value_take_camera (GValue* value, gpointer v_object);
gpointer value_get_camera (const GValue* value);
GType camera_get_type (void) G_GNUC_CONST;
Camera* camera_new (void);
Camera* camera_construct (GType object_type);
Transform* camera_get_view_transform (Camera* self);
gfloat camera_get_roll (Camera* self);
void camera_set_roll (Camera* self, gfloat value);
gfloat camera_get_pitch (Camera* self);
void camera_set_pitch (Camera* self, gfloat value);
gfloat camera_get_yaw (Camera* self);
void camera_set_yaw (Camera* self, gfloat value);
void camera_get_position (Camera* self, Vec3 * result);
void camera_set_position (Camera* self, Vec3 * value);
gfloat camera_get_focal_length (Camera* self);
void camera_set_focal_length (Camera* self, gfloat value);
gpointer container_ref (gpointer instance);
void container_unref (gpointer instance);
GParamSpec* param_spec_container (const gchar* name, const gchar* nick, const gchar* blurb, GType object_type, GParamFlags flags);
void value_set_container (GValue* value, gpointer v_object);
void value_take_container (GValue* value, gpointer v_object);
gpointer value_get_container (const GValue* value);
GType container_get_type (void) G_GNUC_CONST;
gpointer render_state_ref (gpointer instance);
void render_state_unref (gpointer instance);
GParamSpec* param_spec_render_state (const gchar* name, const gchar* nick, const gchar* blurb, GType object_type, GParamFlags flags);
void value_set_render_state (GValue* value, gpointer v_object);
void value_take_render_state (GValue* value, gpointer v_object);
gpointer value_get_render_state (const GValue* value);
GType render_state_get_type (void) G_GNUC_CONST;
GType render_scene_get_type (void) G_GNUC_CONST;
GType render_scene2_d_get_type (void) G_GNUC_CONST;
gpointer mouse_event_args_ref (gpointer instance);
void mouse_event_args_unref (gpointer instance);
GParamSpec* param_spec_mouse_event_args (const gchar* name, const gchar* nick, const gchar* blurb, GType object_type, GParamFlags flags);
void value_set_mouse_event_args (GValue* value, gpointer v_object);
void value_take_mouse_event_args (GValue* value, gpointer v_object);
gpointer value_get_mouse_event_args (const GValue* value);
GType mouse_event_args_get_type (void) G_GNUC_CONST;
gpointer mouse_move_args_ref (gpointer instance);
void mouse_move_args_unref (gpointer instance);
GParamSpec* param_spec_mouse_move_args (const gchar* name, const gchar* nick, const gchar* blurb, GType object_type, GParamFlags flags);
void value_set_mouse_move_args (GValue* value, gpointer v_object);
void value_take_mouse_move_args (GValue* value, gpointer v_object);
gpointer value_get_mouse_move_args (const GValue* value);
GType mouse_move_args_get_type (void) G_GNUC_CONST;
gpointer key_args_ref (gpointer instance);
void key_args_unref (gpointer instance);
GParamSpec* param_spec_key_args (const gchar* name, const gchar* nick, const gchar* blurb, GType object_type, GParamFlags flags);
void value_set_key_args (GValue* value, gpointer v_object);
void value_take_key_args (GValue* value, gpointer v_object);
gpointer value_get_key_args (const GValue* value);
GType key_args_get_type (void) G_GNUC_CONST;
gpointer text_input_args_ref (gpointer instance);
void text_input_args_unref (gpointer instance);
GParamSpec* param_spec_text_input_args (const gchar* name, const gchar* nick, const gchar* blurb, GType object_type, GParamFlags flags);
void value_set_text_input_args (GValue* value, gpointer v_object);
void value_take_text_input_args (GValue* value, gpointer v_object);
gpointer value_get_text_input_args (const GValue* value);
GType text_input_args_get_type (void) G_GNUC_CONST;
gpointer text_edit_args_ref (gpointer instance);
void text_edit_args_unref (gpointer instance);
GParamSpec* param_spec_text_edit_args (const gchar* name, const gchar* nick, const gchar* blurb, GType object_type, GParamFlags flags);
void value_set_text_edit_args (GValue* value, gpointer v_object);
void value_take_text_edit_args (GValue* value, gpointer v_object);
gpointer value_get_text_edit_args (const GValue* value);
GType text_edit_args_get_type (void) G_GNUC_CONST;
gpointer render_window_ref (gpointer instance);
void render_window_unref (gpointer instance);
GParamSpec* param_spec_render_window (const gchar* name, const gchar* nick, const gchar* blurb, GType object_type, GParamFlags flags);
void value_set_render_window (GValue* value, gpointer v_object);
void value_take_render_window (GValue* value, gpointer v_object);
gpointer value_get_render_window (const GValue* value);
GType render_window_get_type (void) G_GNUC_CONST;
GType view2_d_get_type (void) G_GNUC_CONST;
GType debug_view_get_type (void) G_GNUC_CONST;
DebugView* debug_view_new (void);
DebugView* debug_view_construct (GType object_type);
gpointer debug_info_ref (gpointer instance);
void debug_info_unref (gpointer instance);
GParamSpec* param_spec_debug_info (const gchar* name, const gchar* nick, const gchar* blurb, GType object_type, GParamFlags flags);
void value_set_debug_info (GValue* value, gpointer v_object);
void value_take_debug_info (GValue* value, gpointer v_object);
gpointer value_get_debug_info (const GValue* value);
GType debug_info_get_type (void) G_GNUC_CONST;
DebugInfo* debug_view_get_info (DebugView* self);
void debug_view_set_info (DebugView* self, DebugInfo* value);
DebugInfo* debug_info_new (void);
DebugInfo* debug_info_construct (GType object_type);
void debug_info_add_strings (DebugInfo* self, gchar** strings, int strings_length1);
GeeArrayList* debug_info_get_strings (DebugInfo* self);
GType imodel_resource_handle_get_type (void) G_GNUC_CONST;
GType itexture_resource_handle_get_type (void) G_GNUC_CONST;
GType ilabel_resource_handle_get_type (void) G_GNUC_CONST;
gpointer light_source_ref (gpointer instance);
void light_source_unref (gpointer instance);
GParamSpec* param_spec_light_source (const gchar* name, const gchar* nick, const gchar* blurb, GType object_type, GParamFlags flags);
void value_set_light_source (GValue* value, gpointer v_object);
void value_take_light_source (GValue* value, gpointer v_object);
gpointer value_get_light_source (const GValue* value);
GType light_source_get_type (void) G_GNUC_CONST;
LightSource* light_source_new (void);
LightSource* light_source_construct (GType object_type);
LightSource* light_source_copy (LightSource* self);
Transform* light_source_get_transform (LightSource* self);
void light_source_set_transform (LightSource* self, Transform* value);
void light_source_get_color (LightSource* self, Color * result);
void light_source_set_color (LightSource* self, Color * value);
gfloat light_source_get_intensity (LightSource* self);
void light_source_set_intensity (LightSource* self, gfloat value);
gpointer iresource_ref (gpointer instance);
void iresource_unref (gpointer instance);
GParamSpec* param_spec_iresource (const gchar* name, const gchar* nick, const gchar* blurb, GType object_type, GParamFlags flags);
void value_set_iresource (GValue* value, gpointer v_object);
void value_take_iresource (GValue* value, gpointer v_object);
gpointer value_get_iresource (const GValue* value);
GType iresource_get_type (void) G_GNUC_CONST;
GType transformable3_d_get_type (void) G_GNUC_CONST;
Transformable3D* transformable3_d_construct (GType object_type);
Transformable3D* transformable3_d_copy (Transformable3D* self);
Transformable3D* transformable3_d_copy_internal (Transformable3D* self);
Transformable3D* transformable3_d_copy_transformable (Transformable3D* self, Transform* transform);
Transform* transformable3_d_get_transform (Transformable3D* self);
void transformable3_d_set_transform (Transformable3D* self, Transform* value);
GType render_geometry3_d_get_type (void) G_GNUC_CONST;
RenderGeometry3D* render_geometry3_d_new (void);
RenderGeometry3D* render_geometry3_d_construct (GType object_type);
GType render_object3_d_get_type (void) G_GNUC_CONST;
RenderGeometry3D* render_geometry3_d_new_with_objects (GeeArrayList* objects);
RenderGeometry3D* render_geometry3_d_construct_with_objects (GType object_type, GeeArrayList* objects);
RenderGeometry3D* render_geometry3_d_new_with_transformables (GeeArrayList* geometry);
RenderGeometry3D* render_geometry3_d_construct_with_transformables (GType object_type, GeeArrayList* geometry);
GeeArrayList* render_geometry3_d_get_geometry (RenderGeometry3D* self);
gpointer render_material_ref (gpointer instance);
void render_material_unref (gpointer instance);
GParamSpec* param_spec_render_material (const gchar* name, const gchar* nick, const gchar* blurb, GType object_type, GParamFlags flags);
void value_set_render_material (GValue* value, gpointer v_object);
void value_take_render_material (GValue* value, gpointer v_object);
gpointer value_get_render_material (const GValue* value);
GType render_material_get_type (void) G_GNUC_CONST;
RenderMaterial* render_material_new (void);
RenderMaterial* render_material_construct (GType object_type);
RenderMaterial* render_material_copy (RenderMaterial* self);
void render_material_get_ambient_color (RenderMaterial* self, Color * result);
void render_material_set_ambient_color (RenderMaterial* self, Color * value);
void render_material_get_diffuse_color (RenderMaterial* self, Color * result);
void render_material_set_diffuse_color (RenderMaterial* self, Color * value);
void render_material_get_specular_color (RenderMaterial* self, Color * result);
void render_material_set_specular_color (RenderMaterial* self, Color * value);
gfloat render_material_get_ambient_material_strength (RenderMaterial* self);
void render_material_set_ambient_material_strength (RenderMaterial* self, gfloat value);
gfloat render_material_get_diffuse_material_strength (RenderMaterial* self);
void render_material_set_diffuse_material_strength (RenderMaterial* self, gfloat value);
gfloat render_material_get_specular_material_strength (RenderMaterial* self);
void render_material_set_specular_material_strength (RenderMaterial* self, gfloat value);
gfloat render_material_get_specular_exponent (RenderMaterial* self);
void render_material_set_specular_exponent (RenderMaterial* self, gfloat value);
gfloat render_material_get_alpha (RenderMaterial* self);
void render_material_set_alpha (RenderMaterial* self, gfloat value);
GType blend_type_get_type (void) G_GNUC_CONST;
GType render_object2_d_get_type (void) G_GNUC_CONST;
RenderObject2D* render_object2_d_copy (RenderObject2D* self);
RenderObject2D* render_object2_d_copy_new (RenderObject2D* self);
RenderObject2D* render_object2_d_construct (GType object_type);
gfloat render_object2_d_get_rotation (RenderObject2D* self);
void render_object2_d_set_rotation (RenderObject2D* self, gfloat value);
void render_object2_d_get_position (RenderObject2D* self, Vec2 * result);
void render_object2_d_set_position (RenderObject2D* self, Vec2 * value);
void render_object2_d_get_scale (RenderObject2D* self, Size2 * result);
void render_object2_d_set_scale (RenderObject2D* self, Size2 * value);
void render_object2_d_get_diffuse_color (RenderObject2D* self, Color * result);
void render_object2_d_set_diffuse_color (RenderObject2D* self, Color * value);
gboolean render_object2_d_get_scissor (RenderObject2D* self);
void render_object2_d_set_scissor (RenderObject2D* self, gboolean value);
void render_object2_d_get_scissor_box (RenderObject2D* self, EngineRectangle * result);
void render_object2_d_set_scissor_box (RenderObject2D* self, EngineRectangle * value);
GType render_image2_d_get_type (void) G_GNUC_CONST;
GType render_texture_get_type (void) G_GNUC_CONST;
RenderImage2D* render_image2_d_new (RenderTexture* texture);
RenderImage2D* render_image2_d_construct (GType object_type, RenderTexture* texture);
RenderTexture* render_image2_d_get_texture (RenderImage2D* self);
void render_image2_d_set_texture (RenderImage2D* self, RenderTexture* value);
GType render_label2_d_get_type (void) G_GNUC_CONST;
gpointer label_resource_reference_ref (gpointer instance);
void label_resource_reference_unref (gpointer instance);
GParamSpec* param_spec_label_resource_reference (const gchar* name, const gchar* nick, const gchar* blurb, GType object_type, GParamFlags flags);
void value_set_label_resource_reference (GValue* value, gpointer v_object);
void value_take_label_resource_reference (GValue* value, gpointer v_object);
gpointer value_get_label_resource_reference (const GValue* value);
GType label_resource_reference_get_type (void) G_GNUC_CONST;
RenderLabel2D* render_label2_d_new (LabelResourceReference* reference);
RenderLabel2D* render_label2_d_construct (GType object_type, LabelResourceReference* reference);
LabelInfo* render_label2_d_get_info (RenderLabel2D* self);
LabelResourceReference* render_label2_d_get_reference (RenderLabel2D* self);
const gchar* render_label2_d_get_font_type (RenderLabel2D* self);
void render_label2_d_set_font_type (RenderLabel2D* self, const gchar* value);
gfloat render_label2_d_get_font_size (RenderLabel2D* self);
void render_label2_d_set_font_size (RenderLabel2D* self, gfloat value);
const gchar* render_label2_d_get_text (RenderLabel2D* self);
void render_label2_d_set_text (RenderLabel2D* self, const gchar* value);
GType render_rectangle2_d_get_type (void) G_GNUC_CONST;
RenderRectangle2D* render_rectangle2_d_new (void);
RenderRectangle2D* render_rectangle2_d_construct (GType object_type);
GType render_model_get_type (void) G_GNUC_CONST;
RenderObject3D* render_object3_d_construct (GType object_type, RenderModel* model, RenderMaterial* material);
RenderObject3D* render_object3_d_copy_object (RenderObject3D* self);
RenderModel* render_object3_d_get_model (RenderObject3D* self);
void render_object3_d_set_model (RenderObject3D* self, RenderModel* value);
RenderMaterial* render_object3_d_get_material (RenderObject3D* self);
void render_object3_d_set_material (RenderObject3D* self, RenderMaterial* value);
GType render_body3_d_get_type (void) G_GNUC_CONST;
RenderBody3D* render_body3_d_new (RenderModel* model, RenderMaterial* material);
RenderBody3D* render_body3_d_construct (GType object_type, RenderModel* model, RenderMaterial* material);
RenderTexture* render_body3_d_get_texture (RenderBody3D* self);
void render_body3_d_set_texture (RenderBody3D* self, RenderTexture* value);
GType render_label3_d_get_type (void) G_GNUC_CONST;
RenderLabel3D* render_label3_d_new (LabelResourceReference* reference, RenderModel* model);
RenderLabel3D* render_label3_d_construct (GType object_type, LabelResourceReference* reference, RenderModel* model);
Transform* render_label3_d_get_label_transform (RenderLabel3D* self);
LabelInfo* render_label3_d_get_info (RenderLabel3D* self);
LabelResourceReference* render_label3_d_get_reference (RenderLabel3D* self);
const gchar* render_label3_d_get_font_type (RenderLabel3D* self);
void render_label3_d_set_font_type (RenderLabel3D* self, const gchar* value);
gfloat render_label3_d_get_font_size (RenderLabel3D* self);
void render_label3_d_set_font_size (RenderLabel3D* self, gfloat value);
const gchar* render_label3_d_get_text (RenderLabel3D* self);
void render_label3_d_set_text (RenderLabel3D* self, const gchar* value);
gboolean render_label3_d_get_bold (RenderLabel3D* self);
void render_label3_d_set_bold (RenderLabel3D* self, gboolean value);
void render_label3_d_get_color (RenderLabel3D* self, Color * result);
void render_label3_d_set_color (RenderLabel3D* self, Color * value);
void render_label3_d_get_end_size (RenderLabel3D* self, Vec3 * result);
RenderScene2D* render_scene2_d_new (Size2i* screen_size, EngineRectangle* rect);
RenderScene2D* render_scene2_d_construct (GType object_type, Size2i* screen_size, EngineRectangle* rect);
void render_scene2_d_add_object (RenderScene2D* self, RenderObject2D* object);
GeeArrayList* render_scene2_d_get_objects (RenderScene2D* self);
void render_scene2_d_get_screen_size (RenderScene2D* self, Size2i * result);
void render_scene2_d_get_rect (RenderScene2D* self, EngineRectangle * result);
RenderScene* render_scene_construct (GType object_type);
GType render_scene3_d_get_type (void) G_GNUC_CONST;
RenderScene3D* render_scene3_d_new (gboolean copy_state, Size2i* screen_size, gfloat scene_aspect_ratio, EngineRectangle* rect);
RenderScene3D* render_scene3_d_construct (GType object_type, gboolean copy_state, Size2i* screen_size, gfloat scene_aspect_ratio, EngineRectangle* rect);
void render_scene3_d_add_object (RenderScene3D* self, Transformable3D* object);
void render_scene3_d_add_light_source (RenderScene3D* self, LightSource* light);
void render_scene3_d_set_camera (RenderScene3D* self, Camera* camera);
GeeArrayList* render_scene3_d_get_objects (RenderScene3D* self);
GeeArrayList* render_scene3_d_get_lights (RenderScene3D* self);
Mat4* render_scene3_d_get_scene_matrix (RenderScene3D* self);
Mat4* render_scene3_d_get_view_matrix (RenderScene3D* self);
void render_scene3_d_get_camera_position (RenderScene3D* self, Vec3 * result);
gfloat render_scene3_d_get_focal_length (RenderScene3D* self);
void render_scene3_d_get_rect (RenderScene3D* self, EngineRectangle * result);
void render_scene3_d_get_screen_size (RenderScene3D* self, Size2i * result);
RenderState* render_state_new (Size2i* screen_size, gboolean copy_state, DeltaArgs* delta);
RenderState* render_state_construct (GType object_type, Size2i* screen_size, gboolean copy_state, DeltaArgs* delta);
void render_state_add_scene (RenderState* self, RenderScene* scene);
void render_state_get_back_color (RenderState* self, Color * result);
void render_state_set_back_color (RenderState* self, Color * value);
void render_state_get_screen_size (RenderState* self, Size2i * result);
gboolean render_state_get_copy_state (RenderState* self);
DeltaArgs* render_state_get_delta (RenderState* self);
GeeArrayList* render_state_get_scenes (RenderState* self);
gpointer input_resource_model_ref (gpointer instance);
void input_resource_model_unref (gpointer instance);
GParamSpec* param_spec_input_resource_model (const gchar* name, const gchar* nick, const gchar* blurb, GType object_type, GParamFlags flags);
void value_set_input_resource_model (GValue* value, gpointer v_object);
void value_take_input_resource_model (GValue* value, gpointer v_object);
gpointer value_get_input_resource_model (const GValue* value);
GType input_resource_model_get_type (void) G_GNUC_CONST;
gpointer input_resource_texture_ref (gpointer instance);
void input_resource_texture_unref (gpointer instance);
GParamSpec* param_spec_input_resource_texture (const gchar* name, const gchar* nick, const gchar* blurb, GType object_type, GParamFlags flags);
void value_set_input_resource_texture (GValue* value, gpointer v_object);
void value_take_input_resource_texture (GValue* value, gpointer v_object);
gpointer value_get_input_resource_texture (const GValue* value);
GType input_resource_texture_get_type (void) G_GNUC_CONST;
GType render_target_label_resource_handle_get_type (void) G_GNUC_CONST;
gpointer resource_store_ref (gpointer instance);
void resource_store_unref (gpointer instance);
GParamSpec* param_spec_resource_store (const gchar* name, const gchar* nick, const gchar* blurb, GType object_type, GParamFlags flags);
void value_set_resource_store (GValue* value, gpointer v_object);
void value_take_resource_store (GValue* value, gpointer v_object);
gpointer value_get_resource_store (const GValue* value);
GType resource_store_get_type (void) G_GNUC_CONST;
RenderTarget* render_target_construct (GType object_type, IWindowTarget* window, gboolean multithread_rendering, gboolean debug);
void render_target_set_state (RenderTarget* self, RenderState* state, RenderWindow* window);
gboolean render_target_init (RenderTarget* self);
void render_target_cycle (RenderTarget* self);
void render_target_stop (RenderTarget* self);
IModelResourceHandle* render_target_load_model (RenderTarget* self, InputResourceModel* model);
ITextureResourceHandle* render_target_load_texture (RenderTarget* self, InputResourceTexture* texture);
ILabelResourceHandle* render_target_load_label (RenderTarget* self);
void render_target_unload_model (RenderTarget* self, IModelResourceHandle* model);
void render_target_unload_texture (RenderTarget* self, ITextureResourceHandle* texture);
void render_target_unload_label (RenderTarget* self, ILabelResourceHandle* label);
Mat4* render_target_get_projection_matrix (RenderTarget* self, gfloat view_angle, gfloat aspect_ratio);
void render_target_render (RenderTarget* self, RenderState* state);
gboolean render_target_renderer_init (RenderTarget* self);
void render_target_do_load_model (RenderTarget* self, IModelResourceHandle* handle);
void render_target_do_load_texture (RenderTarget* self, ITextureResourceHandle* handle);
void render_target_do_load_label (RenderTarget* self, ILabelResourceHandle* handle, LabelBitmap* bitmap);
void render_target_do_unload_model (RenderTarget* self, IModelResourceHandle* handle);
void render_target_do_unload_texture (RenderTarget* self, ITextureResourceHandle* handle);
void render_target_do_unload_label (RenderTarget* self, ILabelResourceHandle* handle);
IModelResourceHandle* render_target_init_model (RenderTarget* self, InputResourceModel* model);
ITextureResourceHandle* render_target_init_texture (RenderTarget* self, InputResourceTexture* texture);
RenderTargetLabelResourceHandle* render_target_init_label (RenderTarget* self);
void render_target_change_v_sync (RenderTarget* self, gboolean v_sync);
gboolean render_target_change_shader_3D (RenderTarget* self, const gchar* name);
gboolean render_target_change_shader_2D (RenderTarget* self, const gchar* name);
gchar** render_target_get_debug_strings (RenderTarget* self, int* result_length1);
void render_target_do_secondly (RenderTarget* self);
ResourceStore* render_target_get_resource_store (RenderTarget* self);
gboolean render_target_get_v_sync (RenderTarget* self);
void render_target_set_v_sync (RenderTarget* self, gboolean value);
gboolean render_target_get_anisotropic_filtering (RenderTarget* self);
void render_target_set_anisotropic_filtering (RenderTarget* self, gboolean value);
gboolean render_target_get_multithread_rendering (RenderTarget* self);
gboolean render_target_get_debug (RenderTarget* self);
gchar* render_target_get_shader_3D (RenderTarget* self);
void render_target_set_shader_3D (RenderTarget* self, const gchar* value);
gchar* render_target_get_shader_2D (RenderTarget* self);
void render_target_set_shader_2D (RenderTarget* self, const gchar* value);
RenderTargetLabelResourceHandle* render_target_label_resource_handle_construct (GType object_type);
gboolean render_target_label_resource_handle_get_created (RenderTargetLabelResourceHandle* self);
void render_target_label_resource_handle_set_created (RenderTargetLabelResourceHandle* self, gboolean value);
const gchar* render_target_label_resource_handle_get_font_type (RenderTargetLabelResourceHandle* self);
void render_target_label_resource_handle_set_font_type (RenderTargetLabelResourceHandle* self, const gchar* value);
gfloat render_target_label_resource_handle_get_font_size (RenderTargetLabelResourceHandle* self);
void render_target_label_resource_handle_set_font_size (RenderTargetLabelResourceHandle* self, gfloat value);
const gchar* render_target_label_resource_handle_get_text (RenderTargetLabelResourceHandle* self);
void render_target_label_resource_handle_set_text (RenderTargetLabelResourceHandle* self, const gchar* value);
#define RESOURCE_STORE_MODEL_DIR RESOURCE_STORE_DATA_DIR "Models/"
#define RESOURCE_STORE_TEXTURE_DIR RESOURCE_STORE_DATA_DIR "Textures/"
ResourceStore* resource_store_new (RenderTarget* renderer);
ResourceStore* resource_store_construct (GType object_type, RenderTarget* renderer);
RenderGeometry3D* resource_store_load_geometry_3D (ResourceStore* self, const gchar* filename, gboolean do_load_texture);
RenderGeometry3D* resource_store_load_geometry_3D_dir (ResourceStore* self, const gchar* dir, const gchar* filename, gboolean do_load_texture);
RenderBody3D* resource_store_load_body_3D (ResourceStore* self, const gchar* filename, const gchar* modelname);
RenderModel* resource_store_load_model (ResourceStore* self, const gchar* filename, const gchar* modelname);
RenderTexture* resource_store_load_texture (ResourceStore* self, const gchar* filename);
RenderModel* resource_store_load_model_dir (ResourceStore* self, const gchar* dir, const gchar* filename, const gchar* modelname);
RenderTexture* resource_store_load_texture_dir (ResourceStore* self, const gchar* dir, const gchar* filename);
RenderLabel2D* resource_store_create_label (ResourceStore* self);
RenderLabel3D* resource_store_create_label_3D (ResourceStore* self);
void resource_store_delete_label (ResourceStore* self, LabelResourceReference* reference);
LabelInfo* resource_store_update_label (ResourceStore* self, const gchar* font_type, gfloat font_size, const gchar* text);
LabelBitmap* resource_store_generate_label_bitmap (ResourceStore* self, RenderLabel2D* label);
LabelBitmap* resource_store_generate_label_bitmap_3D (ResourceStore* self, RenderLabel3D* label);
RenderBody3D* resource_store_create_plane (ResourceStore* self);
AudioPlayer* resource_store_get_audio_player (ResourceStore* self);
InputResourceModel* input_resource_model_new (ModelPoint* points, int points_length1);
InputResourceModel* input_resource_model_construct (GType object_type, ModelPoint* points, int points_length1);
ModelPoint* input_resource_model_get_points (InputResourceModel* self, int* result_length1);
InputResourceTexture* input_resource_texture_new (guchar* data, int data_length1, Size2i* size);
InputResourceTexture* input_resource_texture_construct (GType object_type, guchar* data, int data_length1, Size2i* size);
guchar* input_resource_texture_get_data (InputResourceTexture* self, int* result_length1);
void input_resource_texture_get_size (InputResourceTexture* self, Size2i * result);
LabelResourceReference* label_resource_reference_new (ILabelResourceHandle* handle, ResourceStore* store);
LabelResourceReference* label_resource_reference_construct (GType object_type, ILabelResourceHandle* handle, ResourceStore* store);
LabelInfo* label_resource_reference_update (LabelResourceReference* self, const gchar* font_type, gfloat font_size, const gchar* text);
void label_resource_reference_delete_label (LabelResourceReference* self);
ILabelResourceHandle* label_resource_reference_get_handle (LabelResourceReference* self);
gboolean label_resource_reference_get_deleted (LabelResourceReference* self);
RenderModel* render_model_new (IModelResourceHandle* handle, const gchar* name, Vec3* size);
RenderModel* render_model_construct (GType object_type, IModelResourceHandle* handle, const gchar* name, Vec3* size);
IModelResourceHandle* render_model_get_handle (RenderModel* self);
const gchar* render_model_get_name (RenderModel* self);
void render_model_get_size (RenderModel* self, Vec3 * result);
RenderTexture* render_texture_new (ITextureResourceHandle* handle, Size2i* size);
RenderTexture* render_texture_construct (GType object_type, ITextureResourceHandle* handle, Size2i* size);
ITextureResourceHandle* render_texture_get_handle (RenderTexture* self);
void render_texture_get_size (RenderTexture* self, Size2i * result);
IResource* iresource_new (void);
IResource* iresource_construct (GType object_type);
gpointer open_gl_frame_buffer_ref (gpointer instance);
void open_gl_frame_buffer_unref (gpointer instance);
GParamSpec* param_spec_open_gl_frame_buffer (const gchar* name, const gchar* nick, const gchar* blurb, GType object_type, GParamFlags flags);
void value_set_open_gl_frame_buffer (GValue* value, gpointer v_object);
void value_take_open_gl_frame_buffer (GValue* value, gpointer v_object);
gpointer value_get_open_gl_frame_buffer (const GValue* value);
GType open_gl_frame_buffer_get_type (void) G_GNUC_CONST;
OpenGLFrameBuffer* open_gl_frame_buffer_new (gint width, gint height);
OpenGLFrameBuffer* open_gl_frame_buffer_construct (GType object_type, gint width, gint height);
void open_gl_frame_buffer_bind (OpenGLFrameBuffer* self);
void open_gl_frame_buffer_bind_default (void);
gpointer open_gl_render_buffer_ref (gpointer instance);
void open_gl_render_buffer_unref (gpointer instance);
GParamSpec* param_spec_open_gl_render_buffer (const gchar* name, const gchar* nick, const gchar* blurb, GType object_type, GParamFlags flags);
void value_set_open_gl_render_buffer (GValue* value, gpointer v_object);
void value_take_open_gl_render_buffer (GValue* value, gpointer v_object);
gpointer value_get_open_gl_render_buffer (const GValue* value);
GType open_gl_render_buffer_get_type (void) G_GNUC_CONST;
OpenGLRenderBuffer* open_gl_frame_buffer_get_render_buffer (OpenGLFrameBuffer* self);
guint open_gl_frame_buffer_get_handle (OpenGLFrameBuffer* self);
gint open_gl_frame_buffer_get_width (OpenGLFrameBuffer* self);
gint open_gl_frame_buffer_get_height (OpenGLFrameBuffer* self);
OpenGLRenderBuffer* open_gl_render_buffer_new (gint width, gint height);
OpenGLRenderBuffer* open_gl_render_buffer_construct (GType object_type, gint width, gint height);
void open_gl_render_buffer_bind (OpenGLRenderBuffer* self);
void open_gl_render_buffer_bind_default (void);
guint open_gl_render_buffer_get_handle (OpenGLRenderBuffer* self);
gint open_gl_render_buffer_get_width (OpenGLRenderBuffer* self);
gint open_gl_render_buffer_get_height (OpenGLRenderBuffer* self);
GType open_gl_renderer_get_type (void) G_GNUC_CONST;
OpenGLRenderer* open_gl_renderer_new (IWindowTarget* window, gboolean multithread_rendering, gboolean debug);
OpenGLRenderer* open_gl_renderer_construct (GType object_type, IWindowTarget* window, gboolean multithread_rendering, gboolean debug);
gpointer open_gl_shader_builder_ref (gpointer instance);
void open_gl_shader_builder_unref (gpointer instance);
GParamSpec* param_spec_open_gl_shader_builder (const gchar* name, const gchar* nick, const gchar* blurb, GType object_type, GParamFlags flags);
void value_set_open_gl_shader_builder (GValue* value, gpointer v_object);
void value_take_open_gl_shader_builder (GValue* value, gpointer v_object);
gpointer value_get_open_gl_shader_builder (const GValue* value);
GType open_gl_shader_builder_get_type (void) G_GNUC_CONST;
gpointer open_gl_shader_dependency_tree_ref (gpointer instance);
void open_gl_shader_dependency_tree_unref (gpointer instance);
GParamSpec* param_spec_open_gl_shader_dependency_tree (const gchar* name, const gchar* nick, const gchar* blurb, GType object_type, GParamFlags flags);
void value_set_open_gl_shader_dependency_tree (GValue* value, gpointer v_object);
void value_take_open_gl_shader_dependency_tree (GValue* value, gpointer v_object);
gpointer value_get_open_gl_shader_dependency_tree (const GValue* value);
GType open_gl_shader_dependency_tree_get_type (void) G_GNUC_CONST;
gpointer open_gl_shader_unit_ref (gpointer instance);
void open_gl_shader_unit_unref (gpointer instance);
GParamSpec* param_spec_open_gl_shader_unit (const gchar* name, const gchar* nick, const gchar* blurb, GType object_type, GParamFlags flags);
void value_set_open_gl_shader_unit (GValue* value, gpointer v_object);
void value_take_open_gl_shader_unit (GValue* value, gpointer v_object);
gpointer value_get_open_gl_shader_unit (const GValue* value);
GType open_gl_shader_unit_get_type (void) G_GNUC_CONST;
GType open_gl_shader_function_get_type (void) G_GNUC_CONST;
GType open_gl2_dshader_builder_get_type (void) G_GNUC_CONST;
OpenGL2DShaderBuilder* open_gl2_dshader_builder_new (void);
OpenGL2DShaderBuilder* open_gl2_dshader_builder_construct (GType object_type);
GType open_gl_shader_primitive_type_get_type (void) G_GNUC_CONST;
GType open_gl_shader_property_direction_get_type (void) G_GNUC_CONST;
void open_gl_shader_unit_add_dependency (OpenGLShaderUnit* self, OpenGLShaderUnit* dependency);
void open_gl_shader_unit_to_string (OpenGLShaderUnit* self, GString* str);
OpenGLShaderUnit* open_gl_shader_unit_construct (GType object_type);
OpenGLShaderUnit** open_gl_shader_unit_get_dependencies (OpenGLShaderUnit* self, int* result_length1);
void open_gl_shader_unit_set_dependencies (OpenGLShaderUnit* self, OpenGLShaderUnit** value, int value_length1);
GType open_gl_shader_define_get_type (void) G_GNUC_CONST;
OpenGLShaderDefine* open_gl_shader_define_new (const gchar* name, const gchar* value);
OpenGLShaderDefine* open_gl_shader_define_construct (GType object_type, const gchar* name, const gchar* value);
const gchar* open_gl_shader_define_get_name (OpenGLShaderDefine* self);
void open_gl_shader_define_set_name (OpenGLShaderDefine* self, const gchar* value);
const gchar* open_gl_shader_define_get_value (OpenGLShaderDefine* self);
void open_gl_shader_define_set_value (OpenGLShaderDefine* self, const gchar* value);
GType open_gl_shader_property_get_type (void) G_GNUC_CONST;
GType open_gl_shader_attribute_get_type (void) G_GNUC_CONST;
OpenGLShaderAttribute* open_gl_shader_attribute_new (const gchar* name, OpenGLShaderPrimitiveType primitive);
OpenGLShaderAttribute* open_gl_shader_attribute_construct (GType object_type, const gchar* name, OpenGLShaderPrimitiveType primitive);
GType open_gl_shader_varying_get_type (void) G_GNUC_CONST;
OpenGLShaderVarying* open_gl_shader_varying_new (const gchar* name, OpenGLShaderPrimitiveType primitive);
OpenGLShaderVarying* open_gl_shader_varying_construct (GType object_type, const gchar* name, OpenGLShaderPrimitiveType primitive);
GType open_gl_shader_uniform_get_type (void) G_GNUC_CONST;
OpenGLShaderUniform* open_gl_shader_uniform_new (const gchar* name, OpenGLShaderPrimitiveType primitive);
OpenGLShaderUniform* open_gl_shader_uniform_construct (GType object_type, const gchar* name, OpenGLShaderPrimitiveType primitive);
OpenGLShaderProperty* open_gl_shader_property_new (const gchar* name, OpenGLShaderPrimitiveType primitive);
OpenGLShaderProperty* open_gl_shader_property_construct (GType object_type, const gchar* name, OpenGLShaderPrimitiveType primitive);
const gchar* open_gl_shader_property_get_name (OpenGLShaderProperty* self);
void open_gl_shader_property_set_name (OpenGLShaderProperty* self, const gchar* value);
OpenGLShaderPrimitiveType open_gl_shader_property_get_primitive (OpenGLShaderProperty* self);
void open_gl_shader_property_set_primitive (OpenGLShaderProperty* self, OpenGLShaderPrimitiveType value);
const gchar* open_gl_shader_property_get_custom_type (OpenGLShaderProperty* self);
void open_gl_shader_property_set_custom_type (OpenGLShaderProperty* self, const gchar* value);
const gchar* open_gl_shader_property_get_array (OpenGLShaderProperty* self);
void open_gl_shader_property_set_array (OpenGLShaderProperty* self, const gchar* value);
OpenGLShaderPropertyDirection open_gl_shader_property_get_direction (OpenGLShaderProperty* self);
void open_gl_shader_property_set_direction (OpenGLShaderProperty* self, OpenGLShaderPropertyDirection value);
GType open_gl_shader_struct_get_type (void) G_GNUC_CONST;
OpenGLShaderStruct* open_gl_shader_struct_new (const gchar* name, OpenGLShaderProperty** properties, int properties_length1);
OpenGLShaderStruct* open_gl_shader_struct_construct (GType object_type, const gchar* name, OpenGLShaderProperty** properties, int properties_length1);
const gchar* open_gl_shader_struct_get_name (OpenGLShaderStruct* self);
void open_gl_shader_struct_set_name (OpenGLShaderStruct* self, const gchar* value);
OpenGLShaderProperty** open_gl_shader_struct_get_properties (OpenGLShaderStruct* self, int* result_length1);
void open_gl_shader_struct_set_properties (OpenGLShaderStruct* self, OpenGLShaderProperty** value, int value_length1);
GType open_gl_shader_code_block_get_type (void) G_GNUC_CONST;
OpenGLShaderCodeBlock* open_gl_shader_code_block_new (const gchar* code);
OpenGLShaderCodeBlock* open_gl_shader_code_block_construct (GType object_type, const gchar* code);
const gchar* open_gl_shader_code_block_get_code (OpenGLShaderCodeBlock* self);
void open_gl_shader_code_block_set_code (OpenGLShaderCodeBlock* self, const gchar* value);
OpenGLShaderFunction* open_gl_shader_function_new (const gchar* name, OpenGLShaderPrimitiveType return_type);
OpenGLShaderFunction* open_gl_shader_function_construct (GType object_type, const gchar* name, OpenGLShaderPrimitiveType return_type);
void open_gl_shader_function_add_code (OpenGLShaderFunction* self, OpenGLShaderCodeBlock* code);
void open_gl_shader_function_add_codes (OpenGLShaderFunction* self, OpenGLShaderCodeBlock** codes, int codes_length1);
void open_gl_shader_function_add_codes_list (OpenGLShaderFunction* self, GeeArrayList* codes);
const gchar* open_gl_shader_function_get_name (OpenGLShaderFunction* self);
void open_gl_shader_function_set_name (OpenGLShaderFunction* self, const gchar* value);
OpenGLShaderPrimitiveType open_gl_shader_function_get_return_type (OpenGLShaderFunction* self);
void open_gl_shader_function_set_return_type (OpenGLShaderFunction* self, OpenGLShaderPrimitiveType value);
OpenGLShaderProperty** open_gl_shader_function_get_parameters (OpenGLShaderFunction* self, int* result_length1);
void open_gl_shader_function_set_parameters (OpenGLShaderFunction* self, OpenGLShaderProperty** value, int value_length1);
gpointer open_gl_shader_code_dependency_tree_ref (gpointer instance);
void open_gl_shader_code_dependency_tree_unref (gpointer instance);
GParamSpec* param_spec_open_gl_shader_code_dependency_tree (const gchar* name, const gchar* nick, const gchar* blurb, GType object_type, GParamFlags flags);
void value_set_open_gl_shader_code_dependency_tree (GValue* value, gpointer v_object);
void value_take_open_gl_shader_code_dependency_tree (GValue* value, gpointer v_object);
gpointer value_get_open_gl_shader_code_dependency_tree (const GValue* value);
GType open_gl_shader_code_dependency_tree_get_type (void) G_GNUC_CONST;
void open_gl_shader_code_dependency_tree_add (OpenGLShaderCodeDependencyTree* self, OpenGLShaderCodeBlock* code);
GeeArrayList* open_gl_shader_code_dependency_tree_get_list (OpenGLShaderCodeDependencyTree* self);
OpenGLShaderCodeDependencyTree* open_gl_shader_code_dependency_tree_new (void);
OpenGLShaderCodeDependencyTree* open_gl_shader_code_dependency_tree_construct (GType object_type);
void open_gl_shader_dependency_tree_add (OpenGLShaderDependencyTree* self, OpenGLShaderUnit* unit);
GeeArrayList* open_gl_shader_dependency_tree_get_list (OpenGLShaderDependencyTree* self);
OpenGLShaderDependencyTree* open_gl_shader_dependency_tree_new (void);
OpenGLShaderDependencyTree* open_gl_shader_dependency_tree_construct (GType object_type);
OpenGLShaderBuilder* open_gl_shader_builder_construct (GType object_type, gint version);
void open_gl_shader_builder_add_vertex_block (OpenGLShaderBuilder* self, OpenGLShaderCodeBlock* block);
void open_gl_shader_builder_add_fragment_block (OpenGLShaderBuilder* self, OpenGLShaderCodeBlock* block);
gchar* open_gl_shader_builder_create_vertex_shader (OpenGLShaderBuilder* self);
gchar* open_gl_shader_builder_create_fragment_shader (OpenGLShaderBuilder* self);
gpointer open_gl_shader_program3_d_ref (gpointer instance);
void open_gl_shader_program3_d_unref (gpointer instance);
GParamSpec* param_spec_open_gl_shader_program3_d (const gchar* name, const gchar* nick, const gchar* blurb, GType object_type, GParamFlags flags);
void value_set_open_gl_shader_program3_d (GValue* value, gpointer v_object);
void value_take_open_gl_shader_program3_d (GValue* value, gpointer v_object);
gpointer value_get_open_gl_shader_program3_d (const GValue* value);
GType open_gl_shader_program3_d_get_type (void) G_GNUC_CONST;
OpenGLShaderProgram3D* open_gl_shader_program3_d_new (gint max_lights, gint vert_position_attribute, gint vert_texture_attribute, gint vert_normal_attribute);
OpenGLShaderProgram3D* open_gl_shader_program3_d_construct (GType object_type, gint max_lights, gint vert_position_attribute, gint vert_texture_attribute, gint vert_normal_attribute);
gboolean open_gl_shader_program3_d_init (OpenGLShaderProgram3D* self);
void open_gl_shader_program3_d_use_program (OpenGLShaderProgram3D* self);
void open_gl_shader_program3_d_apply_scene (OpenGLShaderProgram3D* self, Mat4* proj_mat, Mat4* view_mat, GeeArrayList* lights);
void open_gl_shader_program3_d_render_object (OpenGLShaderProgram3D* self, gint triangle_count, Mat4* model_mat, RenderMaterial* material, gboolean use_texture);
GType open_gl_standard_shader_builder_get_type (void) G_GNUC_CONST;
OpenGLStandardShaderBuilder* open_gl_standard_shader_builder_new (gboolean high_quality, gint max_lights);
OpenGLStandardShaderBuilder* open_gl_standard_shader_builder_construct (GType object_type, gboolean high_quality, gint max_lights);
gpointer world_ref (gpointer instance);
void world_unref (gpointer instance);
GParamSpec* param_spec_world (const gchar* name, const gchar* nick, const gchar* blurb, GType object_type, GParamFlags flags);
void value_set_world (GValue* value, gpointer v_object);
void value_take_world (GValue* value, gpointer v_object);
gpointer value_get_world (const GValue* value);
GType world_get_type (void) G_GNUC_CONST;
void world_process (World* self, DeltaArgs* args);
void world_add_to_scene (World* self, RenderScene3D* scene);
gpointer world_object_ref (gpointer instance);
void world_object_unref (gpointer instance);
GParamSpec* param_spec_world_object (const gchar* name, const gchar* nick, const gchar* blurb, GType object_type, GParamFlags flags);
void value_set_world_object (GValue* value, gpointer v_object);
void value_take_world_object (GValue* value, gpointer v_object);
gpointer value_get_world_object (const GValue* value);
GType world_object_get_type (void) G_GNUC_CONST;
void world_add_object (World* self, WorldObject* object);
World* world_new (void);
World* world_construct (GType object_type);
GType world_camera_get_type (void) G_GNUC_CONST;
WorldCamera* world_get_active_camera (World* self);
void world_set_active_camera (World* self, WorldCamera* value);
gpointer world_object_animation_ref (gpointer instance);
void world_object_animation_unref (gpointer instance);
GParamSpec* param_spec_world_object_animation (const gchar* name, const gchar* nick, const gchar* blurb, GType object_type, GParamFlags flags);
void value_set_world_object_animation (GValue* value, gpointer v_object);
void value_take_world_object_animation (GValue* value, gpointer v_object);
gpointer value_get_world_object_animation (const GValue* value);
GType world_object_animation_get_type (void) G_GNUC_CONST;
GType world_transform_get_type (void) G_GNUC_CONST;
void world_transform_add_object (WorldTransform* self, WorldObject* object);
void world_transform_remove_object (WorldTransform* self, WorldObject* object);
void world_transform_convert_object (WorldTransform* self, WorldObject* object);
void world_transform_unconvert_object (WorldTransform* self, WorldObject* object);
WorldTransform* world_transform_new (void);
WorldTransform* world_transform_construct (GType object_type);
WorldCamera* world_camera_new (void);
WorldCamera* world_camera_construct (GType object_type);
Camera* world_camera_get_camera (WorldCamera* self);
gfloat world_camera_get_focal_length (WorldCamera* self);
void world_camera_set_focal_length (WorldCamera* self, gfloat value);
GType target_world_camera_get_type (void) G_GNUC_CONST;
TargetWorldCamera* target_world_camera_new (WorldObject* viewing_target);
TargetWorldCamera* target_world_camera_construct (GType object_type, WorldObject* viewing_target);
gfloat target_world_camera_get_roll (TargetWorldCamera* self);
void target_world_camera_set_roll (TargetWorldCamera* self, gfloat value);
WorldObject* target_world_camera_get_viewing_target (TargetWorldCamera* self);
void target_world_camera_set_viewing_target (TargetWorldCamera* self, WorldObject* value);
GType world_object_transformable_get_type (void) G_GNUC_CONST;
GType world_label_get_type (void) G_GNUC_CONST;
WorldLabel* world_label_new (ResourceStore* store);
WorldLabel* world_label_construct (GType object_type, ResourceStore* store);
const gchar* world_label_get_font_type (WorldLabel* self);
void world_label_set_font_type (WorldLabel* self, const gchar* value);
gfloat world_label_get_font_size (WorldLabel* self);
void world_label_set_font_size (WorldLabel* self, gfloat value);
const gchar* world_label_get_text (WorldLabel* self);
void world_label_set_text (WorldLabel* self, const gchar* value);
gboolean world_label_get_bold (WorldLabel* self);
void world_label_set_bold (WorldLabel* self, gboolean value);
void world_label_get_color (WorldLabel* self, Color * result);
void world_label_set_color (WorldLabel* self, Color * value);
void world_label_get_end_size (WorldLabel* self, Vec3 * result);
GType world_light_get_type (void) G_GNUC_CONST;
WorldLight* world_light_new (void);
WorldLight* world_light_construct (GType object_type);
gfloat world_light_get_intensity (WorldLight* self);
void world_light_set_intensity (WorldLight* self, gfloat value);
GType world_light_animation_get_type (void) G_GNUC_CONST;
GType animation_time_get_type (void) G_GNUC_CONST;
WorldLightAnimation* world_light_animation_new (AnimationTime* time);
WorldLightAnimation* world_light_animation_construct (GType object_type, AnimationTime* time);
void world_light_animation_do_relative_intensity (WorldLightAnimation* self, Curve* curve);
void world_light_animation_do_absolute_intensity (WorldLightAnimation* self, Curve* curve, gfloat start_intensity);
gboolean world_light_animation_get_use_intensity (WorldLightAnimation* self);
gboolean world_light_animation_get_relative_intensity (WorldLightAnimation* self);
gfloat world_light_animation_get_start_intensity (WorldLightAnimation* self);
void world_light_animation_set_start_intensity (WorldLightAnimation* self, gfloat value);
Curve* world_light_animation_get_intensity_curve (WorldLightAnimation* self);
WorldObject* world_object_construct (GType object_type);
void world_object_process (WorldObject* self, DeltaArgs* args);
void world_object_animate (WorldObject* self, WorldObjectAnimation* animation, gboolean buffered);
void world_object_finish_animations (WorldObject* self);
void world_object_cancel_animations (WorldObject* self);
void world_object_cancel_buffered_animations (WorldObject* self);
void world_object_cancel_unbuffered_animations (WorldObject* self);
void world_object_remove_animation (WorldObject* self, WorldObjectAnimation* animation);
void world_object_start_custom_animation (WorldObject* self, WorldObjectAnimation* animation);
void world_object_process_custom_animation (WorldObject* self, WorldObjectAnimation* animation, gfloat time);
void world_object_do_process (WorldObject* self, DeltaArgs* args);
void world_object_apply_transform (WorldObject* self, Transform* transform);
void world_object_add_to_scene (WorldObject* self, RenderScene3D* scene);
Transform* world_object_get_transform (WorldObject* self);
WorldObjectAnimation* world_object_animation_new (AnimationTime* time);
WorldObjectAnimation* world_object_animation_construct (GType object_type, AnimationTime* time);
void world_object_animation_process (WorldObjectAnimation* self, DeltaArgs* args);
void world_object_animation_do_relative_position (WorldObjectAnimation* self, Path3D* path);
void world_object_animation_do_absolute_position (WorldObjectAnimation* self, Path3D* path);
void world_object_animation_do_relative_scale (WorldObjectAnimation* self, Path3D* path);
void world_object_animation_do_absolute_scale (WorldObjectAnimation* self, Path3D* path);
void world_object_animation_do_relative_rotation (WorldObjectAnimation* self, PathQuat* path);
void world_object_animation_do_absolute_rotation (WorldObjectAnimation* self, PathQuat* path);
void world_object_animation_do_finish (WorldObjectAnimation* self);
void world_object_animation_get_start_position (WorldObjectAnimation* self, Vec3 * result);
void world_object_animation_set_start_position (WorldObjectAnimation* self, Vec3 * value);
void world_object_animation_get_start_scale (WorldObjectAnimation* self, Vec3 * result);
void world_object_animation_set_start_scale (WorldObjectAnimation* self, Vec3 * value);
Quat* world_object_animation_get_start_rotation (WorldObjectAnimation* self);
void world_object_animation_set_start_rotation (WorldObjectAnimation* self, Quat* value);
Path3D* world_object_animation_get_position_path (WorldObjectAnimation* self);
Path3D* world_object_animation_get_scale_path (WorldObjectAnimation* self);
PathQuat* world_object_animation_get_rotation_path (WorldObjectAnimation* self);
Curve* world_object_animation_get_curve (WorldObjectAnimation* self);
void world_object_animation_set_curve (WorldObjectAnimation* self, Curve* value);
WorldObjectTransformable* world_object_transformable_new (Transformable3D* object);
WorldObjectTransformable* world_object_transformable_construct (GType object_type, Transformable3D* object);
gpointer animation_ref (gpointer instance);
void animation_unref (gpointer instance);
GParamSpec* param_spec_animation (const gchar* name, const gchar* nick, const gchar* blurb, GType object_type, GParamFlags flags);
void value_set_animation (GValue* value, gpointer v_object);
void value_take_animation (GValue* value, gpointer v_object);
gpointer value_get_animation (const GValue* value);
GType animation_get_type (void) G_GNUC_CONST;
Animation* animation_new (AnimationTime* times);
Animation* animation_construct (GType object_type, AnimationTime* times);
Animation* animation_new_delay (gfloat delay);
Animation* animation_construct_delay (GType object_type, gfloat delay);
void animation_process (Animation* self, DeltaArgs* delta);
Curve* animation_get_curve (Animation* self);
void animation_set_curve (Animation* self, Curve* value);
AnimationTime* animation_time_new (gfloat pre, gfloat time, gfloat post);
AnimationTime* animation_time_construct (GType object_type, gfloat pre, gfloat time, gfloat post);
AnimationTime* animation_time_new_preset (gfloat time);
AnimationTime* animation_time_construct_preset (GType object_type, gfloat time);
AnimationTime* animation_time_new_zero (void);
AnimationTime* animation_time_construct_zero (GType object_type);
gfloat animation_time_total (AnimationTime* self);
gfloat animation_time_get_pre (AnimationTime* self);
void animation_time_set_pre (AnimationTime* self, gfloat value);
gfloat animation_time_get_time (AnimationTime* self);
void animation_time_set_time (AnimationTime* self, gfloat value);
gfloat animation_time_get_post (AnimationTime* self);
void animation_time_set_post (AnimationTime* self, gfloat value);
void container_add_child (Container* self, Container* child);
void container_add_child_back (Container* self, Container* child);
void container_remove_child (Container* self, Container* child);
void container_add_animation (Container* self, Animation* animation);
void container_process (Container* self, DeltaArgs* delta);
void container_render (Container* self, RenderState* state, RenderScene2D* scene);
void container_mouse_event (Container* self, MouseEventArgs* mouse);
void container_mouse_move (Container* self, MouseMoveArgs* mouse);
void container_key_press (Container* self, KeyArgs* key);
void container_text_input (Container* self, TextInputArgs* text);
void container_text_edit (Container* self, TextEditArgs* text);
void container_resize (Container* self);
void container_to_parent_local (Container* self, Vec2* global, Vec2* result);
void container_to_local (Container* self, Vec2* global, Vec2* result);
void container_start_text_input (Container* self);
void container_stop_text_input (Container* self);
gchar* container_get_clipboard_text (Container* self);
void container_set_clipboard_text (Container* self, const gchar* text);
void container_added (Container* self);
void container_removed (Container* self);
void container_resized (Container* self);
void container_do_render (Container* self, RenderState* state, RenderScene2D* scene);
void container_do_process (Container* self, DeltaArgs* delta);
void container_do_mouse_event (Container* self, MouseEventArgs* mouse);
void container_do_mouse_move (Container* self, MouseMoveArgs* mouse);
void container_do_key_press (Container* self, KeyArgs* key);
void container_do_text_input (Container* self, TextInputArgs* text);
void container_do_text_edit (Container* self, TextEditArgs* text);
Container* container_construct (GType object_type);
RenderWindow* container_get_window (Container* self);
ResourceStore* container_get_store (Container* self);
void container_get_parent_rect (Container* self, EngineRectangle * result);
void container_get_window_size (Container* self, Size2i * result);
void container_get_position (Container* self, Vec2 * result);
void container_set_position (Container* self, Vec2 * value);
void container_get_size (Container* self, Size2 * result);
void container_set_size (Container* self, Size2 * value);
void container_get_relative_size (Container* self, Size2 * result);
void container_set_relative_size (Container* self, Size2 * value);
void container_get_outer_anchor (Container* self, Vec2 * result);
void container_set_outer_anchor (Container* self, Vec2 * value);
void container_get_inner_anchor (Container* self, Vec2 * result);
void container_set_inner_anchor (Container* self, Vec2 * value);
void container_get_rect (Container* self, EngineRectangle * result);
GType resize_style_get_type (void) G_GNUC_CONST;
ResizeStyle container_get_resize_style (Container* self);
void container_set_resize_style (Container* self, ResizeStyle value);
void container_get_normal_position (Container* self, Vec2 * result);
gboolean container_get_scissor (Container* self);
void container_set_scissor (Container* self, gboolean value);
void container_get_scissor_box (Container* self, EngineRectangle * result);
void container_set_scissor_box (Container* self, EngineRectangle * value);
gboolean container_get_visible (Container* self);
void container_set_visible (Container* self, gboolean value);
gboolean container_get_loaded (Container* self);
GType control_get_type (void) G_GNUC_CONST;
void control_on_mouse_move (Control* self, Vec2* position);
void control_on_click (Control* self, Vec2* position);
void control_on_mouse_down (Control* self, Vec2* position);
void control_on_mouse_up (Control* self, Vec2* position);
void control_on_mouse_over (Control* self);
void control_on_focus_lost (Control* self);
void control_on_child_focus_lost (Control* self);
void control_on_key_press (Control* self, KeyArgs* key);
void control_on_text_input (Control* self, TextInputArgs* text);
void control_on_text_edit (Control* self, TextEditArgs* text);
Control* control_construct (GType object_type);
gboolean control_hover_check (Control* self, Vec2i* point);
gboolean control_get_enabled (Control* self);
void control_set_enabled (Control* self, gboolean value);
gboolean control_get_hovering (Control* self);
gboolean control_get_focused (Control* self);
gboolean control_get_mouse_down (Control* self);
gboolean control_get_selectable (Control* self);
void control_set_selectable (Control* self, gboolean value);
CursorType control_get_cursor_type (Control* self);
void control_set_cursor_type (Control* self, CursorType value);
GType end_control_get_type (void) G_GNUC_CONST;
void end_control_on_added (EndControl* self);
RenderObject2D* end_control_get_obj (EndControl* self);
EndControl* end_control_construct (GType object_type);
void end_control_get_end_size (EndControl* self, Size2 * result);
void iwindow_target_swap (IWindowTarget* self);
void iwindow_target_pump_events (IWindowTarget* self);
void iwindow_target_set_icon (IWindowTarget* self, const gchar* icon);
void iwindow_target_set_cursor_type (IWindowTarget* self, CursorType type);
void iwindow_target_set_cursor_hidden (IWindowTarget* self, gboolean hidden);
void iwindow_target_set_cursor_position (IWindowTarget* self, gint x, gint y);
gchar* iwindow_target_get_clipboard_text (IWindowTarget* self);
void iwindow_target_set_clipboard_text (IWindowTarget* self, const gchar* text);
void iwindow_target_start_text_input (IWindowTarget* self);
void iwindow_target_stop_text_input (IWindowTarget* self);
gboolean iwindow_target_get_fullscreen (IWindowTarget* self);
void iwindow_target_set_fullscreen (IWindowTarget* self, gboolean value);
void iwindow_target_get_size (IWindowTarget* self, Size2i * result);
void iwindow_target_set_size (IWindowTarget* self, Size2i * value);
GType main_view_get_type (void) G_GNUC_CONST;
MainView* main_view_new (RenderWindow* window);
MainView* main_view_construct (GType object_type, RenderWindow* window);
void main_view_start_render (MainView* self, RenderState* state);
void main_view_start_process (MainView* self, DeltaArgs* args);
void main_view_set_window (MainView* self, RenderWindow* window);
GType mouse_event_args_button_get_type (void) G_GNUC_CONST;
gpointer mouse_reference_ref (gpointer instance);
void mouse_reference_unref (gpointer instance);
GParamSpec* param_spec_mouse_reference (const gchar* name, const gchar* nick, const gchar* blurb, GType object_type, GParamFlags flags);
void value_set_mouse_reference (GValue* value, gpointer v_object);
void value_take_mouse_reference (GValue* value, gpointer v_object);
gpointer value_get_mouse_reference (const GValue* value);
GType mouse_reference_get_type (void) G_GNUC_CONST;
MouseEventArgs* mouse_event_args_new (MouseEventArgsButton button, MouseReference* reference, gboolean down, Vec2i* position, Size2i* size);
MouseEventArgs* mouse_event_args_construct (GType object_type, MouseEventArgsButton button, MouseReference* reference, gboolean down, Vec2i* position, Size2i* size);
gboolean mouse_event_args_get_handled (MouseEventArgs* self);
void mouse_event_args_set_handled (MouseEventArgs* self, gboolean value);
MouseReference* mouse_event_args_get_reference (MouseEventArgs* self);
void mouse_event_args_set_reference (MouseEventArgs* self, MouseReference* value);
MouseEventArgsButton mouse_event_args_get_button (MouseEventArgs* self);
gboolean mouse_event_args_get_down (MouseEventArgs* self);
void mouse_event_args_get_position (MouseEventArgs* self, Vec2i * result);
void mouse_event_args_get_size (MouseEventArgs* self, Size2i * result);
MouseMoveArgs* mouse_move_args_new (Vec2i* position, Vec2i* delta, Size2i* size);
MouseMoveArgs* mouse_move_args_construct (GType object_type, Vec2i* position, Vec2i* delta, Size2i* size);
gboolean mouse_move_args_get_handled (MouseMoveArgs* self);
void mouse_move_args_set_handled (MouseMoveArgs* self, gboolean value);
CursorType mouse_move_args_get_cursor_type (MouseMoveArgs* self);
void mouse_move_args_set_cursor_type (MouseMoveArgs* self, CursorType value);
void mouse_move_args_get_position (MouseMoveArgs* self, Vec2i * result);
void mouse_move_args_get_delta (MouseMoveArgs* self, Vec2i * result);
void mouse_move_args_get_size (MouseMoveArgs* self, Size2i * result);
MouseReference* mouse_reference_new (void);
MouseReference* mouse_reference_construct (GType object_type);
KeyArgs* key_args_new (ScanCode scancode, KeyCode keycode, Modifier modifiers, gboolean repeat, gboolean down);
KeyArgs* key_args_construct (GType object_type, ScanCode scancode, KeyCode keycode, Modifier modifiers, gboolean repeat, gboolean down);
gboolean key_args_get_handled (KeyArgs* self);
void key_args_set_handled (KeyArgs* self, gboolean value);
ScanCode key_args_get_scancode (KeyArgs* self);
KeyCode key_args_get_keycode (KeyArgs* self);
Modifier key_args_get_modifiers (KeyArgs* self);
gboolean key_args_get_repeat (KeyArgs* self);
gboolean key_args_get_down (KeyArgs* self);
gchar key_args_get_key (KeyArgs* self);
TextInputArgs* text_input_args_new (const gchar* text);
TextInputArgs* text_input_args_construct (GType object_type, const gchar* text);
gboolean text_input_args_get_handled (TextInputArgs* self);
void text_input_args_set_handled (TextInputArgs* self, gboolean value);
const gchar* text_input_args_get_text (TextInputArgs* self);
TextEditArgs* text_edit_args_new (const gchar* text, gint start, gint length);
TextEditArgs* text_edit_args_construct (GType object_type, const gchar* text, gint start, gint length);
gboolean text_edit_args_get_handled (TextEditArgs* self);
void text_edit_args_set_handled (TextEditArgs* self, gboolean value);
const gchar* text_edit_args_get_text (TextEditArgs* self);
gint text_edit_args_get_start (TextEditArgs* self);
gint text_edit_args_get_length (TextEditArgs* self);
DeltaArgs* delta_args_new (gfloat time, gfloat delta);
DeltaArgs* delta_args_construct (GType object_type, gfloat time, gfloat delta);
gfloat delta_args_get_time (DeltaArgs* self);
gfloat delta_args_get_delta (DeltaArgs* self);
RenderWindow* render_window_construct (GType object_type, IWindowTarget* window, RenderTarget* renderer);
void render_window_show (RenderWindow* self);
void render_window_finish (RenderWindow* self);
void render_window_set_icon (RenderWindow* self, const gchar* icon);
void render_window_set_cursor_type (RenderWindow* self, CursorType type);
void render_window_set_cursor_hidden (RenderWindow* self, gboolean hidden);
void render_window_start_text_input (RenderWindow* self);
void render_window_stop_text_input (RenderWindow* self);
gchar* render_window_get_clipboard_text (RenderWindow* self);
void render_window_set_clipboard_text (RenderWindow* self, const gchar* text);
void render_window_do_process (RenderWindow* self, DeltaArgs* delta);
gboolean render_window_key_press (RenderWindow* self, KeyArgs* key);
void render_window_shown (RenderWindow* self);
RenderTarget* render_window_get_renderer (RenderWindow* self);
ResourceStore* render_window_get_store (RenderWindow* self);
MainView* render_window_get_main_view (RenderWindow* self);
gboolean render_window_get_fullscreen (RenderWindow* self);
void render_window_set_fullscreen (RenderWindow* self, gboolean value);
void render_window_get_back_color (RenderWindow* self, Color * result);
void render_window_set_back_color (RenderWindow* self, Color * value);
void render_window_get_size (RenderWindow* self, Size2i * result);
void render_window_get_cursor_position (RenderWindow* self, Vec2i * result);
void render_window_set_cursor_position (RenderWindow* self, Vec2i * value);
GType sdl_window_target_get_type (void) G_GNUC_CONST;
SDLWindowTarget* sdl_window_target_new (void* window, gboolean is_fullscreen);
SDLWindowTarget* sdl_window_target_construct (GType object_type, void* window, gboolean is_fullscreen);
void sdl_window_target_set_cursor_relative_mode (SDLWindowTarget* self, gboolean relative);
CursorType sdl_window_target_get_current_cursor (SDLWindowTarget* self);
View2D* view2_d_new (void);
View2D* view2_d_construct (GType object_type);
GType reset_container_get_type (void) G_GNUC_CONST;
ResetContainer* reset_container_new (void);
ResetContainer* reset_container_construct (GType object_type);
GType view3_d_get_type (void) G_GNUC_CONST;
View3D* view3_d_construct (GType object_type);
void view3_d_process_3d (View3D* self, DeltaArgs* args);
gfloat view3_d_get_world_scale_width (View3D* self);
void view3_d_set_world_scale_width (View3D* self, gfloat value);
World* view3_d_get_world (View3D* self);
GType label_control_get_type (void) G_GNUC_CONST;
LabelControl* label_control_new (void);
LabelControl* label_control_construct (GType object_type);
void label_control_get_color (LabelControl* self, Color * result);
void label_control_set_color (LabelControl* self, Color * value);
gfloat label_control_get_alpha (LabelControl* self);
void label_control_set_alpha (LabelControl* self, gfloat value);
const gchar* label_control_get_font_type (LabelControl* self);
void label_control_set_font_type (LabelControl* self, const gchar* value);
gfloat label_control_get_font_size (LabelControl* self);
void label_control_set_font_size (LabelControl* self, gfloat value);
const gchar* label_control_get_text (LabelControl* self);
void label_control_set_text (LabelControl* self, const gchar* value);
GType line_control_get_type (void) G_GNUC_CONST;
LineControl* line_control_new (void);
LineControl* line_control_construct (GType object_type);
void line_control_set_line_end_pos (LineControl* self, Vec2* position);
void line_control_get_distance (LineControl* self, Vec2 * result);
void line_control_set_distance (LineControl* self, Vec2 * value);
gfloat line_control_get_width (LineControl* self);
void line_control_set_width (LineControl* self, gfloat value);
void line_control_get_color (LineControl* self, Color * result);
void line_control_set_color (LineControl* self, Color * value);
GType list_control_get_type (void) G_GNUC_CONST;
gpointer list_column_info_ref (gpointer instance);
void list_column_info_unref (gpointer instance);
GParamSpec* param_spec_list_column_info (const gchar* name, const gchar* nick, const gchar* blurb, GType object_type, GParamFlags flags);
void value_set_list_column_info (GValue* value, gpointer v_object);
void value_take_list_column_info (GValue* value, gpointer v_object);
gpointer value_get_list_column_info (const GValue* value);
GType list_column_info_get_type (void) G_GNUC_CONST;
ListControl* list_control_construct (GType object_type, gboolean row_selectable);
void list_control_refresh_data (ListControl* self);
void list_control_on_added (ListControl* self);
gchar* list_control_get_cell_data (ListControl* self, gint row, gint column);
ListColumnInfo* list_control_get_column_info (ListControl* self, gint column);
gfloat list_control_get_row_height (ListControl* self);
void list_control_set_row_height (ListControl* self, gfloat value);
gfloat list_control_get_font_size (ListControl* self);
void list_control_set_font_size (ListControl* self, gfloat value);
gint list_control_get_selected_index (ListControl* self);
gint list_control_get_row_count (ListControl* self);
gint list_control_get_column_count (ListControl* self);
gpointer list_cell_style_ref (gpointer instance);
void list_cell_style_unref (gpointer instance);
GParamSpec* param_spec_list_cell_style (const gchar* name, const gchar* nick, const gchar* blurb, GType object_type, GParamFlags flags);
void value_set_list_cell_style (GValue* value, gpointer v_object);
void value_take_list_cell_style (GValue* value, gpointer v_object);
gpointer value_get_list_cell_style (const GValue* value);
GType list_cell_style_get_type (void) G_GNUC_CONST;
ListColumnInfo* list_column_info_new (const gchar* name, ListCellStyle* style);
ListColumnInfo* list_column_info_construct (GType object_type, const gchar* name, ListCellStyle* style);
const gchar* list_column_info_get_name (ListColumnInfo* self);
ListCellStyle* list_column_info_get_style (ListColumnInfo* self);
ListCellStyle* list_cell_style_new (ResizeStyle resize_style, gfloat width);
ListCellStyle* list_cell_style_construct (GType object_type, ResizeStyle resize_style, gfloat width);
ResizeStyle list_cell_style_get_resize_style (ListCellStyle* self);
gfloat list_cell_style_get_width (ListCellStyle* self);
GType rectangle_control_get_type (void) G_GNUC_CONST;
RectangleControl* rectangle_control_new (void);
RectangleControl* rectangle_control_construct (GType object_type);
void rectangle_control_get_color (RectangleControl* self, Color * result);
void rectangle_control_set_color (RectangleControl* self, Color * value);
gfloat rectangle_control_get_rotation (RectangleControl* self);
void rectangle_control_set_rotation (RectangleControl* self, gfloat value);
GType scroll_bar_control_get_type (void) G_GNUC_CONST;
ScrollBarControl* scroll_bar_control_new (gboolean vertical);
ScrollBarControl* scroll_bar_control_construct (GType object_type, gboolean vertical);
gint scroll_bar_control_get_minimum (ScrollBarControl* self);
void scroll_bar_control_set_minimum (ScrollBarControl* self, gint value);
gint scroll_bar_control_get_maximum (ScrollBarControl* self);
void scroll_bar_control_set_maximum (ScrollBarControl* self, gint value);
gint scroll_bar_control_get_current_value (ScrollBarControl* self);
void scroll_bar_control_set_current_value (ScrollBarControl* self, gint value);
gint scroll_bar_control_get_scroll_amount (ScrollBarControl* self);
void scroll_bar_control_set_scroll_amount (ScrollBarControl* self, gint value);
gint scroll_bar_control_get_range (ScrollBarControl* self);
gfloat scroll_bar_control_get_fval (ScrollBarControl* self);
GType sizing_control_get_type (void) G_GNUC_CONST;
void sizing_control_add_control (SizingControl* self, Container* container);
void sizing_control_remove_control (SizingControl* self, Container* container);
SizingControl* sizing_control_new (void);
SizingControl* sizing_control_construct (GType object_type);
GType sizing_style_get_type (void) G_GNUC_CONST;
SizingStyle sizing_control_get_sizing_style (SizingControl* self);
void sizing_control_set_sizing_style (SizingControl* self, SizingStyle value);
Orientation sizing_control_get_orientation (SizingControl* self);
void sizing_control_set_orientation (SizingControl* self, Orientation value);
gfloat sizing_control_get_padding (SizingControl* self);
void sizing_control_set_padding (SizingControl* self, gfloat value);
void sizing_control_get_default_size (SizingControl* self, Size2 * result);
void sizing_control_set_default_size (SizingControl* self, Size2 * value);
GType text_input_control_get_type (void) G_GNUC_CONST;
TextInputControl* text_input_control_new (const gchar* back_text, gint max_length);
TextInputControl* text_input_control_construct (GType object_type, const gchar* back_text, gint max_length);
const gchar* text_input_control_get_text (TextInputControl* self);
void text_input_control_set_text (TextInputControl* self, const gchar* value);


G_END_DECLS

#endif
